/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * UserSubscriptionEligible
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UserSubscriptionEligible {
  public static final String SERIALIZED_NAME_ACTIVE_CANCELLED_SUBSCRIPTION = "activeCancelledSubscription";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CANCELLED_SUBSCRIPTION)
  private Boolean activeCancelledSubscription;

  public static final String SERIALIZED_NAME_GIFT_ELIGIBLE = "giftEligible";
  @SerializedName(SERIALIZED_NAME_GIFT_ELIGIBLE)
  private Boolean giftEligible;

  public static final String SERIALIZED_NAME_NON_EXTEND_VENDOR_WILL_LOSE_GIFT_TIME = "nonExtendVendorWillLoseGiftTime";
  @SerializedName(SERIALIZED_NAME_NON_EXTEND_VENDOR_WILL_LOSE_GIFT_TIME)
  private Boolean nonExtendVendorWillLoseGiftTime;

  public static final String SERIALIZED_NAME_PURCHASE_ELIGIBLE = "purchaseEligible";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ELIGIBLE)
  private Boolean purchaseEligible;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ELIGIBLE = "subscriptionEligible";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ELIGIBLE)
  private Boolean subscriptionEligible;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ON_ALT_ACCOUNT = "subscriptionOnAltAccount";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ON_ALT_ACCOUNT)
  private Boolean subscriptionOnAltAccount;

  public UserSubscriptionEligible() {
  }

  public UserSubscriptionEligible activeCancelledSubscription(Boolean activeCancelledSubscription) {
    
    this.activeCancelledSubscription = activeCancelledSubscription;
    return this;
  }

   /**
   * Get activeCancelledSubscription
   * @return activeCancelledSubscription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getActiveCancelledSubscription() {
    return activeCancelledSubscription;
  }


  public void setActiveCancelledSubscription(Boolean activeCancelledSubscription) {
    this.activeCancelledSubscription = activeCancelledSubscription;
  }


  public UserSubscriptionEligible giftEligible(Boolean giftEligible) {
    
    this.giftEligible = giftEligible;
    return this;
  }

   /**
   * Get giftEligible
   * @return giftEligible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getGiftEligible() {
    return giftEligible;
  }


  public void setGiftEligible(Boolean giftEligible) {
    this.giftEligible = giftEligible;
  }


  public UserSubscriptionEligible nonExtendVendorWillLoseGiftTime(Boolean nonExtendVendorWillLoseGiftTime) {
    
    this.nonExtendVendorWillLoseGiftTime = nonExtendVendorWillLoseGiftTime;
    return this;
  }

   /**
   * Get nonExtendVendorWillLoseGiftTime
   * @return nonExtendVendorWillLoseGiftTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getNonExtendVendorWillLoseGiftTime() {
    return nonExtendVendorWillLoseGiftTime;
  }


  public void setNonExtendVendorWillLoseGiftTime(Boolean nonExtendVendorWillLoseGiftTime) {
    this.nonExtendVendorWillLoseGiftTime = nonExtendVendorWillLoseGiftTime;
  }


  public UserSubscriptionEligible purchaseEligible(Boolean purchaseEligible) {
    
    this.purchaseEligible = purchaseEligible;
    return this;
  }

   /**
   * Get purchaseEligible
   * @return purchaseEligible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getPurchaseEligible() {
    return purchaseEligible;
  }


  public void setPurchaseEligible(Boolean purchaseEligible) {
    this.purchaseEligible = purchaseEligible;
  }


  public UserSubscriptionEligible subscriptionEligible(Boolean subscriptionEligible) {
    
    this.subscriptionEligible = subscriptionEligible;
    return this;
  }

   /**
   * Get subscriptionEligible
   * @return subscriptionEligible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSubscriptionEligible() {
    return subscriptionEligible;
  }


  public void setSubscriptionEligible(Boolean subscriptionEligible) {
    this.subscriptionEligible = subscriptionEligible;
  }


  public UserSubscriptionEligible subscriptionOnAltAccount(Boolean subscriptionOnAltAccount) {
    
    this.subscriptionOnAltAccount = subscriptionOnAltAccount;
    return this;
  }

   /**
   * Get subscriptionOnAltAccount
   * @return subscriptionOnAltAccount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSubscriptionOnAltAccount() {
    return subscriptionOnAltAccount;
  }


  public void setSubscriptionOnAltAccount(Boolean subscriptionOnAltAccount) {
    this.subscriptionOnAltAccount = subscriptionOnAltAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSubscriptionEligible userSubscriptionEligible = (UserSubscriptionEligible) o;
    return Objects.equals(this.activeCancelledSubscription, userSubscriptionEligible.activeCancelledSubscription) &&
        Objects.equals(this.giftEligible, userSubscriptionEligible.giftEligible) &&
        Objects.equals(this.nonExtendVendorWillLoseGiftTime, userSubscriptionEligible.nonExtendVendorWillLoseGiftTime) &&
        Objects.equals(this.purchaseEligible, userSubscriptionEligible.purchaseEligible) &&
        Objects.equals(this.subscriptionEligible, userSubscriptionEligible.subscriptionEligible) &&
        Objects.equals(this.subscriptionOnAltAccount, userSubscriptionEligible.subscriptionOnAltAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeCancelledSubscription, giftEligible, nonExtendVendorWillLoseGiftTime, purchaseEligible, subscriptionEligible, subscriptionOnAltAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSubscriptionEligible {\n");
    sb.append("    activeCancelledSubscription: ").append(toIndentedString(activeCancelledSubscription)).append("\n");
    sb.append("    giftEligible: ").append(toIndentedString(giftEligible)).append("\n");
    sb.append("    nonExtendVendorWillLoseGiftTime: ").append(toIndentedString(nonExtendVendorWillLoseGiftTime)).append("\n");
    sb.append("    purchaseEligible: ").append(toIndentedString(purchaseEligible)).append("\n");
    sb.append("    subscriptionEligible: ").append(toIndentedString(subscriptionEligible)).append("\n");
    sb.append("    subscriptionOnAltAccount: ").append(toIndentedString(subscriptionOnAltAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeCancelledSubscription");
    openapiFields.add("giftEligible");
    openapiFields.add("nonExtendVendorWillLoseGiftTime");
    openapiFields.add("purchaseEligible");
    openapiFields.add("subscriptionEligible");
    openapiFields.add("subscriptionOnAltAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activeCancelledSubscription");
    openapiRequiredFields.add("giftEligible");
    openapiRequiredFields.add("nonExtendVendorWillLoseGiftTime");
    openapiRequiredFields.add("purchaseEligible");
    openapiRequiredFields.add("subscriptionEligible");
    openapiRequiredFields.add("subscriptionOnAltAccount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserSubscriptionEligible
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserSubscriptionEligible.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSubscriptionEligible is not found in the empty JSON string", UserSubscriptionEligible.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserSubscriptionEligible.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSubscriptionEligible` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserSubscriptionEligible.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSubscriptionEligible.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSubscriptionEligible' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSubscriptionEligible> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSubscriptionEligible.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSubscriptionEligible>() {
           @Override
           public void write(JsonWriter out, UserSubscriptionEligible value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSubscriptionEligible read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserSubscriptionEligible given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserSubscriptionEligible
  * @throws IOException if the JSON string is invalid with respect to UserSubscriptionEligible
  */
  public static UserSubscriptionEligible fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSubscriptionEligible.class);
  }

 /**
  * Convert an instance of UserSubscriptionEligible to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

