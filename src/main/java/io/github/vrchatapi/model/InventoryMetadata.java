/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * InventoryMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InventoryMetadata {
  public static final String SERIALIZED_NAME_INVENTORY_ITEMS_TO_INSTANTIATE = "inventoryItemsToInstantiate";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ITEMS_TO_INSTANTIATE)
  private List<String> inventoryItemsToInstantiate = null;

  public static final String SERIALIZED_NAME_ANIMATED = "animated";
  @SerializedName(SERIALIZED_NAME_ANIMATED)
  private Boolean animated;

  public static final String SERIALIZED_NAME_ANIMATION_STYLE = "animationStyle";
  @SerializedName(SERIALIZED_NAME_ANIMATION_STYLE)
  private String animationStyle;

  public static final String SERIALIZED_NAME_ASSET_BUNDLE_ID = "assetBundleId";
  @SerializedName(SERIALIZED_NAME_ASSET_BUNDLE_ID)
  private String assetBundleId;

  public static final String SERIALIZED_NAME_FILE_ID = "fileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_MASK_TAG = "maskTag";
  @SerializedName(SERIALIZED_NAME_MASK_TAG)
  private String maskTag;

  public static final String SERIALIZED_NAME_PROP_ID = "propId";
  @SerializedName(SERIALIZED_NAME_PROP_ID)
  private String propId;

  public InventoryMetadata() {
  }

  public InventoryMetadata inventoryItemsToInstantiate(List<String> inventoryItemsToInstantiate) {
    
    this.inventoryItemsToInstantiate = inventoryItemsToInstantiate;
    return this;
  }

  public InventoryMetadata addInventoryItemsToInstantiateItem(String inventoryItemsToInstantiateItem) {
    if (this.inventoryItemsToInstantiate == null) {
      this.inventoryItemsToInstantiate = new ArrayList<>();
    }
    this.inventoryItemsToInstantiate.add(inventoryItemsToInstantiateItem);
    return this;
  }

   /**
   * Only in bundles
   * @return inventoryItemsToInstantiate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only in bundles")

  public List<String> getInventoryItemsToInstantiate() {
    return inventoryItemsToInstantiate;
  }


  public void setInventoryItemsToInstantiate(List<String> inventoryItemsToInstantiate) {
    this.inventoryItemsToInstantiate = inventoryItemsToInstantiate;
  }


  public InventoryMetadata animated(Boolean animated) {
    
    this.animated = animated;
    return this;
  }

   /**
   * Get animated
   * @return animated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAnimated() {
    return animated;
  }


  public void setAnimated(Boolean animated) {
    this.animated = animated;
  }


  public InventoryMetadata animationStyle(String animationStyle) {
    
    this.animationStyle = animationStyle;
    return this;
  }

   /**
   * Get animationStyle
   * @return animationStyle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAnimationStyle() {
    return animationStyle;
  }


  public void setAnimationStyle(String animationStyle) {
    this.animationStyle = animationStyle;
  }


  public InventoryMetadata assetBundleId(String assetBundleId) {
    
    this.assetBundleId = assetBundleId;
    return this;
  }

   /**
   * Get assetBundleId
   * @return assetBundleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAssetBundleId() {
    return assetBundleId;
  }


  public void setAssetBundleId(String assetBundleId) {
    this.assetBundleId = assetBundleId;
  }


  public InventoryMetadata fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * Get fileId
   * @return fileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public InventoryMetadata imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Get imageUrl
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public InventoryMetadata maskTag(String maskTag) {
    
    this.maskTag = maskTag;
    return this;
  }

   /**
   * Get maskTag
   * @return maskTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMaskTag() {
    return maskTag;
  }


  public void setMaskTag(String maskTag) {
    this.maskTag = maskTag;
  }


  public InventoryMetadata propId(String propId) {
    
    this.propId = propId;
    return this;
  }

   /**
   * Get propId
   * @return propId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "prop_829ba6f6-b837-49d9-b9a9-056b82103b58", value = "")

  public String getPropId() {
    return propId;
  }


  public void setPropId(String propId) {
    this.propId = propId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InventoryMetadata instance itself
   */
  public InventoryMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryMetadata inventoryMetadata = (InventoryMetadata) o;
    return Objects.equals(this.inventoryItemsToInstantiate, inventoryMetadata.inventoryItemsToInstantiate) &&
        Objects.equals(this.animated, inventoryMetadata.animated) &&
        Objects.equals(this.animationStyle, inventoryMetadata.animationStyle) &&
        Objects.equals(this.assetBundleId, inventoryMetadata.assetBundleId) &&
        Objects.equals(this.fileId, inventoryMetadata.fileId) &&
        Objects.equals(this.imageUrl, inventoryMetadata.imageUrl) &&
        Objects.equals(this.maskTag, inventoryMetadata.maskTag) &&
        Objects.equals(this.propId, inventoryMetadata.propId)&&
        Objects.equals(this.additionalProperties, inventoryMetadata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inventoryItemsToInstantiate, animated, animationStyle, assetBundleId, fileId, imageUrl, maskTag, propId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryMetadata {\n");
    sb.append("    inventoryItemsToInstantiate: ").append(toIndentedString(inventoryItemsToInstantiate)).append("\n");
    sb.append("    animated: ").append(toIndentedString(animated)).append("\n");
    sb.append("    animationStyle: ").append(toIndentedString(animationStyle)).append("\n");
    sb.append("    assetBundleId: ").append(toIndentedString(assetBundleId)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    maskTag: ").append(toIndentedString(maskTag)).append("\n");
    sb.append("    propId: ").append(toIndentedString(propId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inventoryItemsToInstantiate");
    openapiFields.add("animated");
    openapiFields.add("animationStyle");
    openapiFields.add("assetBundleId");
    openapiFields.add("fileId");
    openapiFields.add("imageUrl");
    openapiFields.add("maskTag");
    openapiFields.add("propId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InventoryMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InventoryMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryMetadata is not found in the empty JSON string", InventoryMetadata.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inventoryItemsToInstantiate") != null && !jsonObj.get("inventoryItemsToInstantiate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryItemsToInstantiate` to be an array in the JSON string but got `%s`", jsonObj.get("inventoryItemsToInstantiate").toString()));
      }
      if ((jsonObj.get("animationStyle") != null && !jsonObj.get("animationStyle").isJsonNull()) && !jsonObj.get("animationStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `animationStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("animationStyle").toString()));
      }
      if ((jsonObj.get("assetBundleId") != null && !jsonObj.get("assetBundleId").isJsonNull()) && !jsonObj.get("assetBundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetBundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetBundleId").toString()));
      }
      if ((jsonObj.get("fileId") != null && !jsonObj.get("fileId").isJsonNull()) && !jsonObj.get("fileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileId").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("maskTag") != null && !jsonObj.get("maskTag").isJsonNull()) && !jsonObj.get("maskTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskTag").toString()));
      }
      if ((jsonObj.get("propId") != null && !jsonObj.get("propId").isJsonNull()) && !jsonObj.get("propId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryMetadata>() {
           @Override
           public void write(JsonWriter out, InventoryMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InventoryMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InventoryMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InventoryMetadata
  * @throws IOException if the JSON string is invalid with respect to InventoryMetadata
  */
  public static InventoryMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryMetadata.class);
  }

 /**
  * Convert an instance of InventoryMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

