/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.19.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * APIConfigReportOptionsWorld
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class APIConfigReportOptionsWorld {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List<String> environment = null;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private List<String> text = null;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = null;

  public static final String SERIALIZED_NAME_WORLDIMAGE = "worldimage";
  @SerializedName(SERIALIZED_NAME_WORLDIMAGE)
  private List<String> worldimage = null;

  public static final String SERIALIZED_NAME_WORLDSTORE = "worldstore";
  @SerializedName(SERIALIZED_NAME_WORLDSTORE)
  private List<String> worldstore = null;

  public APIConfigReportOptionsWorld() {
  }

  public APIConfigReportOptionsWorld environment(List<String> environment) {
    
    this.environment = environment;
    return this;
  }

  public APIConfigReportOptionsWorld addEnvironmentItem(String environmentItem) {
    if (this.environment == null) {
      this.environment = new ArrayList<>();
    }
    this.environment.add(environmentItem);
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getEnvironment() {
    return environment;
  }


  public void setEnvironment(List<String> environment) {
    this.environment = environment;
  }


  public APIConfigReportOptionsWorld text(List<String> text) {
    
    this.text = text;
    return this;
  }

  public APIConfigReportOptionsWorld addTextItem(String textItem) {
    if (this.text == null) {
      this.text = new ArrayList<>();
    }
    this.text.add(textItem);
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getText() {
    return text;
  }


  public void setText(List<String> text) {
    this.text = text;
  }


  public APIConfigReportOptionsWorld warnings(List<String> warnings) {
    
    this.warnings = warnings;
    return this;
  }

  public APIConfigReportOptionsWorld addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getWarnings() {
    return warnings;
  }


  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }


  public APIConfigReportOptionsWorld worldimage(List<String> worldimage) {
    
    this.worldimage = worldimage;
    return this;
  }

  public APIConfigReportOptionsWorld addWorldimageItem(String worldimageItem) {
    if (this.worldimage == null) {
      this.worldimage = new ArrayList<>();
    }
    this.worldimage.add(worldimageItem);
    return this;
  }

   /**
   * Get worldimage
   * @return worldimage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getWorldimage() {
    return worldimage;
  }


  public void setWorldimage(List<String> worldimage) {
    this.worldimage = worldimage;
  }


  public APIConfigReportOptionsWorld worldstore(List<String> worldstore) {
    
    this.worldstore = worldstore;
    return this;
  }

  public APIConfigReportOptionsWorld addWorldstoreItem(String worldstoreItem) {
    if (this.worldstore == null) {
      this.worldstore = new ArrayList<>();
    }
    this.worldstore.add(worldstoreItem);
    return this;
  }

   /**
   * Get worldstore
   * @return worldstore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getWorldstore() {
    return worldstore;
  }


  public void setWorldstore(List<String> worldstore) {
    this.worldstore = worldstore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIConfigReportOptionsWorld apIConfigReportOptionsWorld = (APIConfigReportOptionsWorld) o;
    return Objects.equals(this.environment, apIConfigReportOptionsWorld.environment) &&
        Objects.equals(this.text, apIConfigReportOptionsWorld.text) &&
        Objects.equals(this.warnings, apIConfigReportOptionsWorld.warnings) &&
        Objects.equals(this.worldimage, apIConfigReportOptionsWorld.worldimage) &&
        Objects.equals(this.worldstore, apIConfigReportOptionsWorld.worldstore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, text, warnings, worldimage, worldstore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIConfigReportOptionsWorld {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    worldimage: ").append(toIndentedString(worldimage)).append("\n");
    sb.append("    worldstore: ").append(toIndentedString(worldstore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("text");
    openapiFields.add("warnings");
    openapiFields.add("worldimage");
    openapiFields.add("worldstore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIConfigReportOptionsWorld
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIConfigReportOptionsWorld.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIConfigReportOptionsWorld is not found in the empty JSON string", APIConfigReportOptionsWorld.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIConfigReportOptionsWorld.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIConfigReportOptionsWorld` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be an array in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be an array in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("worldimage") != null && !jsonObj.get("worldimage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `worldimage` to be an array in the JSON string but got `%s`", jsonObj.get("worldimage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("worldstore") != null && !jsonObj.get("worldstore").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `worldstore` to be an array in the JSON string but got `%s`", jsonObj.get("worldstore").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIConfigReportOptionsWorld.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIConfigReportOptionsWorld' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIConfigReportOptionsWorld> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIConfigReportOptionsWorld.class));

       return (TypeAdapter<T>) new TypeAdapter<APIConfigReportOptionsWorld>() {
           @Override
           public void write(JsonWriter out, APIConfigReportOptionsWorld value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIConfigReportOptionsWorld read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIConfigReportOptionsWorld given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIConfigReportOptionsWorld
  * @throws IOException if the JSON string is invalid with respect to APIConfigReportOptionsWorld
  */
  public static APIConfigReportOptionsWorld fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIConfigReportOptionsWorld.class);
  }

 /**
  * Convert an instance of APIConfigReportOptionsWorld to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

