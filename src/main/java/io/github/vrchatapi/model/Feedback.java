/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.0
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * Feedback
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Feedback {
  public static final String SERIALIZED_NAME_COMMENTER_ID = "commenterId";
  @SerializedName(SERIALIZED_NAME_COMMENTER_ID)
  private String commenterId;

  public static final String SERIALIZED_NAME_COMMENTER_NAME = "commenterName";
  @SerializedName(SERIALIZED_NAME_COMMENTER_NAME)
  private String commenterName;

  public static final String SERIALIZED_NAME_CONTENT_AUTHOR_ID = "contentAuthorId";
  @SerializedName(SERIALIZED_NAME_CONTENT_AUTHOR_ID)
  private String contentAuthorId;

  public static final String SERIALIZED_NAME_CONTENT_AUTHOR_NAME = "contentAuthorName";
  @SerializedName(SERIALIZED_NAME_CONTENT_AUTHOR_NAME)
  private String contentAuthorName;

  public static final String SERIALIZED_NAME_CONTENT_ID = "contentId";
  @SerializedName(SERIALIZED_NAME_CONTENT_ID)
  private String contentId;

  public static final String SERIALIZED_NAME_CONTENT_NAME = "contentName";
  @SerializedName(SERIALIZED_NAME_CONTENT_NAME)
  private String contentName;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CONTENT_VERSION = "contentVersion";
  @SerializedName(SERIALIZED_NAME_CONTENT_VERSION)
  private Integer contentVersion;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Feedback() {
  }

  public Feedback commenterId(String commenterId) {
    
    this.commenterId = commenterId;
    return this;
  }

   /**
   * A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
   * @return commenterId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", required = true, value = "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.")

  public String getCommenterId() {
    return commenterId;
  }


  public void setCommenterId(String commenterId) {
    this.commenterId = commenterId;
  }


  public Feedback commenterName(String commenterName) {
    
    this.commenterName = commenterName;
    return this;
  }

   /**
   * Get commenterName
   * @return commenterName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCommenterName() {
    return commenterName;
  }


  public void setCommenterName(String commenterName) {
    this.commenterName = commenterName;
  }


  public Feedback contentAuthorId(String contentAuthorId) {
    
    this.contentAuthorId = contentAuthorId;
    return this;
  }

   /**
   * A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
   * @return contentAuthorId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", required = true, value = "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.")

  public String getContentAuthorId() {
    return contentAuthorId;
  }


  public void setContentAuthorId(String contentAuthorId) {
    this.contentAuthorId = contentAuthorId;
  }


  public Feedback contentAuthorName(String contentAuthorName) {
    
    this.contentAuthorName = contentAuthorName;
    return this;
  }

   /**
   * Get contentAuthorName
   * @return contentAuthorName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getContentAuthorName() {
    return contentAuthorName;
  }


  public void setContentAuthorName(String contentAuthorName) {
    this.contentAuthorName = contentAuthorName;
  }


  public Feedback contentId(String contentId) {
    
    this.contentId = contentId;
    return this;
  }

   /**
   * Get contentId
   * @return contentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getContentId() {
    return contentId;
  }


  public void setContentId(String contentId) {
    this.contentId = contentId;
  }


  public Feedback contentName(String contentName) {
    
    this.contentName = contentName;
    return this;
  }

   /**
   * Get contentName
   * @return contentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContentName() {
    return contentName;
  }


  public void setContentName(String contentName) {
    this.contentName = contentName;
  }


  public Feedback contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public Feedback contentVersion(Integer contentVersion) {
    
    this.contentVersion = contentVersion;
    return this;
  }

   /**
   * Get contentVersion
   * @return contentVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Integer getContentVersion() {
    return contentVersion;
  }


  public void setContentVersion(Integer contentVersion) {
    this.contentVersion = contentVersion;
  }


  public Feedback description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Feedback id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "feedback_8cffb23a-f961-444e-b496-0196d1c90adb", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Feedback reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public Feedback tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public Feedback addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Feedback type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feedback feedback = (Feedback) o;
    return Objects.equals(this.commenterId, feedback.commenterId) &&
        Objects.equals(this.commenterName, feedback.commenterName) &&
        Objects.equals(this.contentAuthorId, feedback.contentAuthorId) &&
        Objects.equals(this.contentAuthorName, feedback.contentAuthorName) &&
        Objects.equals(this.contentId, feedback.contentId) &&
        Objects.equals(this.contentName, feedback.contentName) &&
        Objects.equals(this.contentType, feedback.contentType) &&
        Objects.equals(this.contentVersion, feedback.contentVersion) &&
        Objects.equals(this.description, feedback.description) &&
        Objects.equals(this.id, feedback.id) &&
        Objects.equals(this.reason, feedback.reason) &&
        Objects.equals(this.tags, feedback.tags) &&
        Objects.equals(this.type, feedback.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(commenterId, commenterName, contentAuthorId, contentAuthorName, contentId, contentName, contentType, contentVersion, description, id, reason, tags, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feedback {\n");
    sb.append("    commenterId: ").append(toIndentedString(commenterId)).append("\n");
    sb.append("    commenterName: ").append(toIndentedString(commenterName)).append("\n");
    sb.append("    contentAuthorId: ").append(toIndentedString(contentAuthorId)).append("\n");
    sb.append("    contentAuthorName: ").append(toIndentedString(contentAuthorName)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    contentName: ").append(toIndentedString(contentName)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    contentVersion: ").append(toIndentedString(contentVersion)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commenterId");
    openapiFields.add("commenterName");
    openapiFields.add("contentAuthorId");
    openapiFields.add("contentAuthorName");
    openapiFields.add("contentId");
    openapiFields.add("contentName");
    openapiFields.add("contentType");
    openapiFields.add("contentVersion");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("reason");
    openapiFields.add("tags");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("commenterId");
    openapiRequiredFields.add("commenterName");
    openapiRequiredFields.add("contentAuthorId");
    openapiRequiredFields.add("contentAuthorName");
    openapiRequiredFields.add("contentId");
    openapiRequiredFields.add("contentType");
    openapiRequiredFields.add("contentVersion");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Feedback
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Feedback.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feedback is not found in the empty JSON string", Feedback.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Feedback.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feedback` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Feedback.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("commenterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commenterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commenterId").toString()));
      }
      if (!jsonObj.get("commenterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commenterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commenterName").toString()));
      }
      if (!jsonObj.get("contentAuthorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentAuthorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentAuthorId").toString()));
      }
      if (!jsonObj.get("contentAuthorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentAuthorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentAuthorName").toString()));
      }
      if (!jsonObj.get("contentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentId").toString()));
      }
      if ((jsonObj.get("contentName") != null && !jsonObj.get("contentName").isJsonNull()) && !jsonObj.get("contentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentName").toString()));
      }
      if (!jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feedback.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feedback' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feedback> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feedback.class));

       return (TypeAdapter<T>) new TypeAdapter<Feedback>() {
           @Override
           public void write(JsonWriter out, Feedback value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feedback read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Feedback given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Feedback
  * @throws IOException if the JSON string is invalid with respect to Feedback
  */
  public static Feedback fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feedback.class);
  }

 /**
  * Convert an instance of Feedback to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

