/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.CalendarEventUserInterest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CalendarEvent {
  public static final String SERIALIZED_NAME_ACCESS_TYPE = "accessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private String accessType;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CLOSE_INSTANCE_AFTER_END_MINUTES = "closeInstanceAfterEndMinutes";
  @SerializedName(SERIALIZED_NAME_CLOSE_INSTANCE_AFTER_END_MINUTES)
  private Integer closeInstanceAfterEndMinutes;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDS_AT = "endsAt";
  @SerializedName(SERIALIZED_NAME_ENDS_AT)
  private OffsetDateTime endsAt;

  public static final String SERIALIZED_NAME_FEATURED = "featured";
  @SerializedName(SERIALIZED_NAME_FEATURED)
  private Boolean featured;

  public static final String SERIALIZED_NAME_GUEST_EARLY_JOIN_MINUTES = "guestEarlyJoinMinutes";
  @SerializedName(SERIALIZED_NAME_GUEST_EARLY_JOIN_MINUTES)
  private Integer guestEarlyJoinMinutes;

  public static final String SERIALIZED_NAME_HOST_EARLY_JOIN_MINUTES = "hostEarlyJoinMinutes";
  @SerializedName(SERIALIZED_NAME_HOST_EARLY_JOIN_MINUTES)
  private Integer hostEarlyJoinMinutes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_INTERESTED_USER_COUNT = "interestedUserCount";
  @SerializedName(SERIALIZED_NAME_INTERESTED_USER_COUNT)
  private Integer interestedUserCount;

  public static final String SERIALIZED_NAME_IS_DRAFT = "isDraft";
  @SerializedName(SERIALIZED_NAME_IS_DRAFT)
  private Boolean isDraft;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<String> languages = null;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_PLATFORMS = "platforms";
  @SerializedName(SERIALIZED_NAME_PLATFORMS)
  private List<String> platforms = null;

  public static final String SERIALIZED_NAME_ROLE_IDS = "roleIds";
  @SerializedName(SERIALIZED_NAME_ROLE_IDS)
  private List<String> roleIds = null;

  public static final String SERIALIZED_NAME_STARTS_AT = "startsAt";
  @SerializedName(SERIALIZED_NAME_STARTS_AT)
  private OffsetDateTime startsAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USES_INSTANCE_OVERFLOW = "usesInstanceOverflow";
  @SerializedName(SERIALIZED_NAME_USES_INSTANCE_OVERFLOW)
  private Boolean usesInstanceOverflow;

  public static final String SERIALIZED_NAME_USER_INTEREST = "userInterest";
  @SerializedName(SERIALIZED_NAME_USER_INTEREST)
  private CalendarEventUserInterest userInterest;

  public CalendarEvent() {
  }

  public CalendarEvent accessType(String accessType) {
    
    this.accessType = accessType;
    return this;
  }

   /**
   * Get accessType
   * @return accessType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "group", required = true, value = "")

  public String getAccessType() {
    return accessType;
  }


  public void setAccessType(String accessType) {
    this.accessType = accessType;
  }


  public CalendarEvent category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "performance", value = "")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public CalendarEvent closeInstanceAfterEndMinutes(Integer closeInstanceAfterEndMinutes) {
    
    this.closeInstanceAfterEndMinutes = closeInstanceAfterEndMinutes;
    return this;
  }

   /**
   * Get closeInstanceAfterEndMinutes
   * @return closeInstanceAfterEndMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCloseInstanceAfterEndMinutes() {
    return closeInstanceAfterEndMinutes;
  }


  public void setCloseInstanceAfterEndMinutes(Integer closeInstanceAfterEndMinutes) {
    this.closeInstanceAfterEndMinutes = closeInstanceAfterEndMinutes;
  }


  public CalendarEvent createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CalendarEvent deletedAt(OffsetDateTime deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Get deletedAt
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public CalendarEvent description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CalendarEvent endsAt(OffsetDateTime endsAt) {
    
    this.endsAt = endsAt;
    return this;
  }

   /**
   * Get endsAt
   * @return endsAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEndsAt() {
    return endsAt;
  }


  public void setEndsAt(OffsetDateTime endsAt) {
    this.endsAt = endsAt;
  }


  public CalendarEvent featured(Boolean featured) {
    
    this.featured = featured;
    return this;
  }

   /**
   * Get featured
   * @return featured
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getFeatured() {
    return featured;
  }


  public void setFeatured(Boolean featured) {
    this.featured = featured;
  }


  public CalendarEvent guestEarlyJoinMinutes(Integer guestEarlyJoinMinutes) {
    
    this.guestEarlyJoinMinutes = guestEarlyJoinMinutes;
    return this;
  }

   /**
   * Get guestEarlyJoinMinutes
   * @return guestEarlyJoinMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getGuestEarlyJoinMinutes() {
    return guestEarlyJoinMinutes;
  }


  public void setGuestEarlyJoinMinutes(Integer guestEarlyJoinMinutes) {
    this.guestEarlyJoinMinutes = guestEarlyJoinMinutes;
  }


  public CalendarEvent hostEarlyJoinMinutes(Integer hostEarlyJoinMinutes) {
    
    this.hostEarlyJoinMinutes = hostEarlyJoinMinutes;
    return this;
  }

   /**
   * Get hostEarlyJoinMinutes
   * @return hostEarlyJoinMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getHostEarlyJoinMinutes() {
    return hostEarlyJoinMinutes;
  }


  public void setHostEarlyJoinMinutes(Integer hostEarlyJoinMinutes) {
    this.hostEarlyJoinMinutes = hostEarlyJoinMinutes;
  }


  public CalendarEvent id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "cal_6b182f0c-61ef-4bdf-97fe-94f63bcba27b", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CalendarEvent imageId(String imageId) {
    
    this.imageId = imageId;
    return this;
  }

   /**
   * Get imageId
   * @return imageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "file_ce35d830-e20a-4df0-a6d4-5aaef4508044", value = "")

  public String getImageId() {
    return imageId;
  }


  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public CalendarEvent imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Get imageUrl
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public CalendarEvent interestedUserCount(Integer interestedUserCount) {
    
    this.interestedUserCount = interestedUserCount;
    return this;
  }

   /**
   * Get interestedUserCount
   * @return interestedUserCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getInterestedUserCount() {
    return interestedUserCount;
  }


  public void setInterestedUserCount(Integer interestedUserCount) {
    this.interestedUserCount = interestedUserCount;
  }


  public CalendarEvent isDraft(Boolean isDraft) {
    
    this.isDraft = isDraft;
    return this;
  }

   /**
   * Get isDraft
   * @return isDraft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsDraft() {
    return isDraft;
  }


  public void setIsDraft(Boolean isDraft) {
    this.isDraft = isDraft;
  }


  public CalendarEvent languages(List<String> languages) {
    
    this.languages = languages;
    return this;
  }

  public CalendarEvent addLanguagesItem(String languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

   /**
   *  
   * @return languages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ")

  public List<String> getLanguages() {
    return languages;
  }


  public void setLanguages(List<String> languages) {
    this.languages = languages;
  }


  public CalendarEvent ownerId(String ownerId) {
    
    this.ownerId = ownerId;
    return this;
  }

   /**
   * Get ownerId
   * @return ownerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "grp_71a7ff59-112c-4e78-a990-c7cc650776e5", value = "")

  public String getOwnerId() {
    return ownerId;
  }


  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public CalendarEvent platforms(List<String> platforms) {
    
    this.platforms = platforms;
    return this;
  }

  public CalendarEvent addPlatformsItem(String platformsItem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<>();
    }
    this.platforms.add(platformsItem);
    return this;
  }

   /**
   *  
   * @return platforms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ")

  public List<String> getPlatforms() {
    return platforms;
  }


  public void setPlatforms(List<String> platforms) {
    this.platforms = platforms;
  }


  public CalendarEvent roleIds(List<String> roleIds) {
    
    this.roleIds = roleIds;
    return this;
  }

  public CalendarEvent addRoleIdsItem(String roleIdsItem) {
    if (this.roleIds == null) {
      this.roleIds = new ArrayList<>();
    }
    this.roleIds.add(roleIdsItem);
    return this;
  }

   /**
   *  
   * @return roleIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ")

  public List<String> getRoleIds() {
    return roleIds;
  }


  public void setRoleIds(List<String> roleIds) {
    this.roleIds = roleIds;
  }


  public CalendarEvent startsAt(OffsetDateTime startsAt) {
    
    this.startsAt = startsAt;
    return this;
  }

   /**
   * Get startsAt
   * @return startsAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStartsAt() {
    return startsAt;
  }


  public void setStartsAt(OffsetDateTime startsAt) {
    this.startsAt = startsAt;
  }


  public CalendarEvent tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public CalendarEvent addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   *  
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public CalendarEvent title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public CalendarEvent type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "event", value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public CalendarEvent updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CalendarEvent usesInstanceOverflow(Boolean usesInstanceOverflow) {
    
    this.usesInstanceOverflow = usesInstanceOverflow;
    return this;
  }

   /**
   * Get usesInstanceOverflow
   * @return usesInstanceOverflow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUsesInstanceOverflow() {
    return usesInstanceOverflow;
  }


  public void setUsesInstanceOverflow(Boolean usesInstanceOverflow) {
    this.usesInstanceOverflow = usesInstanceOverflow;
  }


  public CalendarEvent userInterest(CalendarEventUserInterest userInterest) {
    
    this.userInterest = userInterest;
    return this;
  }

   /**
   * Get userInterest
   * @return userInterest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CalendarEventUserInterest getUserInterest() {
    return userInterest;
  }


  public void setUserInterest(CalendarEventUserInterest userInterest) {
    this.userInterest = userInterest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalendarEvent calendarEvent = (CalendarEvent) o;
    return Objects.equals(this.accessType, calendarEvent.accessType) &&
        Objects.equals(this.category, calendarEvent.category) &&
        Objects.equals(this.closeInstanceAfterEndMinutes, calendarEvent.closeInstanceAfterEndMinutes) &&
        Objects.equals(this.createdAt, calendarEvent.createdAt) &&
        Objects.equals(this.deletedAt, calendarEvent.deletedAt) &&
        Objects.equals(this.description, calendarEvent.description) &&
        Objects.equals(this.endsAt, calendarEvent.endsAt) &&
        Objects.equals(this.featured, calendarEvent.featured) &&
        Objects.equals(this.guestEarlyJoinMinutes, calendarEvent.guestEarlyJoinMinutes) &&
        Objects.equals(this.hostEarlyJoinMinutes, calendarEvent.hostEarlyJoinMinutes) &&
        Objects.equals(this.id, calendarEvent.id) &&
        Objects.equals(this.imageId, calendarEvent.imageId) &&
        Objects.equals(this.imageUrl, calendarEvent.imageUrl) &&
        Objects.equals(this.interestedUserCount, calendarEvent.interestedUserCount) &&
        Objects.equals(this.isDraft, calendarEvent.isDraft) &&
        Objects.equals(this.languages, calendarEvent.languages) &&
        Objects.equals(this.ownerId, calendarEvent.ownerId) &&
        Objects.equals(this.platforms, calendarEvent.platforms) &&
        Objects.equals(this.roleIds, calendarEvent.roleIds) &&
        Objects.equals(this.startsAt, calendarEvent.startsAt) &&
        Objects.equals(this.tags, calendarEvent.tags) &&
        Objects.equals(this.title, calendarEvent.title) &&
        Objects.equals(this.type, calendarEvent.type) &&
        Objects.equals(this.updatedAt, calendarEvent.updatedAt) &&
        Objects.equals(this.usesInstanceOverflow, calendarEvent.usesInstanceOverflow) &&
        Objects.equals(this.userInterest, calendarEvent.userInterest);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, category, closeInstanceAfterEndMinutes, createdAt, deletedAt, description, endsAt, featured, guestEarlyJoinMinutes, hostEarlyJoinMinutes, id, imageId, imageUrl, interestedUserCount, isDraft, languages, ownerId, platforms, roleIds, startsAt, tags, title, type, updatedAt, usesInstanceOverflow, userInterest);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalendarEvent {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    closeInstanceAfterEndMinutes: ").append(toIndentedString(closeInstanceAfterEndMinutes)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endsAt: ").append(toIndentedString(endsAt)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    guestEarlyJoinMinutes: ").append(toIndentedString(guestEarlyJoinMinutes)).append("\n");
    sb.append("    hostEarlyJoinMinutes: ").append(toIndentedString(hostEarlyJoinMinutes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    interestedUserCount: ").append(toIndentedString(interestedUserCount)).append("\n");
    sb.append("    isDraft: ").append(toIndentedString(isDraft)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
    sb.append("    roleIds: ").append(toIndentedString(roleIds)).append("\n");
    sb.append("    startsAt: ").append(toIndentedString(startsAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    usesInstanceOverflow: ").append(toIndentedString(usesInstanceOverflow)).append("\n");
    sb.append("    userInterest: ").append(toIndentedString(userInterest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessType");
    openapiFields.add("category");
    openapiFields.add("closeInstanceAfterEndMinutes");
    openapiFields.add("createdAt");
    openapiFields.add("deletedAt");
    openapiFields.add("description");
    openapiFields.add("endsAt");
    openapiFields.add("featured");
    openapiFields.add("guestEarlyJoinMinutes");
    openapiFields.add("hostEarlyJoinMinutes");
    openapiFields.add("id");
    openapiFields.add("imageId");
    openapiFields.add("imageUrl");
    openapiFields.add("interestedUserCount");
    openapiFields.add("isDraft");
    openapiFields.add("languages");
    openapiFields.add("ownerId");
    openapiFields.add("platforms");
    openapiFields.add("roleIds");
    openapiFields.add("startsAt");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("updatedAt");
    openapiFields.add("usesInstanceOverflow");
    openapiFields.add("userInterest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessType");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("title");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CalendarEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CalendarEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalendarEvent is not found in the empty JSON string", CalendarEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CalendarEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalendarEvent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CalendarEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("accessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessType").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) && !jsonObj.get("imageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageId").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("platforms") != null && !jsonObj.get("platforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `platforms` to be an array in the JSON string but got `%s`", jsonObj.get("platforms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roleIds") != null && !jsonObj.get("roleIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleIds` to be an array in the JSON string but got `%s`", jsonObj.get("roleIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `userInterest`
      if (jsonObj.get("userInterest") != null && !jsonObj.get("userInterest").isJsonNull()) {
        CalendarEventUserInterest.validateJsonObject(jsonObj.getAsJsonObject("userInterest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalendarEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalendarEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalendarEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalendarEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CalendarEvent>() {
           @Override
           public void write(JsonWriter out, CalendarEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalendarEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CalendarEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CalendarEvent
  * @throws IOException if the JSON string is invalid with respect to CalendarEvent
  */
  public static CalendarEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalendarEvent.class);
  }

 /**
  * Convert an instance of CalendarEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

