/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.FileAnalysisAvatarStats;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * FileAnalysis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FileAnalysis {
  public static final String SERIALIZED_NAME_AVATAR_STATS = "avatarStats";
  @SerializedName(SERIALIZED_NAME_AVATAR_STATS)
  private FileAnalysisAvatarStats avatarStats;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_PERFORMANCE_RATING = "performanceRating";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_RATING)
  private String performanceRating;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_UNCOMPRESSED_SIZE = "uncompressedSize";
  @SerializedName(SERIALIZED_NAME_UNCOMPRESSED_SIZE)
  private Integer uncompressedSize;

  public FileAnalysis() {
  }

  public FileAnalysis avatarStats(FileAnalysisAvatarStats avatarStats) {
    
    this.avatarStats = avatarStats;
    return this;
  }

   /**
   * Get avatarStats
   * @return avatarStats
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FileAnalysisAvatarStats getAvatarStats() {
    return avatarStats;
  }


  public void setAvatarStats(FileAnalysisAvatarStats avatarStats) {
    this.avatarStats = avatarStats;
  }


  public FileAnalysis createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FileAnalysis encryptionKey(String encryptionKey) {
    
    this.encryptionKey = encryptionKey;
    return this;
  }

   /**
   * Get encryptionKey
   * @return encryptionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEncryptionKey() {
    return encryptionKey;
  }


  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public FileAnalysis fileSize(Integer fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Get fileSize
   * @return fileSize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFileSize() {
    return fileSize;
  }


  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }


  public FileAnalysis performanceRating(String performanceRating) {
    
    this.performanceRating = performanceRating;
    return this;
  }

   /**
   * Get performanceRating
   * @return performanceRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPerformanceRating() {
    return performanceRating;
  }


  public void setPerformanceRating(String performanceRating) {
    this.performanceRating = performanceRating;
  }


  public FileAnalysis success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public FileAnalysis uncompressedSize(Integer uncompressedSize) {
    
    this.uncompressedSize = uncompressedSize;
    return this;
  }

   /**
   * Get uncompressedSize
   * @return uncompressedSize
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getUncompressedSize() {
    return uncompressedSize;
  }


  public void setUncompressedSize(Integer uncompressedSize) {
    this.uncompressedSize = uncompressedSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileAnalysis fileAnalysis = (FileAnalysis) o;
    return Objects.equals(this.avatarStats, fileAnalysis.avatarStats) &&
        Objects.equals(this.createdAt, fileAnalysis.createdAt) &&
        Objects.equals(this.encryptionKey, fileAnalysis.encryptionKey) &&
        Objects.equals(this.fileSize, fileAnalysis.fileSize) &&
        Objects.equals(this.performanceRating, fileAnalysis.performanceRating) &&
        Objects.equals(this.success, fileAnalysis.success) &&
        Objects.equals(this.uncompressedSize, fileAnalysis.uncompressedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarStats, createdAt, encryptionKey, fileSize, performanceRating, success, uncompressedSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileAnalysis {\n");
    sb.append("    avatarStats: ").append(toIndentedString(avatarStats)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    performanceRating: ").append(toIndentedString(performanceRating)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    uncompressedSize: ").append(toIndentedString(uncompressedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatarStats");
    openapiFields.add("created_at");
    openapiFields.add("encryptionKey");
    openapiFields.add("fileSize");
    openapiFields.add("performanceRating");
    openapiFields.add("success");
    openapiFields.add("uncompressedSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avatarStats");
    openapiRequiredFields.add("fileSize");
    openapiRequiredFields.add("success");
    openapiRequiredFields.add("uncompressedSize");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileAnalysis
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FileAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileAnalysis is not found in the empty JSON string", FileAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FileAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileAnalysis` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileAnalysis.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `avatarStats`
      FileAnalysisAvatarStats.validateJsonObject(jsonObj.getAsJsonObject("avatarStats"));
      if ((jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) && !jsonObj.get("encryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKey").toString()));
      }
      if ((jsonObj.get("performanceRating") != null && !jsonObj.get("performanceRating").isJsonNull()) && !jsonObj.get("performanceRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceRating").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<FileAnalysis>() {
           @Override
           public void write(JsonWriter out, FileAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileAnalysis read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileAnalysis given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileAnalysis
  * @throws IOException if the JSON string is invalid with respect to FileAnalysis
  */
  public static FileAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileAnalysis.class);
  }

 /**
  * Convert an instance of FileAnalysis to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

