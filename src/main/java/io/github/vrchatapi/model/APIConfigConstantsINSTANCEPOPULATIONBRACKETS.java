/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.APIConfigConstantsINSTANCEPOPULATIONBRACKETSCROWDED;
import io.github.vrchatapi.model.APIConfigConstantsINSTANCEPOPULATIONBRACKETSFEW;
import io.github.vrchatapi.model.APIConfigConstantsINSTANCEPOPULATIONBRACKETSMANY;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * Population brackets based on instance population
 */
@ApiModel(description = "Population brackets based on instance population")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class APIConfigConstantsINSTANCEPOPULATIONBRACKETS {
  public static final String SERIALIZED_NAME_C_R_O_W_D_E_D = "CROWDED";
  @SerializedName(SERIALIZED_NAME_C_R_O_W_D_E_D)
  private APIConfigConstantsINSTANCEPOPULATIONBRACKETSCROWDED CROWDED;

  public static final String SERIALIZED_NAME_F_E_W = "FEW";
  @SerializedName(SERIALIZED_NAME_F_E_W)
  private APIConfigConstantsINSTANCEPOPULATIONBRACKETSFEW FEW;

  public static final String SERIALIZED_NAME_M_A_N_Y = "MANY";
  @SerializedName(SERIALIZED_NAME_M_A_N_Y)
  private APIConfigConstantsINSTANCEPOPULATIONBRACKETSMANY MANY;

  public APIConfigConstantsINSTANCEPOPULATIONBRACKETS() {
  }

  public APIConfigConstantsINSTANCEPOPULATIONBRACKETS CROWDED(APIConfigConstantsINSTANCEPOPULATIONBRACKETSCROWDED CROWDED) {
    
    this.CROWDED = CROWDED;
    return this;
  }

   /**
   * Get CROWDED
   * @return CROWDED
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIConfigConstantsINSTANCEPOPULATIONBRACKETSCROWDED getCROWDED() {
    return CROWDED;
  }


  public void setCROWDED(APIConfigConstantsINSTANCEPOPULATIONBRACKETSCROWDED CROWDED) {
    this.CROWDED = CROWDED;
  }


  public APIConfigConstantsINSTANCEPOPULATIONBRACKETS FEW(APIConfigConstantsINSTANCEPOPULATIONBRACKETSFEW FEW) {
    
    this.FEW = FEW;
    return this;
  }

   /**
   * Get FEW
   * @return FEW
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIConfigConstantsINSTANCEPOPULATIONBRACKETSFEW getFEW() {
    return FEW;
  }


  public void setFEW(APIConfigConstantsINSTANCEPOPULATIONBRACKETSFEW FEW) {
    this.FEW = FEW;
  }


  public APIConfigConstantsINSTANCEPOPULATIONBRACKETS MANY(APIConfigConstantsINSTANCEPOPULATIONBRACKETSMANY MANY) {
    
    this.MANY = MANY;
    return this;
  }

   /**
   * Get MANY
   * @return MANY
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIConfigConstantsINSTANCEPOPULATIONBRACKETSMANY getMANY() {
    return MANY;
  }


  public void setMANY(APIConfigConstantsINSTANCEPOPULATIONBRACKETSMANY MANY) {
    this.MANY = MANY;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIConfigConstantsINSTANCEPOPULATIONBRACKETS apIConfigConstantsINSTANCEPOPULATIONBRACKETS = (APIConfigConstantsINSTANCEPOPULATIONBRACKETS) o;
    return Objects.equals(this.CROWDED, apIConfigConstantsINSTANCEPOPULATIONBRACKETS.CROWDED) &&
        Objects.equals(this.FEW, apIConfigConstantsINSTANCEPOPULATIONBRACKETS.FEW) &&
        Objects.equals(this.MANY, apIConfigConstantsINSTANCEPOPULATIONBRACKETS.MANY);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CROWDED, FEW, MANY);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIConfigConstantsINSTANCEPOPULATIONBRACKETS {\n");
    sb.append("    CROWDED: ").append(toIndentedString(CROWDED)).append("\n");
    sb.append("    FEW: ").append(toIndentedString(FEW)).append("\n");
    sb.append("    MANY: ").append(toIndentedString(MANY)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CROWDED");
    openapiFields.add("FEW");
    openapiFields.add("MANY");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIConfigConstantsINSTANCEPOPULATIONBRACKETS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIConfigConstantsINSTANCEPOPULATIONBRACKETS.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIConfigConstantsINSTANCEPOPULATIONBRACKETS is not found in the empty JSON string", APIConfigConstantsINSTANCEPOPULATIONBRACKETS.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIConfigConstantsINSTANCEPOPULATIONBRACKETS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIConfigConstantsINSTANCEPOPULATIONBRACKETS` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `CROWDED`
      if (jsonObj.get("CROWDED") != null && !jsonObj.get("CROWDED").isJsonNull()) {
        APIConfigConstantsINSTANCEPOPULATIONBRACKETSCROWDED.validateJsonObject(jsonObj.getAsJsonObject("CROWDED"));
      }
      // validate the optional field `FEW`
      if (jsonObj.get("FEW") != null && !jsonObj.get("FEW").isJsonNull()) {
        APIConfigConstantsINSTANCEPOPULATIONBRACKETSFEW.validateJsonObject(jsonObj.getAsJsonObject("FEW"));
      }
      // validate the optional field `MANY`
      if (jsonObj.get("MANY") != null && !jsonObj.get("MANY").isJsonNull()) {
        APIConfigConstantsINSTANCEPOPULATIONBRACKETSMANY.validateJsonObject(jsonObj.getAsJsonObject("MANY"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIConfigConstantsINSTANCEPOPULATIONBRACKETS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIConfigConstantsINSTANCEPOPULATIONBRACKETS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIConfigConstantsINSTANCEPOPULATIONBRACKETS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIConfigConstantsINSTANCEPOPULATIONBRACKETS.class));

       return (TypeAdapter<T>) new TypeAdapter<APIConfigConstantsINSTANCEPOPULATIONBRACKETS>() {
           @Override
           public void write(JsonWriter out, APIConfigConstantsINSTANCEPOPULATIONBRACKETS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIConfigConstantsINSTANCEPOPULATIONBRACKETS read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIConfigConstantsINSTANCEPOPULATIONBRACKETS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIConfigConstantsINSTANCEPOPULATIONBRACKETS
  * @throws IOException if the JSON string is invalid with respect to APIConfigConstantsINSTANCEPOPULATIONBRACKETS
  */
  public static APIConfigConstantsINSTANCEPOPULATIONBRACKETS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIConfigConstantsINSTANCEPOPULATIONBRACKETS.class);
  }

 /**
  * Convert an instance of APIConfigConstantsINSTANCEPOPULATIONBRACKETS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

