/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.1
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * RegisterUserAccountRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RegisterUserAccountRequest {
  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_CAPTCHA_CODE = "captchaCode";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_CODE)
  private String captchaCode;

  public static final String SERIALIZED_NAME_SUBSCRIBE = "subscribe";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE)
  private Boolean subscribe;

  public static final String SERIALIZED_NAME_ACCEPTED_T_O_S_VERSION = "acceptedTOSVersion";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_T_O_S_VERSION)
  private Integer acceptedTOSVersion;

  public RegisterUserAccountRequest() {
  }

  public RegisterUserAccountRequest username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Display Name / Username (Username is a sanitized version)
   * @return username
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Display Name / Username (Username is a sanitized version)")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public RegisterUserAccountRequest password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Password
   * @return password
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Password")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public RegisterUserAccountRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email address
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Email address")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public RegisterUserAccountRequest year(String year) {
    
    this.year = year;
    return this;
  }

   /**
   * Birth year
   * @return year
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Birth year")

  public String getYear() {
    return year;
  }


  public void setYear(String year) {
    this.year = year;
  }


  public RegisterUserAccountRequest month(String month) {
    
    this.month = month;
    return this;
  }

   /**
   * Birth month of year
   * @return month
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Birth month of year")

  public String getMonth() {
    return month;
  }


  public void setMonth(String month) {
    this.month = month;
  }


  public RegisterUserAccountRequest day(String day) {
    
    this.day = day;
    return this;
  }

   /**
   * Birth day of month
   * @return day
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Birth day of month")

  public String getDay() {
    return day;
  }


  public void setDay(String day) {
    this.day = day;
  }


  public RegisterUserAccountRequest captchaCode(String captchaCode) {
    
    this.captchaCode = captchaCode;
    return this;
  }

   /**
   * Captcha code
   * @return captchaCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Captcha code")

  public String getCaptchaCode() {
    return captchaCode;
  }


  public void setCaptchaCode(String captchaCode) {
    this.captchaCode = captchaCode;
  }


  public RegisterUserAccountRequest subscribe(Boolean subscribe) {
    
    this.subscribe = subscribe;
    return this;
  }

   /**
   * Whether to recieve promotional emails
   * @return subscribe
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether to recieve promotional emails")

  public Boolean getSubscribe() {
    return subscribe;
  }


  public void setSubscribe(Boolean subscribe) {
    this.subscribe = subscribe;
  }


  public RegisterUserAccountRequest acceptedTOSVersion(Integer acceptedTOSVersion) {
    
    this.acceptedTOSVersion = acceptedTOSVersion;
    return this;
  }

   /**
   * The most recent version of the TOS
   * @return acceptedTOSVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The most recent version of the TOS")

  public Integer getAcceptedTOSVersion() {
    return acceptedTOSVersion;
  }


  public void setAcceptedTOSVersion(Integer acceptedTOSVersion) {
    this.acceptedTOSVersion = acceptedTOSVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterUserAccountRequest registerUserAccountRequest = (RegisterUserAccountRequest) o;
    return Objects.equals(this.username, registerUserAccountRequest.username) &&
        Objects.equals(this.password, registerUserAccountRequest.password) &&
        Objects.equals(this.email, registerUserAccountRequest.email) &&
        Objects.equals(this.year, registerUserAccountRequest.year) &&
        Objects.equals(this.month, registerUserAccountRequest.month) &&
        Objects.equals(this.day, registerUserAccountRequest.day) &&
        Objects.equals(this.captchaCode, registerUserAccountRequest.captchaCode) &&
        Objects.equals(this.subscribe, registerUserAccountRequest.subscribe) &&
        Objects.equals(this.acceptedTOSVersion, registerUserAccountRequest.acceptedTOSVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, password, email, year, month, day, captchaCode, subscribe, acceptedTOSVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterUserAccountRequest {\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    captchaCode: ").append(toIndentedString(captchaCode)).append("\n");
    sb.append("    subscribe: ").append(toIndentedString(subscribe)).append("\n");
    sb.append("    acceptedTOSVersion: ").append(toIndentedString(acceptedTOSVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("email");
    openapiFields.add("year");
    openapiFields.add("month");
    openapiFields.add("day");
    openapiFields.add("captchaCode");
    openapiFields.add("subscribe");
    openapiFields.add("acceptedTOSVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("year");
    openapiRequiredFields.add("month");
    openapiRequiredFields.add("day");
    openapiRequiredFields.add("captchaCode");
    openapiRequiredFields.add("subscribe");
    openapiRequiredFields.add("acceptedTOSVersion");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegisterUserAccountRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RegisterUserAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterUserAccountRequest is not found in the empty JSON string", RegisterUserAccountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RegisterUserAccountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterUserAccountRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterUserAccountRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
      if (!jsonObj.get("month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("month").toString()));
      }
      if (!jsonObj.get("day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day").toString()));
      }
      if (!jsonObj.get("captchaCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterUserAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterUserAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterUserAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterUserAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterUserAccountRequest>() {
           @Override
           public void write(JsonWriter out, RegisterUserAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterUserAccountRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegisterUserAccountRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegisterUserAccountRequest
  * @throws IOException if the JSON string is invalid with respect to RegisterUserAccountRequest
  */
  public static RegisterUserAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterUserAccountRequest.class);
  }

 /**
  * Convert an instance of RegisterUserAccountRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

