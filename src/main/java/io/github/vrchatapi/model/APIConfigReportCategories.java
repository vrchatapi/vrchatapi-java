/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.ReportCategory;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * Categories available for reporting objectionable content
 */
@ApiModel(description = "Categories available for reporting objectionable content")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class APIConfigReportCategories {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private ReportCategory avatar;

  public static final String SERIALIZED_NAME_AVATARPAGE = "avatarpage";
  @SerializedName(SERIALIZED_NAME_AVATARPAGE)
  private ReportCategory avatarpage;

  public static final String SERIALIZED_NAME_BEHAVIOR = "behavior";
  @SerializedName(SERIALIZED_NAME_BEHAVIOR)
  private ReportCategory behavior;

  public static final String SERIALIZED_NAME_CHAT = "chat";
  @SerializedName(SERIALIZED_NAME_CHAT)
  private ReportCategory chat;

  public static final String SERIALIZED_NAME_EMOJI = "emoji";
  @SerializedName(SERIALIZED_NAME_EMOJI)
  private ReportCategory emoji;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private ReportCategory environment;

  public static final String SERIALIZED_NAME_GROUPSTORE = "groupstore";
  @SerializedName(SERIALIZED_NAME_GROUPSTORE)
  private ReportCategory groupstore;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ReportCategory image;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private ReportCategory text;

  public static final String SERIALIZED_NAME_STICKER = "sticker";
  @SerializedName(SERIALIZED_NAME_STICKER)
  private ReportCategory sticker;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private ReportCategory warnings;

  public static final String SERIALIZED_NAME_WORLDIMAGE = "worldimage";
  @SerializedName(SERIALIZED_NAME_WORLDIMAGE)
  private ReportCategory worldimage;

  public static final String SERIALIZED_NAME_WORLDSTORE = "worldstore";
  @SerializedName(SERIALIZED_NAME_WORLDSTORE)
  private ReportCategory worldstore;

  public APIConfigReportCategories() {
  }

  public APIConfigReportCategories avatar(ReportCategory avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getAvatar() {
    return avatar;
  }


  public void setAvatar(ReportCategory avatar) {
    this.avatar = avatar;
  }


  public APIConfigReportCategories avatarpage(ReportCategory avatarpage) {
    
    this.avatarpage = avatarpage;
    return this;
  }

   /**
   * Get avatarpage
   * @return avatarpage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportCategory getAvatarpage() {
    return avatarpage;
  }


  public void setAvatarpage(ReportCategory avatarpage) {
    this.avatarpage = avatarpage;
  }


  public APIConfigReportCategories behavior(ReportCategory behavior) {
    
    this.behavior = behavior;
    return this;
  }

   /**
   * Get behavior
   * @return behavior
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getBehavior() {
    return behavior;
  }


  public void setBehavior(ReportCategory behavior) {
    this.behavior = behavior;
  }


  public APIConfigReportCategories chat(ReportCategory chat) {
    
    this.chat = chat;
    return this;
  }

   /**
   * Get chat
   * @return chat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getChat() {
    return chat;
  }


  public void setChat(ReportCategory chat) {
    this.chat = chat;
  }


  public APIConfigReportCategories emoji(ReportCategory emoji) {
    
    this.emoji = emoji;
    return this;
  }

   /**
   * Get emoji
   * @return emoji
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportCategory getEmoji() {
    return emoji;
  }


  public void setEmoji(ReportCategory emoji) {
    this.emoji = emoji;
  }


  public APIConfigReportCategories environment(ReportCategory environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getEnvironment() {
    return environment;
  }


  public void setEnvironment(ReportCategory environment) {
    this.environment = environment;
  }


  public APIConfigReportCategories groupstore(ReportCategory groupstore) {
    
    this.groupstore = groupstore;
    return this;
  }

   /**
   * Get groupstore
   * @return groupstore
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getGroupstore() {
    return groupstore;
  }


  public void setGroupstore(ReportCategory groupstore) {
    this.groupstore = groupstore;
  }


  public APIConfigReportCategories image(ReportCategory image) {
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getImage() {
    return image;
  }


  public void setImage(ReportCategory image) {
    this.image = image;
  }


  public APIConfigReportCategories text(ReportCategory text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getText() {
    return text;
  }


  public void setText(ReportCategory text) {
    this.text = text;
  }


  public APIConfigReportCategories sticker(ReportCategory sticker) {
    
    this.sticker = sticker;
    return this;
  }

   /**
   * Get sticker
   * @return sticker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportCategory getSticker() {
    return sticker;
  }


  public void setSticker(ReportCategory sticker) {
    this.sticker = sticker;
  }


  public APIConfigReportCategories warnings(ReportCategory warnings) {
    
    this.warnings = warnings;
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getWarnings() {
    return warnings;
  }


  public void setWarnings(ReportCategory warnings) {
    this.warnings = warnings;
  }


  public APIConfigReportCategories worldimage(ReportCategory worldimage) {
    
    this.worldimage = worldimage;
    return this;
  }

   /**
   * Get worldimage
   * @return worldimage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getWorldimage() {
    return worldimage;
  }


  public void setWorldimage(ReportCategory worldimage) {
    this.worldimage = worldimage;
  }


  public APIConfigReportCategories worldstore(ReportCategory worldstore) {
    
    this.worldstore = worldstore;
    return this;
  }

   /**
   * Get worldstore
   * @return worldstore
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReportCategory getWorldstore() {
    return worldstore;
  }


  public void setWorldstore(ReportCategory worldstore) {
    this.worldstore = worldstore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIConfigReportCategories apIConfigReportCategories = (APIConfigReportCategories) o;
    return Objects.equals(this.avatar, apIConfigReportCategories.avatar) &&
        Objects.equals(this.avatarpage, apIConfigReportCategories.avatarpage) &&
        Objects.equals(this.behavior, apIConfigReportCategories.behavior) &&
        Objects.equals(this.chat, apIConfigReportCategories.chat) &&
        Objects.equals(this.emoji, apIConfigReportCategories.emoji) &&
        Objects.equals(this.environment, apIConfigReportCategories.environment) &&
        Objects.equals(this.groupstore, apIConfigReportCategories.groupstore) &&
        Objects.equals(this.image, apIConfigReportCategories.image) &&
        Objects.equals(this.text, apIConfigReportCategories.text) &&
        Objects.equals(this.sticker, apIConfigReportCategories.sticker) &&
        Objects.equals(this.warnings, apIConfigReportCategories.warnings) &&
        Objects.equals(this.worldimage, apIConfigReportCategories.worldimage) &&
        Objects.equals(this.worldstore, apIConfigReportCategories.worldstore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, avatarpage, behavior, chat, emoji, environment, groupstore, image, text, sticker, warnings, worldimage, worldstore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIConfigReportCategories {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    avatarpage: ").append(toIndentedString(avatarpage)).append("\n");
    sb.append("    behavior: ").append(toIndentedString(behavior)).append("\n");
    sb.append("    chat: ").append(toIndentedString(chat)).append("\n");
    sb.append("    emoji: ").append(toIndentedString(emoji)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    groupstore: ").append(toIndentedString(groupstore)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    sticker: ").append(toIndentedString(sticker)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    worldimage: ").append(toIndentedString(worldimage)).append("\n");
    sb.append("    worldstore: ").append(toIndentedString(worldstore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("avatarpage");
    openapiFields.add("behavior");
    openapiFields.add("chat");
    openapiFields.add("emoji");
    openapiFields.add("environment");
    openapiFields.add("groupstore");
    openapiFields.add("image");
    openapiFields.add("text");
    openapiFields.add("sticker");
    openapiFields.add("warnings");
    openapiFields.add("worldimage");
    openapiFields.add("worldstore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avatar");
    openapiRequiredFields.add("behavior");
    openapiRequiredFields.add("chat");
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("groupstore");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("warnings");
    openapiRequiredFields.add("worldimage");
    openapiRequiredFields.add("worldstore");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIConfigReportCategories
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIConfigReportCategories.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIConfigReportCategories is not found in the empty JSON string", APIConfigReportCategories.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIConfigReportCategories.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIConfigReportCategories` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APIConfigReportCategories.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `avatar`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("avatar"));
      // validate the optional field `avatarpage`
      if (jsonObj.get("avatarpage") != null && !jsonObj.get("avatarpage").isJsonNull()) {
        ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("avatarpage"));
      }
      // validate the required field `behavior`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("behavior"));
      // validate the required field `chat`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("chat"));
      // validate the optional field `emoji`
      if (jsonObj.get("emoji") != null && !jsonObj.get("emoji").isJsonNull()) {
        ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("emoji"));
      }
      // validate the required field `environment`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("environment"));
      // validate the required field `groupstore`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("groupstore"));
      // validate the required field `image`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("image"));
      // validate the required field `text`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("text"));
      // validate the optional field `sticker`
      if (jsonObj.get("sticker") != null && !jsonObj.get("sticker").isJsonNull()) {
        ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("sticker"));
      }
      // validate the required field `warnings`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("warnings"));
      // validate the required field `worldimage`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("worldimage"));
      // validate the required field `worldstore`
      ReportCategory.validateJsonObject(jsonObj.getAsJsonObject("worldstore"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIConfigReportCategories.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIConfigReportCategories' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIConfigReportCategories> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIConfigReportCategories.class));

       return (TypeAdapter<T>) new TypeAdapter<APIConfigReportCategories>() {
           @Override
           public void write(JsonWriter out, APIConfigReportCategories value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIConfigReportCategories read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIConfigReportCategories given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIConfigReportCategories
  * @throws IOException if the JSON string is invalid with respect to APIConfigReportCategories
  */
  public static APIConfigReportCategories fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIConfigReportCategories.class);
  }

 /**
  * Convert an instance of APIConfigReportCategories to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

