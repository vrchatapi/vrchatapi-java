/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.AccountDeletionLog;
import io.github.vrchatapi.model.AgeVerificationStatus;
import io.github.vrchatapi.model.Badge;
import io.github.vrchatapi.model.CurrentUserPlatformHistoryInner;
import io.github.vrchatapi.model.CurrentUserPresence;
import io.github.vrchatapi.model.DeveloperType;
import io.github.vrchatapi.model.PastDisplayName;
import io.github.vrchatapi.model.UserState;
import io.github.vrchatapi.model.UserStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * CurrentUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CurrentUser {
  public static final String SERIALIZED_NAME_ACCEPTED_T_O_S_VERSION = "acceptedTOSVersion";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_T_O_S_VERSION)
  private Integer acceptedTOSVersion;

  public static final String SERIALIZED_NAME_ACCEPTED_PRIVACY_VERSION = "acceptedPrivacyVersion";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_PRIVACY_VERSION)
  private Integer acceptedPrivacyVersion;

  public static final String SERIALIZED_NAME_ACCOUNT_DELETION_DATE = "accountDeletionDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_DELETION_DATE)
  private LocalDate accountDeletionDate;

  public static final String SERIALIZED_NAME_ACCOUNT_DELETION_LOG = "accountDeletionLog";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_DELETION_LOG)
  private List<AccountDeletionLog> accountDeletionLog = null;

  public static final String SERIALIZED_NAME_ACTIVE_FRIENDS = "activeFriends";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FRIENDS)
  private List<String> activeFriends = null;

  public static final String SERIALIZED_NAME_AGE_VERIFICATION_STATUS = "ageVerificationStatus";
  @SerializedName(SERIALIZED_NAME_AGE_VERIFICATION_STATUS)
  private AgeVerificationStatus ageVerificationStatus;

  public static final String SERIALIZED_NAME_AGE_VERIFIED = "ageVerified";
  @SerializedName(SERIALIZED_NAME_AGE_VERIFIED)
  private Boolean ageVerified;

  public static final String SERIALIZED_NAME_ALLOW_AVATAR_COPYING = "allowAvatarCopying";
  @SerializedName(SERIALIZED_NAME_ALLOW_AVATAR_COPYING)
  private Boolean allowAvatarCopying;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "authToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_BADGES = "badges";
  @SerializedName(SERIALIZED_NAME_BADGES)
  private List<Badge> badges = null;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_BIO_LINKS = "bioLinks";
  @SerializedName(SERIALIZED_NAME_BIO_LINKS)
  private List<String> bioLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_FILTERS = "contentFilters";
  @SerializedName(SERIALIZED_NAME_CONTENT_FILTERS)
  private List<String> contentFilters = null;

  public static final String SERIALIZED_NAME_CURRENT_AVATAR = "currentAvatar";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVATAR)
  private String currentAvatar;

  public static final String SERIALIZED_NAME_CURRENT_AVATAR_IMAGE_URL = "currentAvatarImageUrl";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVATAR_IMAGE_URL)
  private String currentAvatarImageUrl;

  public static final String SERIALIZED_NAME_CURRENT_AVATAR_THUMBNAIL_IMAGE_URL = "currentAvatarThumbnailImageUrl";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVATAR_THUMBNAIL_IMAGE_URL)
  private String currentAvatarThumbnailImageUrl;

  public static final String SERIALIZED_NAME_CURRENT_AVATAR_TAGS = "currentAvatarTags";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVATAR_TAGS)
  private List<String> currentAvatarTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_JOINED = "date_joined";
  @SerializedName(SERIALIZED_NAME_DATE_JOINED)
  private LocalDate dateJoined;

  public static final String SERIALIZED_NAME_DEVELOPER_TYPE = "developerType";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_TYPE)
  private DeveloperType developerType = DeveloperType.NONE;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "emailVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_FALLBACK_AVATAR = "fallbackAvatar";
  @SerializedName(SERIALIZED_NAME_FALLBACK_AVATAR)
  private String fallbackAvatar;

  public static final String SERIALIZED_NAME_FRIEND_GROUP_NAMES = "friendGroupNames";
  @SerializedName(SERIALIZED_NAME_FRIEND_GROUP_NAMES)
  private List<String> friendGroupNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRIEND_KEY = "friendKey";
  @SerializedName(SERIALIZED_NAME_FRIEND_KEY)
  private String friendKey;

  public static final String SERIALIZED_NAME_FRIENDS = "friends";
  @SerializedName(SERIALIZED_NAME_FRIENDS)
  private List<String> friends = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_BIRTHDAY = "hasBirthday";
  @SerializedName(SERIALIZED_NAME_HAS_BIRTHDAY)
  private Boolean hasBirthday;

  public static final String SERIALIZED_NAME_HIDE_CONTENT_FILTER_SETTINGS = "hideContentFilterSettings";
  @SerializedName(SERIALIZED_NAME_HIDE_CONTENT_FILTER_SETTINGS)
  private Boolean hideContentFilterSettings;

  public static final String SERIALIZED_NAME_USER_LANGUAGE = "userLanguage";
  @SerializedName(SERIALIZED_NAME_USER_LANGUAGE)
  private String userLanguage;

  public static final String SERIALIZED_NAME_USER_LANGUAGE_CODE = "userLanguageCode";
  @SerializedName(SERIALIZED_NAME_USER_LANGUAGE_CODE)
  private String userLanguageCode;

  public static final String SERIALIZED_NAME_HAS_EMAIL = "hasEmail";
  @SerializedName(SERIALIZED_NAME_HAS_EMAIL)
  private Boolean hasEmail;

  public static final String SERIALIZED_NAME_HAS_LOGGED_IN_FROM_CLIENT = "hasLoggedInFromClient";
  @SerializedName(SERIALIZED_NAME_HAS_LOGGED_IN_FROM_CLIENT)
  private Boolean hasLoggedInFromClient;

  public static final String SERIALIZED_NAME_HAS_PENDING_EMAIL = "hasPendingEmail";
  @SerializedName(SERIALIZED_NAME_HAS_PENDING_EMAIL)
  private Boolean hasPendingEmail;

  public static final String SERIALIZED_NAME_HOME_LOCATION = "homeLocation";
  @SerializedName(SERIALIZED_NAME_HOME_LOCATION)
  private String homeLocation;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ADULT = "isAdult";
  @SerializedName(SERIALIZED_NAME_IS_ADULT)
  private Boolean isAdult;

  public static final String SERIALIZED_NAME_IS_BOOPING_ENABLED = "isBoopingEnabled";
  @SerializedName(SERIALIZED_NAME_IS_BOOPING_ENABLED)
  private Boolean isBoopingEnabled = true;

  public static final String SERIALIZED_NAME_IS_FRIEND = "isFriend";
  @SerializedName(SERIALIZED_NAME_IS_FRIEND)
  private Boolean isFriend = false;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY = "last_activity";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY)
  private OffsetDateTime lastActivity;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "last_login";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_LAST_MOBILE = "last_mobile";
  @SerializedName(SERIALIZED_NAME_LAST_MOBILE)
  private OffsetDateTime lastMobile;

  public static final String SERIALIZED_NAME_LAST_PLATFORM = "last_platform";
  @SerializedName(SERIALIZED_NAME_LAST_PLATFORM)
  private String lastPlatform;

  public static final String SERIALIZED_NAME_OBFUSCATED_EMAIL = "obfuscatedEmail";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_EMAIL)
  private String obfuscatedEmail;

  public static final String SERIALIZED_NAME_OBFUSCATED_PENDING_EMAIL = "obfuscatedPendingEmail";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_PENDING_EMAIL)
  private String obfuscatedPendingEmail;

  public static final String SERIALIZED_NAME_OCULUS_ID = "oculusId";
  @SerializedName(SERIALIZED_NAME_OCULUS_ID)
  private String oculusId;

  public static final String SERIALIZED_NAME_GOOGLE_ID = "googleId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_ID)
  private String googleId;

  public static final String SERIALIZED_NAME_GOOGLE_DETAILS = "googleDetails";
  @SerializedName(SERIALIZED_NAME_GOOGLE_DETAILS)
  private Object googleDetails;

  public static final String SERIALIZED_NAME_PICO_ID = "picoId";
  @SerializedName(SERIALIZED_NAME_PICO_ID)
  private String picoId;

  public static final String SERIALIZED_NAME_VIVE_ID = "viveId";
  @SerializedName(SERIALIZED_NAME_VIVE_ID)
  private String viveId;

  public static final String SERIALIZED_NAME_OFFLINE_FRIENDS = "offlineFriends";
  @SerializedName(SERIALIZED_NAME_OFFLINE_FRIENDS)
  private List<String> offlineFriends = null;

  public static final String SERIALIZED_NAME_ONLINE_FRIENDS = "onlineFriends";
  @SerializedName(SERIALIZED_NAME_ONLINE_FRIENDS)
  private List<String> onlineFriends = null;

  public static final String SERIALIZED_NAME_PAST_DISPLAY_NAMES = "pastDisplayNames";
  @SerializedName(SERIALIZED_NAME_PAST_DISPLAY_NAMES)
  private List<PastDisplayName> pastDisplayNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRESENCE = "presence";
  @SerializedName(SERIALIZED_NAME_PRESENCE)
  private CurrentUserPresence presence;

  public static final String SERIALIZED_NAME_PLATFORM_HISTORY = "platform_history";
  @SerializedName(SERIALIZED_NAME_PLATFORM_HISTORY)
  private List<CurrentUserPlatformHistoryInner> platformHistory = null;

  public static final String SERIALIZED_NAME_PROFILE_PIC_OVERRIDE = "profilePicOverride";
  @SerializedName(SERIALIZED_NAME_PROFILE_PIC_OVERRIDE)
  private String profilePicOverride;

  public static final String SERIALIZED_NAME_PROFILE_PIC_OVERRIDE_THUMBNAIL = "profilePicOverrideThumbnail";
  @SerializedName(SERIALIZED_NAME_PROFILE_PIC_OVERRIDE_THUMBNAIL)
  private String profilePicOverrideThumbnail;

  public static final String SERIALIZED_NAME_PRONOUNS = "pronouns";
  @SerializedName(SERIALIZED_NAME_PRONOUNS)
  private String pronouns;

  public static final String SERIALIZED_NAME_PRONOUNS_HISTORY = "pronounsHistory";
  @SerializedName(SERIALIZED_NAME_PRONOUNS_HISTORY)
  private List<String> pronounsHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUEUED_INSTANCE = "queuedInstance";
  @SerializedName(SERIALIZED_NAME_QUEUED_INSTANCE)
  private String queuedInstance;

  public static final String SERIALIZED_NAME_RECEIVE_MOBILE_INVITATIONS = "receiveMobileInvitations";
  @SerializedName(SERIALIZED_NAME_RECEIVE_MOBILE_INVITATIONS)
  private Boolean receiveMobileInvitations;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private UserState state = UserState.OFFLINE;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private UserStatus status = UserStatus.OFFLINE;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "statusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_STATUS_FIRST_TIME = "statusFirstTime";
  @SerializedName(SERIALIZED_NAME_STATUS_FIRST_TIME)
  private Boolean statusFirstTime;

  public static final String SERIALIZED_NAME_STATUS_HISTORY = "statusHistory";
  @SerializedName(SERIALIZED_NAME_STATUS_HISTORY)
  private List<String> statusHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEAM_DETAILS = "steamDetails";
  @SerializedName(SERIALIZED_NAME_STEAM_DETAILS)
  private Object steamDetails;

  public static final String SERIALIZED_NAME_STEAM_ID = "steamId";
  @SerializedName(SERIALIZED_NAME_STEAM_ID)
  private String steamId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TWO_FACTOR_AUTH_ENABLED = "twoFactorAuthEnabled";
  @SerializedName(SERIALIZED_NAME_TWO_FACTOR_AUTH_ENABLED)
  private Boolean twoFactorAuthEnabled;

  public static final String SERIALIZED_NAME_TWO_FACTOR_AUTH_ENABLED_DATE = "twoFactorAuthEnabledDate";
  @SerializedName(SERIALIZED_NAME_TWO_FACTOR_AUTH_ENABLED_DATE)
  private OffsetDateTime twoFactorAuthEnabledDate;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE = "unsubscribe";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE)
  private Boolean unsubscribe;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_ICON = "userIcon";
  @SerializedName(SERIALIZED_NAME_USER_ICON)
  private String userIcon;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public CurrentUser() {
  }

  public CurrentUser acceptedTOSVersion(Integer acceptedTOSVersion) {
    
    this.acceptedTOSVersion = acceptedTOSVersion;
    return this;
  }

   /**
   * Get acceptedTOSVersion
   * minimum: 0
   * @return acceptedTOSVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "7", required = true, value = "")

  public Integer getAcceptedTOSVersion() {
    return acceptedTOSVersion;
  }


  public void setAcceptedTOSVersion(Integer acceptedTOSVersion) {
    this.acceptedTOSVersion = acceptedTOSVersion;
  }


  public CurrentUser acceptedPrivacyVersion(Integer acceptedPrivacyVersion) {
    
    this.acceptedPrivacyVersion = acceptedPrivacyVersion;
    return this;
  }

   /**
   * Get acceptedPrivacyVersion
   * minimum: 0
   * @return acceptedPrivacyVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getAcceptedPrivacyVersion() {
    return acceptedPrivacyVersion;
  }


  public void setAcceptedPrivacyVersion(Integer acceptedPrivacyVersion) {
    this.acceptedPrivacyVersion = acceptedPrivacyVersion;
  }


  public CurrentUser accountDeletionDate(LocalDate accountDeletionDate) {
    
    this.accountDeletionDate = accountDeletionDate;
    return this;
  }

   /**
   * Get accountDeletionDate
   * @return accountDeletionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getAccountDeletionDate() {
    return accountDeletionDate;
  }


  public void setAccountDeletionDate(LocalDate accountDeletionDate) {
    this.accountDeletionDate = accountDeletionDate;
  }


  public CurrentUser accountDeletionLog(List<AccountDeletionLog> accountDeletionLog) {
    
    this.accountDeletionLog = accountDeletionLog;
    return this;
  }

  public CurrentUser addAccountDeletionLogItem(AccountDeletionLog accountDeletionLogItem) {
    if (this.accountDeletionLog == null) {
      this.accountDeletionLog = new ArrayList<>();
    }
    this.accountDeletionLog.add(accountDeletionLogItem);
    return this;
  }

   /**
   *  
   * @return accountDeletionLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ")

  public List<AccountDeletionLog> getAccountDeletionLog() {
    return accountDeletionLog;
  }


  public void setAccountDeletionLog(List<AccountDeletionLog> accountDeletionLog) {
    this.accountDeletionLog = accountDeletionLog;
  }


  public CurrentUser activeFriends(List<String> activeFriends) {
    
    this.activeFriends = activeFriends;
    return this;
  }

  public CurrentUser addActiveFriendsItem(String activeFriendsItem) {
    if (this.activeFriends == null) {
      this.activeFriends = new ArrayList<>();
    }
    this.activeFriends.add(activeFriendsItem);
    return this;
  }

   /**
   *  
   * @return activeFriends
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ")

  public List<String> getActiveFriends() {
    return activeFriends;
  }


  public void setActiveFriends(List<String> activeFriends) {
    this.activeFriends = activeFriends;
  }


  public CurrentUser ageVerificationStatus(AgeVerificationStatus ageVerificationStatus) {
    
    this.ageVerificationStatus = ageVerificationStatus;
    return this;
  }

   /**
   * Get ageVerificationStatus
   * @return ageVerificationStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AgeVerificationStatus getAgeVerificationStatus() {
    return ageVerificationStatus;
  }


  public void setAgeVerificationStatus(AgeVerificationStatus ageVerificationStatus) {
    this.ageVerificationStatus = ageVerificationStatus;
  }


  public CurrentUser ageVerified(Boolean ageVerified) {
    
    this.ageVerified = ageVerified;
    return this;
  }

   /**
   * &#x60;true&#x60; if, user is age verified (not 18+).
   * @return ageVerified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "`true` if, user is age verified (not 18+).")

  public Boolean getAgeVerified() {
    return ageVerified;
  }


  public void setAgeVerified(Boolean ageVerified) {
    this.ageVerified = ageVerified;
  }


  public CurrentUser allowAvatarCopying(Boolean allowAvatarCopying) {
    
    this.allowAvatarCopying = allowAvatarCopying;
    return this;
  }

   /**
   * Get allowAvatarCopying
   * @return allowAvatarCopying
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getAllowAvatarCopying() {
    return allowAvatarCopying;
  }


  public void setAllowAvatarCopying(Boolean allowAvatarCopying) {
    this.allowAvatarCopying = allowAvatarCopying;
  }


  public CurrentUser authToken(String authToken) {
    
    this.authToken = authToken;
    return this;
  }

   /**
   * The auth token for NEWLY REGISTERED ACCOUNTS ONLY (/auth/register)
   * @return authToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The auth token for NEWLY REGISTERED ACCOUNTS ONLY (/auth/register)")

  public String getAuthToken() {
    return authToken;
  }


  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public CurrentUser badges(List<Badge> badges) {
    
    this.badges = badges;
    return this;
  }

  public CurrentUser addBadgesItem(Badge badgesItem) {
    if (this.badges == null) {
      this.badges = new ArrayList<>();
    }
    this.badges.add(badgesItem);
    return this;
  }

   /**
   *  
   * @return badges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ")

  public List<Badge> getBadges() {
    return badges;
  }


  public void setBadges(List<Badge> badges) {
    this.badges = badges;
  }


  public CurrentUser bio(String bio) {
    
    this.bio = bio;
    return this;
  }

   /**
   * Get bio
   * @return bio
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getBio() {
    return bio;
  }


  public void setBio(String bio) {
    this.bio = bio;
  }


  public CurrentUser bioLinks(List<String> bioLinks) {
    
    this.bioLinks = bioLinks;
    return this;
  }

  public CurrentUser addBioLinksItem(String bioLinksItem) {
    this.bioLinks.add(bioLinksItem);
    return this;
  }

   /**
   *  
   * @return bioLinks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = " ")

  public List<String> getBioLinks() {
    return bioLinks;
  }


  public void setBioLinks(List<String> bioLinks) {
    this.bioLinks = bioLinks;
  }


  public CurrentUser contentFilters(List<String> contentFilters) {
    
    this.contentFilters = contentFilters;
    return this;
  }

  public CurrentUser addContentFiltersItem(String contentFiltersItem) {
    if (this.contentFilters == null) {
      this.contentFilters = new ArrayList<>();
    }
    this.contentFilters.add(contentFiltersItem);
    return this;
  }

   /**
   * These tags begin with &#x60;content_&#x60; and control content gating
   * @return contentFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "These tags begin with `content_` and control content gating")

  public List<String> getContentFilters() {
    return contentFilters;
  }


  public void setContentFilters(List<String> contentFilters) {
    this.contentFilters = contentFilters;
  }


  public CurrentUser currentAvatar(String currentAvatar) {
    
    this.currentAvatar = currentAvatar;
    return this;
  }

   /**
   * Get currentAvatar
   * @return currentAvatar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "avtr_912d66a4-4714-43b8-8407-7de2cafbf55b", required = true, value = "")

  public String getCurrentAvatar() {
    return currentAvatar;
  }


  public void setCurrentAvatar(String currentAvatar) {
    this.currentAvatar = currentAvatar;
  }


  public CurrentUser currentAvatarImageUrl(String currentAvatarImageUrl) {
    
    this.currentAvatarImageUrl = currentAvatarImageUrl;
    return this;
  }

   /**
   * When profilePicOverride is not empty, use it instead.
   * @return currentAvatarImageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://api.vrchat.cloud/api/1/file/file_ae46d521-7281-4b38-b365-804b32a1d6a7/1/file", required = true, value = "When profilePicOverride is not empty, use it instead.")

  public String getCurrentAvatarImageUrl() {
    return currentAvatarImageUrl;
  }


  public void setCurrentAvatarImageUrl(String currentAvatarImageUrl) {
    this.currentAvatarImageUrl = currentAvatarImageUrl;
  }


  public CurrentUser currentAvatarThumbnailImageUrl(String currentAvatarThumbnailImageUrl) {
    
    this.currentAvatarThumbnailImageUrl = currentAvatarThumbnailImageUrl;
    return this;
  }

   /**
   * When profilePicOverride is not empty, use it instead.
   * @return currentAvatarThumbnailImageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://api.vrchat.cloud/api/1/image/file_aae83ed9-d42d-4d72-9f4b-9f1e41ed17e1/1/256", required = true, value = "When profilePicOverride is not empty, use it instead.")

  public String getCurrentAvatarThumbnailImageUrl() {
    return currentAvatarThumbnailImageUrl;
  }


  public void setCurrentAvatarThumbnailImageUrl(String currentAvatarThumbnailImageUrl) {
    this.currentAvatarThumbnailImageUrl = currentAvatarThumbnailImageUrl;
  }


  public CurrentUser currentAvatarTags(List<String> currentAvatarTags) {
    
    this.currentAvatarTags = currentAvatarTags;
    return this;
  }

  public CurrentUser addCurrentAvatarTagsItem(String currentAvatarTagsItem) {
    this.currentAvatarTags.add(currentAvatarTagsItem);
    return this;
  }

   /**
   * Get currentAvatarTags
   * @return currentAvatarTags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getCurrentAvatarTags() {
    return currentAvatarTags;
  }


  public void setCurrentAvatarTags(List<String> currentAvatarTags) {
    this.currentAvatarTags = currentAvatarTags;
  }


  public CurrentUser dateJoined(LocalDate dateJoined) {
    
    this.dateJoined = dateJoined;
    return this;
  }

   /**
   * Get dateJoined
   * @return dateJoined
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LocalDate getDateJoined() {
    return dateJoined;
  }


  public void setDateJoined(LocalDate dateJoined) {
    this.dateJoined = dateJoined;
  }


  public CurrentUser developerType(DeveloperType developerType) {
    
    this.developerType = developerType;
    return this;
  }

   /**
   * Get developerType
   * @return developerType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DeveloperType getDeveloperType() {
    return developerType;
  }


  public void setDeveloperType(DeveloperType developerType) {
    this.developerType = developerType;
  }


  public CurrentUser displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CurrentUser emailVerified(Boolean emailVerified) {
    
    this.emailVerified = emailVerified;
    return this;
  }

   /**
   * Get emailVerified
   * @return emailVerified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getEmailVerified() {
    return emailVerified;
  }


  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public CurrentUser fallbackAvatar(String fallbackAvatar) {
    
    this.fallbackAvatar = fallbackAvatar;
    return this;
  }

   /**
   * Get fallbackAvatar
   * @return fallbackAvatar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "avtr_912d66a4-4714-43b8-8407-7de2cafbf55b", value = "")

  public String getFallbackAvatar() {
    return fallbackAvatar;
  }


  public void setFallbackAvatar(String fallbackAvatar) {
    this.fallbackAvatar = fallbackAvatar;
  }


  public CurrentUser friendGroupNames(List<String> friendGroupNames) {
    
    this.friendGroupNames = friendGroupNames;
    return this;
  }

  public CurrentUser addFriendGroupNamesItem(String friendGroupNamesItem) {
    this.friendGroupNames.add(friendGroupNamesItem);
    return this;
  }

   /**
   * Always empty array.
   * @return friendGroupNames
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Always empty array.")

  public List<String> getFriendGroupNames() {
    return friendGroupNames;
  }


  public void setFriendGroupNames(List<String> friendGroupNames) {
    this.friendGroupNames = friendGroupNames;
  }


  public CurrentUser friendKey(String friendKey) {
    
    this.friendKey = friendKey;
    return this;
  }

   /**
   * Get friendKey
   * @return friendKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getFriendKey() {
    return friendKey;
  }


  public void setFriendKey(String friendKey) {
    this.friendKey = friendKey;
  }


  public CurrentUser friends(List<String> friends) {
    
    this.friends = friends;
    return this;
  }

  public CurrentUser addFriendsItem(String friendsItem) {
    this.friends.add(friendsItem);
    return this;
  }

   /**
   * Get friends
   * @return friends
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getFriends() {
    return friends;
  }


  public void setFriends(List<String> friends) {
    this.friends = friends;
  }


  public CurrentUser hasBirthday(Boolean hasBirthday) {
    
    this.hasBirthday = hasBirthday;
    return this;
  }

   /**
   * Get hasBirthday
   * @return hasBirthday
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getHasBirthday() {
    return hasBirthday;
  }


  public void setHasBirthday(Boolean hasBirthday) {
    this.hasBirthday = hasBirthday;
  }


  public CurrentUser hideContentFilterSettings(Boolean hideContentFilterSettings) {
    
    this.hideContentFilterSettings = hideContentFilterSettings;
    return this;
  }

   /**
   * Get hideContentFilterSettings
   * @return hideContentFilterSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHideContentFilterSettings() {
    return hideContentFilterSettings;
  }


  public void setHideContentFilterSettings(Boolean hideContentFilterSettings) {
    this.hideContentFilterSettings = hideContentFilterSettings;
  }


  public CurrentUser userLanguage(String userLanguage) {
    
    this.userLanguage = userLanguage;
    return this;
  }

   /**
   * Get userLanguage
   * @return userLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserLanguage() {
    return userLanguage;
  }


  public void setUserLanguage(String userLanguage) {
    this.userLanguage = userLanguage;
  }


  public CurrentUser userLanguageCode(String userLanguageCode) {
    
    this.userLanguageCode = userLanguageCode;
    return this;
  }

   /**
   * Get userLanguageCode
   * @return userLanguageCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserLanguageCode() {
    return userLanguageCode;
  }


  public void setUserLanguageCode(String userLanguageCode) {
    this.userLanguageCode = userLanguageCode;
  }


  public CurrentUser hasEmail(Boolean hasEmail) {
    
    this.hasEmail = hasEmail;
    return this;
  }

   /**
   * Get hasEmail
   * @return hasEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getHasEmail() {
    return hasEmail;
  }


  public void setHasEmail(Boolean hasEmail) {
    this.hasEmail = hasEmail;
  }


  public CurrentUser hasLoggedInFromClient(Boolean hasLoggedInFromClient) {
    
    this.hasLoggedInFromClient = hasLoggedInFromClient;
    return this;
  }

   /**
   * Get hasLoggedInFromClient
   * @return hasLoggedInFromClient
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getHasLoggedInFromClient() {
    return hasLoggedInFromClient;
  }


  public void setHasLoggedInFromClient(Boolean hasLoggedInFromClient) {
    this.hasLoggedInFromClient = hasLoggedInFromClient;
  }


  public CurrentUser hasPendingEmail(Boolean hasPendingEmail) {
    
    this.hasPendingEmail = hasPendingEmail;
    return this;
  }

   /**
   * Get hasPendingEmail
   * @return hasPendingEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getHasPendingEmail() {
    return hasPendingEmail;
  }


  public void setHasPendingEmail(Boolean hasPendingEmail) {
    this.hasPendingEmail = hasPendingEmail;
  }


  public CurrentUser homeLocation(String homeLocation) {
    
    this.homeLocation = homeLocation;
    return this;
  }

   /**
   * WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
   * @return homeLocation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "wrld_4432ea9b-729c-46e3-8eaf-846aa0a37fdd", required = true, value = "WorldID be \"offline\" on User profiles if you are not friends with that user.")

  public String getHomeLocation() {
    return homeLocation;
  }


  public void setHomeLocation(String homeLocation) {
    this.homeLocation = homeLocation;
  }


  public CurrentUser id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", required = true, value = "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CurrentUser isAdult(Boolean isAdult) {
    
    this.isAdult = isAdult;
    return this;
  }

   /**
   * Get isAdult
   * @return isAdult
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsAdult() {
    return isAdult;
  }


  public void setIsAdult(Boolean isAdult) {
    this.isAdult = isAdult;
  }


  public CurrentUser isBoopingEnabled(Boolean isBoopingEnabled) {
    
    this.isBoopingEnabled = isBoopingEnabled;
    return this;
  }

   /**
   * Get isBoopingEnabled
   * @return isBoopingEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsBoopingEnabled() {
    return isBoopingEnabled;
  }


  public void setIsBoopingEnabled(Boolean isBoopingEnabled) {
    this.isBoopingEnabled = isBoopingEnabled;
  }


  public CurrentUser isFriend(Boolean isFriend) {
    
    this.isFriend = isFriend;
    return this;
  }

   /**
   * Get isFriend
   * @return isFriend
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsFriend() {
    return isFriend;
  }


  public void setIsFriend(Boolean isFriend) {
    this.isFriend = isFriend;
  }


  public CurrentUser lastActivity(OffsetDateTime lastActivity) {
    
    this.lastActivity = lastActivity;
    return this;
  }

   /**
   * Get lastActivity
   * @return lastActivity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastActivity() {
    return lastActivity;
  }


  public void setLastActivity(OffsetDateTime lastActivity) {
    this.lastActivity = lastActivity;
  }


  public CurrentUser lastLogin(OffsetDateTime lastLogin) {
    
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Get lastLogin
   * @return lastLogin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }


  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }


  public CurrentUser lastMobile(OffsetDateTime lastMobile) {
    
    this.lastMobile = lastMobile;
    return this;
  }

   /**
   * Get lastMobile
   * @return lastMobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getLastMobile() {
    return lastMobile;
  }


  public void setLastMobile(OffsetDateTime lastMobile) {
    this.lastMobile = lastMobile;
  }


  public CurrentUser lastPlatform(String lastPlatform) {
    
    this.lastPlatform = lastPlatform;
    return this;
  }

   /**
   * This can be &#x60;standalonewindows&#x60; or &#x60;android&#x60;, but can also pretty much be any random Unity verison such as &#x60;2019.2.4-801-Release&#x60; or &#x60;2019.2.2-772-Release&#x60; or even &#x60;unknownplatform&#x60;.
   * @return lastPlatform
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "standalonewindows", required = true, value = "This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.")

  public String getLastPlatform() {
    return lastPlatform;
  }


  public void setLastPlatform(String lastPlatform) {
    this.lastPlatform = lastPlatform;
  }


  public CurrentUser obfuscatedEmail(String obfuscatedEmail) {
    
    this.obfuscatedEmail = obfuscatedEmail;
    return this;
  }

   /**
   * Get obfuscatedEmail
   * @return obfuscatedEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getObfuscatedEmail() {
    return obfuscatedEmail;
  }


  public void setObfuscatedEmail(String obfuscatedEmail) {
    this.obfuscatedEmail = obfuscatedEmail;
  }


  public CurrentUser obfuscatedPendingEmail(String obfuscatedPendingEmail) {
    
    this.obfuscatedPendingEmail = obfuscatedPendingEmail;
    return this;
  }

   /**
   * Get obfuscatedPendingEmail
   * @return obfuscatedPendingEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getObfuscatedPendingEmail() {
    return obfuscatedPendingEmail;
  }


  public void setObfuscatedPendingEmail(String obfuscatedPendingEmail) {
    this.obfuscatedPendingEmail = obfuscatedPendingEmail;
  }


  public CurrentUser oculusId(String oculusId) {
    
    this.oculusId = oculusId;
    return this;
  }

   /**
   * Get oculusId
   * @return oculusId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getOculusId() {
    return oculusId;
  }


  public void setOculusId(String oculusId) {
    this.oculusId = oculusId;
  }


  public CurrentUser googleId(String googleId) {
    
    this.googleId = googleId;
    return this;
  }

   /**
   * Get googleId
   * @return googleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGoogleId() {
    return googleId;
  }


  public void setGoogleId(String googleId) {
    this.googleId = googleId;
  }


  public CurrentUser googleDetails(Object googleDetails) {
    
    this.googleDetails = googleDetails;
    return this;
  }

   /**
   * Get googleDetails
   * @return googleDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getGoogleDetails() {
    return googleDetails;
  }


  public void setGoogleDetails(Object googleDetails) {
    this.googleDetails = googleDetails;
  }


  public CurrentUser picoId(String picoId) {
    
    this.picoId = picoId;
    return this;
  }

   /**
   * Get picoId
   * @return picoId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPicoId() {
    return picoId;
  }


  public void setPicoId(String picoId) {
    this.picoId = picoId;
  }


  public CurrentUser viveId(String viveId) {
    
    this.viveId = viveId;
    return this;
  }

   /**
   * Get viveId
   * @return viveId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getViveId() {
    return viveId;
  }


  public void setViveId(String viveId) {
    this.viveId = viveId;
  }


  public CurrentUser offlineFriends(List<String> offlineFriends) {
    
    this.offlineFriends = offlineFriends;
    return this;
  }

  public CurrentUser addOfflineFriendsItem(String offlineFriendsItem) {
    if (this.offlineFriends == null) {
      this.offlineFriends = new ArrayList<>();
    }
    this.offlineFriends.add(offlineFriendsItem);
    return this;
  }

   /**
   * Get offlineFriends
   * @return offlineFriends
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOfflineFriends() {
    return offlineFriends;
  }


  public void setOfflineFriends(List<String> offlineFriends) {
    this.offlineFriends = offlineFriends;
  }


  public CurrentUser onlineFriends(List<String> onlineFriends) {
    
    this.onlineFriends = onlineFriends;
    return this;
  }

  public CurrentUser addOnlineFriendsItem(String onlineFriendsItem) {
    if (this.onlineFriends == null) {
      this.onlineFriends = new ArrayList<>();
    }
    this.onlineFriends.add(onlineFriendsItem);
    return this;
  }

   /**
   * Get onlineFriends
   * @return onlineFriends
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOnlineFriends() {
    return onlineFriends;
  }


  public void setOnlineFriends(List<String> onlineFriends) {
    this.onlineFriends = onlineFriends;
  }


  public CurrentUser pastDisplayNames(List<PastDisplayName> pastDisplayNames) {
    
    this.pastDisplayNames = pastDisplayNames;
    return this;
  }

  public CurrentUser addPastDisplayNamesItem(PastDisplayName pastDisplayNamesItem) {
    this.pastDisplayNames.add(pastDisplayNamesItem);
    return this;
  }

   /**
   *  
   * @return pastDisplayNames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = " ")

  public List<PastDisplayName> getPastDisplayNames() {
    return pastDisplayNames;
  }


  public void setPastDisplayNames(List<PastDisplayName> pastDisplayNames) {
    this.pastDisplayNames = pastDisplayNames;
  }


  public CurrentUser presence(CurrentUserPresence presence) {
    
    this.presence = presence;
    return this;
  }

   /**
   * Get presence
   * @return presence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CurrentUserPresence getPresence() {
    return presence;
  }


  public void setPresence(CurrentUserPresence presence) {
    this.presence = presence;
  }


  public CurrentUser platformHistory(List<CurrentUserPlatformHistoryInner> platformHistory) {
    
    this.platformHistory = platformHistory;
    return this;
  }

  public CurrentUser addPlatformHistoryItem(CurrentUserPlatformHistoryInner platformHistoryItem) {
    if (this.platformHistory == null) {
      this.platformHistory = new ArrayList<>();
    }
    this.platformHistory.add(platformHistoryItem);
    return this;
  }

   /**
   * Get platformHistory
   * @return platformHistory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CurrentUserPlatformHistoryInner> getPlatformHistory() {
    return platformHistory;
  }


  public void setPlatformHistory(List<CurrentUserPlatformHistoryInner> platformHistory) {
    this.platformHistory = platformHistory;
  }


  public CurrentUser profilePicOverride(String profilePicOverride) {
    
    this.profilePicOverride = profilePicOverride;
    return this;
  }

   /**
   * Get profilePicOverride
   * @return profilePicOverride
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getProfilePicOverride() {
    return profilePicOverride;
  }


  public void setProfilePicOverride(String profilePicOverride) {
    this.profilePicOverride = profilePicOverride;
  }


  public CurrentUser profilePicOverrideThumbnail(String profilePicOverrideThumbnail) {
    
    this.profilePicOverrideThumbnail = profilePicOverrideThumbnail;
    return this;
  }

   /**
   * Get profilePicOverrideThumbnail
   * @return profilePicOverrideThumbnail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getProfilePicOverrideThumbnail() {
    return profilePicOverrideThumbnail;
  }


  public void setProfilePicOverrideThumbnail(String profilePicOverrideThumbnail) {
    this.profilePicOverrideThumbnail = profilePicOverrideThumbnail;
  }


  public CurrentUser pronouns(String pronouns) {
    
    this.pronouns = pronouns;
    return this;
  }

   /**
   * Get pronouns
   * @return pronouns
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPronouns() {
    return pronouns;
  }


  public void setPronouns(String pronouns) {
    this.pronouns = pronouns;
  }


  public CurrentUser pronounsHistory(List<String> pronounsHistory) {
    
    this.pronounsHistory = pronounsHistory;
    return this;
  }

  public CurrentUser addPronounsHistoryItem(String pronounsHistoryItem) {
    this.pronounsHistory.add(pronounsHistoryItem);
    return this;
  }

   /**
   * Get pronounsHistory
   * @return pronounsHistory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getPronounsHistory() {
    return pronounsHistory;
  }


  public void setPronounsHistory(List<String> pronounsHistory) {
    this.pronounsHistory = pronounsHistory;
  }


  public CurrentUser queuedInstance(String queuedInstance) {
    
    this.queuedInstance = queuedInstance;
    return this;
  }

   /**
   * Get queuedInstance
   * @return queuedInstance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQueuedInstance() {
    return queuedInstance;
  }


  public void setQueuedInstance(String queuedInstance) {
    this.queuedInstance = queuedInstance;
  }


  public CurrentUser receiveMobileInvitations(Boolean receiveMobileInvitations) {
    
    this.receiveMobileInvitations = receiveMobileInvitations;
    return this;
  }

   /**
   * Get receiveMobileInvitations
   * @return receiveMobileInvitations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getReceiveMobileInvitations() {
    return receiveMobileInvitations;
  }


  public void setReceiveMobileInvitations(Boolean receiveMobileInvitations) {
    this.receiveMobileInvitations = receiveMobileInvitations;
  }


  public CurrentUser state(UserState state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserState getState() {
    return state;
  }


  public void setState(UserState state) {
    this.state = state;
  }


  public CurrentUser status(UserStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UserStatus getStatus() {
    return status;
  }


  public void setStatus(UserStatus status) {
    this.status = status;
  }


  public CurrentUser statusDescription(String statusDescription) {
    
    this.statusDescription = statusDescription;
    return this;
  }

   /**
   * Get statusDescription
   * @return statusDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStatusDescription() {
    return statusDescription;
  }


  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public CurrentUser statusFirstTime(Boolean statusFirstTime) {
    
    this.statusFirstTime = statusFirstTime;
    return this;
  }

   /**
   * Get statusFirstTime
   * @return statusFirstTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getStatusFirstTime() {
    return statusFirstTime;
  }


  public void setStatusFirstTime(Boolean statusFirstTime) {
    this.statusFirstTime = statusFirstTime;
  }


  public CurrentUser statusHistory(List<String> statusHistory) {
    
    this.statusHistory = statusHistory;
    return this;
  }

  public CurrentUser addStatusHistoryItem(String statusHistoryItem) {
    this.statusHistory.add(statusHistoryItem);
    return this;
  }

   /**
   * Get statusHistory
   * @return statusHistory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getStatusHistory() {
    return statusHistory;
  }


  public void setStatusHistory(List<String> statusHistory) {
    this.statusHistory = statusHistory;
  }


  public CurrentUser steamDetails(Object steamDetails) {
    
    this.steamDetails = steamDetails;
    return this;
  }

   /**
   * Get steamDetails
   * @return steamDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Object getSteamDetails() {
    return steamDetails;
  }


  public void setSteamDetails(Object steamDetails) {
    this.steamDetails = steamDetails;
  }


  public CurrentUser steamId(String steamId) {
    
    this.steamId = steamId;
    return this;
  }

   /**
   * Get steamId
   * @return steamId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSteamId() {
    return steamId;
  }


  public void setSteamId(String steamId) {
    this.steamId = steamId;
  }


  public CurrentUser tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public CurrentUser addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public CurrentUser twoFactorAuthEnabled(Boolean twoFactorAuthEnabled) {
    
    this.twoFactorAuthEnabled = twoFactorAuthEnabled;
    return this;
  }

   /**
   * Get twoFactorAuthEnabled
   * @return twoFactorAuthEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getTwoFactorAuthEnabled() {
    return twoFactorAuthEnabled;
  }


  public void setTwoFactorAuthEnabled(Boolean twoFactorAuthEnabled) {
    this.twoFactorAuthEnabled = twoFactorAuthEnabled;
  }


  public CurrentUser twoFactorAuthEnabledDate(OffsetDateTime twoFactorAuthEnabledDate) {
    
    this.twoFactorAuthEnabledDate = twoFactorAuthEnabledDate;
    return this;
  }

   /**
   * Get twoFactorAuthEnabledDate
   * @return twoFactorAuthEnabledDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTwoFactorAuthEnabledDate() {
    return twoFactorAuthEnabledDate;
  }


  public void setTwoFactorAuthEnabledDate(OffsetDateTime twoFactorAuthEnabledDate) {
    this.twoFactorAuthEnabledDate = twoFactorAuthEnabledDate;
  }


  public CurrentUser unsubscribe(Boolean unsubscribe) {
    
    this.unsubscribe = unsubscribe;
    return this;
  }

   /**
   * Get unsubscribe
   * @return unsubscribe
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getUnsubscribe() {
    return unsubscribe;
  }


  public void setUnsubscribe(Boolean unsubscribe) {
    this.unsubscribe = unsubscribe;
  }


  public CurrentUser updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CurrentUser userIcon(String userIcon) {
    
    this.userIcon = userIcon;
    return this;
  }

   /**
   * Get userIcon
   * @return userIcon
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUserIcon() {
    return userIcon;
  }


  public void setUserIcon(String userIcon) {
    this.userIcon = userIcon;
  }


  public CurrentUser username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).
   * @return username
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "-| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentUser currentUser = (CurrentUser) o;
    return Objects.equals(this.acceptedTOSVersion, currentUser.acceptedTOSVersion) &&
        Objects.equals(this.acceptedPrivacyVersion, currentUser.acceptedPrivacyVersion) &&
        Objects.equals(this.accountDeletionDate, currentUser.accountDeletionDate) &&
        Objects.equals(this.accountDeletionLog, currentUser.accountDeletionLog) &&
        Objects.equals(this.activeFriends, currentUser.activeFriends) &&
        Objects.equals(this.ageVerificationStatus, currentUser.ageVerificationStatus) &&
        Objects.equals(this.ageVerified, currentUser.ageVerified) &&
        Objects.equals(this.allowAvatarCopying, currentUser.allowAvatarCopying) &&
        Objects.equals(this.authToken, currentUser.authToken) &&
        Objects.equals(this.badges, currentUser.badges) &&
        Objects.equals(this.bio, currentUser.bio) &&
        Objects.equals(this.bioLinks, currentUser.bioLinks) &&
        Objects.equals(this.contentFilters, currentUser.contentFilters) &&
        Objects.equals(this.currentAvatar, currentUser.currentAvatar) &&
        Objects.equals(this.currentAvatarImageUrl, currentUser.currentAvatarImageUrl) &&
        Objects.equals(this.currentAvatarThumbnailImageUrl, currentUser.currentAvatarThumbnailImageUrl) &&
        Objects.equals(this.currentAvatarTags, currentUser.currentAvatarTags) &&
        Objects.equals(this.dateJoined, currentUser.dateJoined) &&
        Objects.equals(this.developerType, currentUser.developerType) &&
        Objects.equals(this.displayName, currentUser.displayName) &&
        Objects.equals(this.emailVerified, currentUser.emailVerified) &&
        Objects.equals(this.fallbackAvatar, currentUser.fallbackAvatar) &&
        Objects.equals(this.friendGroupNames, currentUser.friendGroupNames) &&
        Objects.equals(this.friendKey, currentUser.friendKey) &&
        Objects.equals(this.friends, currentUser.friends) &&
        Objects.equals(this.hasBirthday, currentUser.hasBirthday) &&
        Objects.equals(this.hideContentFilterSettings, currentUser.hideContentFilterSettings) &&
        Objects.equals(this.userLanguage, currentUser.userLanguage) &&
        Objects.equals(this.userLanguageCode, currentUser.userLanguageCode) &&
        Objects.equals(this.hasEmail, currentUser.hasEmail) &&
        Objects.equals(this.hasLoggedInFromClient, currentUser.hasLoggedInFromClient) &&
        Objects.equals(this.hasPendingEmail, currentUser.hasPendingEmail) &&
        Objects.equals(this.homeLocation, currentUser.homeLocation) &&
        Objects.equals(this.id, currentUser.id) &&
        Objects.equals(this.isAdult, currentUser.isAdult) &&
        Objects.equals(this.isBoopingEnabled, currentUser.isBoopingEnabled) &&
        Objects.equals(this.isFriend, currentUser.isFriend) &&
        Objects.equals(this.lastActivity, currentUser.lastActivity) &&
        Objects.equals(this.lastLogin, currentUser.lastLogin) &&
        Objects.equals(this.lastMobile, currentUser.lastMobile) &&
        Objects.equals(this.lastPlatform, currentUser.lastPlatform) &&
        Objects.equals(this.obfuscatedEmail, currentUser.obfuscatedEmail) &&
        Objects.equals(this.obfuscatedPendingEmail, currentUser.obfuscatedPendingEmail) &&
        Objects.equals(this.oculusId, currentUser.oculusId) &&
        Objects.equals(this.googleId, currentUser.googleId) &&
        Objects.equals(this.googleDetails, currentUser.googleDetails) &&
        Objects.equals(this.picoId, currentUser.picoId) &&
        Objects.equals(this.viveId, currentUser.viveId) &&
        Objects.equals(this.offlineFriends, currentUser.offlineFriends) &&
        Objects.equals(this.onlineFriends, currentUser.onlineFriends) &&
        Objects.equals(this.pastDisplayNames, currentUser.pastDisplayNames) &&
        Objects.equals(this.presence, currentUser.presence) &&
        Objects.equals(this.platformHistory, currentUser.platformHistory) &&
        Objects.equals(this.profilePicOverride, currentUser.profilePicOverride) &&
        Objects.equals(this.profilePicOverrideThumbnail, currentUser.profilePicOverrideThumbnail) &&
        Objects.equals(this.pronouns, currentUser.pronouns) &&
        Objects.equals(this.pronounsHistory, currentUser.pronounsHistory) &&
        Objects.equals(this.queuedInstance, currentUser.queuedInstance) &&
        Objects.equals(this.receiveMobileInvitations, currentUser.receiveMobileInvitations) &&
        Objects.equals(this.state, currentUser.state) &&
        Objects.equals(this.status, currentUser.status) &&
        Objects.equals(this.statusDescription, currentUser.statusDescription) &&
        Objects.equals(this.statusFirstTime, currentUser.statusFirstTime) &&
        Objects.equals(this.statusHistory, currentUser.statusHistory) &&
        Objects.equals(this.steamDetails, currentUser.steamDetails) &&
        Objects.equals(this.steamId, currentUser.steamId) &&
        Objects.equals(this.tags, currentUser.tags) &&
        Objects.equals(this.twoFactorAuthEnabled, currentUser.twoFactorAuthEnabled) &&
        Objects.equals(this.twoFactorAuthEnabledDate, currentUser.twoFactorAuthEnabledDate) &&
        Objects.equals(this.unsubscribe, currentUser.unsubscribe) &&
        Objects.equals(this.updatedAt, currentUser.updatedAt) &&
        Objects.equals(this.userIcon, currentUser.userIcon) &&
        Objects.equals(this.username, currentUser.username);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedTOSVersion, acceptedPrivacyVersion, accountDeletionDate, accountDeletionLog, activeFriends, ageVerificationStatus, ageVerified, allowAvatarCopying, authToken, badges, bio, bioLinks, contentFilters, currentAvatar, currentAvatarImageUrl, currentAvatarThumbnailImageUrl, currentAvatarTags, dateJoined, developerType, displayName, emailVerified, fallbackAvatar, friendGroupNames, friendKey, friends, hasBirthday, hideContentFilterSettings, userLanguage, userLanguageCode, hasEmail, hasLoggedInFromClient, hasPendingEmail, homeLocation, id, isAdult, isBoopingEnabled, isFriend, lastActivity, lastLogin, lastMobile, lastPlatform, obfuscatedEmail, obfuscatedPendingEmail, oculusId, googleId, googleDetails, picoId, viveId, offlineFriends, onlineFriends, pastDisplayNames, presence, platformHistory, profilePicOverride, profilePicOverrideThumbnail, pronouns, pronounsHistory, queuedInstance, receiveMobileInvitations, state, status, statusDescription, statusFirstTime, statusHistory, steamDetails, steamId, tags, twoFactorAuthEnabled, twoFactorAuthEnabledDate, unsubscribe, updatedAt, userIcon, username);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentUser {\n");
    sb.append("    acceptedTOSVersion: ").append(toIndentedString(acceptedTOSVersion)).append("\n");
    sb.append("    acceptedPrivacyVersion: ").append(toIndentedString(acceptedPrivacyVersion)).append("\n");
    sb.append("    accountDeletionDate: ").append(toIndentedString(accountDeletionDate)).append("\n");
    sb.append("    accountDeletionLog: ").append(toIndentedString(accountDeletionLog)).append("\n");
    sb.append("    activeFriends: ").append(toIndentedString(activeFriends)).append("\n");
    sb.append("    ageVerificationStatus: ").append(toIndentedString(ageVerificationStatus)).append("\n");
    sb.append("    ageVerified: ").append(toIndentedString(ageVerified)).append("\n");
    sb.append("    allowAvatarCopying: ").append(toIndentedString(allowAvatarCopying)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    badges: ").append(toIndentedString(badges)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    bioLinks: ").append(toIndentedString(bioLinks)).append("\n");
    sb.append("    contentFilters: ").append(toIndentedString(contentFilters)).append("\n");
    sb.append("    currentAvatar: ").append(toIndentedString(currentAvatar)).append("\n");
    sb.append("    currentAvatarImageUrl: ").append(toIndentedString(currentAvatarImageUrl)).append("\n");
    sb.append("    currentAvatarThumbnailImageUrl: ").append(toIndentedString(currentAvatarThumbnailImageUrl)).append("\n");
    sb.append("    currentAvatarTags: ").append(toIndentedString(currentAvatarTags)).append("\n");
    sb.append("    dateJoined: ").append(toIndentedString(dateJoined)).append("\n");
    sb.append("    developerType: ").append(toIndentedString(developerType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    fallbackAvatar: ").append(toIndentedString(fallbackAvatar)).append("\n");
    sb.append("    friendGroupNames: ").append(toIndentedString(friendGroupNames)).append("\n");
    sb.append("    friendKey: ").append(toIndentedString(friendKey)).append("\n");
    sb.append("    friends: ").append(toIndentedString(friends)).append("\n");
    sb.append("    hasBirthday: ").append(toIndentedString(hasBirthday)).append("\n");
    sb.append("    hideContentFilterSettings: ").append(toIndentedString(hideContentFilterSettings)).append("\n");
    sb.append("    userLanguage: ").append(toIndentedString(userLanguage)).append("\n");
    sb.append("    userLanguageCode: ").append(toIndentedString(userLanguageCode)).append("\n");
    sb.append("    hasEmail: ").append(toIndentedString(hasEmail)).append("\n");
    sb.append("    hasLoggedInFromClient: ").append(toIndentedString(hasLoggedInFromClient)).append("\n");
    sb.append("    hasPendingEmail: ").append(toIndentedString(hasPendingEmail)).append("\n");
    sb.append("    homeLocation: ").append(toIndentedString(homeLocation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAdult: ").append(toIndentedString(isAdult)).append("\n");
    sb.append("    isBoopingEnabled: ").append(toIndentedString(isBoopingEnabled)).append("\n");
    sb.append("    isFriend: ").append(toIndentedString(isFriend)).append("\n");
    sb.append("    lastActivity: ").append(toIndentedString(lastActivity)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    lastMobile: ").append(toIndentedString(lastMobile)).append("\n");
    sb.append("    lastPlatform: ").append(toIndentedString(lastPlatform)).append("\n");
    sb.append("    obfuscatedEmail: ").append(toIndentedString(obfuscatedEmail)).append("\n");
    sb.append("    obfuscatedPendingEmail: ").append(toIndentedString(obfuscatedPendingEmail)).append("\n");
    sb.append("    oculusId: ").append(toIndentedString(oculusId)).append("\n");
    sb.append("    googleId: ").append(toIndentedString(googleId)).append("\n");
    sb.append("    googleDetails: ").append(toIndentedString(googleDetails)).append("\n");
    sb.append("    picoId: ").append(toIndentedString(picoId)).append("\n");
    sb.append("    viveId: ").append(toIndentedString(viveId)).append("\n");
    sb.append("    offlineFriends: ").append(toIndentedString(offlineFriends)).append("\n");
    sb.append("    onlineFriends: ").append(toIndentedString(onlineFriends)).append("\n");
    sb.append("    pastDisplayNames: ").append(toIndentedString(pastDisplayNames)).append("\n");
    sb.append("    presence: ").append(toIndentedString(presence)).append("\n");
    sb.append("    platformHistory: ").append(toIndentedString(platformHistory)).append("\n");
    sb.append("    profilePicOverride: ").append(toIndentedString(profilePicOverride)).append("\n");
    sb.append("    profilePicOverrideThumbnail: ").append(toIndentedString(profilePicOverrideThumbnail)).append("\n");
    sb.append("    pronouns: ").append(toIndentedString(pronouns)).append("\n");
    sb.append("    pronounsHistory: ").append(toIndentedString(pronounsHistory)).append("\n");
    sb.append("    queuedInstance: ").append(toIndentedString(queuedInstance)).append("\n");
    sb.append("    receiveMobileInvitations: ").append(toIndentedString(receiveMobileInvitations)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    statusFirstTime: ").append(toIndentedString(statusFirstTime)).append("\n");
    sb.append("    statusHistory: ").append(toIndentedString(statusHistory)).append("\n");
    sb.append("    steamDetails: ").append(toIndentedString(steamDetails)).append("\n");
    sb.append("    steamId: ").append(toIndentedString(steamId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    twoFactorAuthEnabled: ").append(toIndentedString(twoFactorAuthEnabled)).append("\n");
    sb.append("    twoFactorAuthEnabledDate: ").append(toIndentedString(twoFactorAuthEnabledDate)).append("\n");
    sb.append("    unsubscribe: ").append(toIndentedString(unsubscribe)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userIcon: ").append(toIndentedString(userIcon)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedTOSVersion");
    openapiFields.add("acceptedPrivacyVersion");
    openapiFields.add("accountDeletionDate");
    openapiFields.add("accountDeletionLog");
    openapiFields.add("activeFriends");
    openapiFields.add("ageVerificationStatus");
    openapiFields.add("ageVerified");
    openapiFields.add("allowAvatarCopying");
    openapiFields.add("authToken");
    openapiFields.add("badges");
    openapiFields.add("bio");
    openapiFields.add("bioLinks");
    openapiFields.add("contentFilters");
    openapiFields.add("currentAvatar");
    openapiFields.add("currentAvatarImageUrl");
    openapiFields.add("currentAvatarThumbnailImageUrl");
    openapiFields.add("currentAvatarTags");
    openapiFields.add("date_joined");
    openapiFields.add("developerType");
    openapiFields.add("displayName");
    openapiFields.add("emailVerified");
    openapiFields.add("fallbackAvatar");
    openapiFields.add("friendGroupNames");
    openapiFields.add("friendKey");
    openapiFields.add("friends");
    openapiFields.add("hasBirthday");
    openapiFields.add("hideContentFilterSettings");
    openapiFields.add("userLanguage");
    openapiFields.add("userLanguageCode");
    openapiFields.add("hasEmail");
    openapiFields.add("hasLoggedInFromClient");
    openapiFields.add("hasPendingEmail");
    openapiFields.add("homeLocation");
    openapiFields.add("id");
    openapiFields.add("isAdult");
    openapiFields.add("isBoopingEnabled");
    openapiFields.add("isFriend");
    openapiFields.add("last_activity");
    openapiFields.add("last_login");
    openapiFields.add("last_mobile");
    openapiFields.add("last_platform");
    openapiFields.add("obfuscatedEmail");
    openapiFields.add("obfuscatedPendingEmail");
    openapiFields.add("oculusId");
    openapiFields.add("googleId");
    openapiFields.add("googleDetails");
    openapiFields.add("picoId");
    openapiFields.add("viveId");
    openapiFields.add("offlineFriends");
    openapiFields.add("onlineFriends");
    openapiFields.add("pastDisplayNames");
    openapiFields.add("presence");
    openapiFields.add("platform_history");
    openapiFields.add("profilePicOverride");
    openapiFields.add("profilePicOverrideThumbnail");
    openapiFields.add("pronouns");
    openapiFields.add("pronounsHistory");
    openapiFields.add("queuedInstance");
    openapiFields.add("receiveMobileInvitations");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("statusDescription");
    openapiFields.add("statusFirstTime");
    openapiFields.add("statusHistory");
    openapiFields.add("steamDetails");
    openapiFields.add("steamId");
    openapiFields.add("tags");
    openapiFields.add("twoFactorAuthEnabled");
    openapiFields.add("twoFactorAuthEnabledDate");
    openapiFields.add("unsubscribe");
    openapiFields.add("updated_at");
    openapiFields.add("userIcon");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("acceptedTOSVersion");
    openapiRequiredFields.add("ageVerificationStatus");
    openapiRequiredFields.add("ageVerified");
    openapiRequiredFields.add("allowAvatarCopying");
    openapiRequiredFields.add("bio");
    openapiRequiredFields.add("bioLinks");
    openapiRequiredFields.add("currentAvatar");
    openapiRequiredFields.add("currentAvatarImageUrl");
    openapiRequiredFields.add("currentAvatarThumbnailImageUrl");
    openapiRequiredFields.add("currentAvatarTags");
    openapiRequiredFields.add("date_joined");
    openapiRequiredFields.add("developerType");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("emailVerified");
    openapiRequiredFields.add("friendGroupNames");
    openapiRequiredFields.add("friendKey");
    openapiRequiredFields.add("friends");
    openapiRequiredFields.add("hasBirthday");
    openapiRequiredFields.add("hasEmail");
    openapiRequiredFields.add("hasLoggedInFromClient");
    openapiRequiredFields.add("hasPendingEmail");
    openapiRequiredFields.add("homeLocation");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isAdult");
    openapiRequiredFields.add("isFriend");
    openapiRequiredFields.add("last_login");
    openapiRequiredFields.add("last_mobile");
    openapiRequiredFields.add("last_platform");
    openapiRequiredFields.add("obfuscatedEmail");
    openapiRequiredFields.add("obfuscatedPendingEmail");
    openapiRequiredFields.add("oculusId");
    openapiRequiredFields.add("pastDisplayNames");
    openapiRequiredFields.add("profilePicOverride");
    openapiRequiredFields.add("profilePicOverrideThumbnail");
    openapiRequiredFields.add("pronouns");
    openapiRequiredFields.add("pronounsHistory");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("statusDescription");
    openapiRequiredFields.add("statusFirstTime");
    openapiRequiredFields.add("statusHistory");
    openapiRequiredFields.add("steamDetails");
    openapiRequiredFields.add("steamId");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("twoFactorAuthEnabled");
    openapiRequiredFields.add("unsubscribe");
    openapiRequiredFields.add("userIcon");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CurrentUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CurrentUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentUser is not found in the empty JSON string", CurrentUser.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CurrentUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrentUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrentUser.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("accountDeletionLog") != null && !jsonObj.get("accountDeletionLog").isJsonNull()) {
        JsonArray jsonArrayaccountDeletionLog = jsonObj.getAsJsonArray("accountDeletionLog");
        if (jsonArrayaccountDeletionLog != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountDeletionLog").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountDeletionLog` to be an array in the JSON string but got `%s`", jsonObj.get("accountDeletionLog").toString()));
          }

          // validate the optional field `accountDeletionLog` (array)
          for (int i = 0; i < jsonArrayaccountDeletionLog.size(); i++) {
            AccountDeletionLog.validateJsonObject(jsonArrayaccountDeletionLog.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("activeFriends") != null && !jsonObj.get("activeFriends").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeFriends` to be an array in the JSON string but got `%s`", jsonObj.get("activeFriends").toString()));
      }
      if ((jsonObj.get("authToken") != null && !jsonObj.get("authToken").isJsonNull()) && !jsonObj.get("authToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authToken").toString()));
      }
      if (jsonObj.get("badges") != null && !jsonObj.get("badges").isJsonNull()) {
        JsonArray jsonArraybadges = jsonObj.getAsJsonArray("badges");
        if (jsonArraybadges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("badges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `badges` to be an array in the JSON string but got `%s`", jsonObj.get("badges").toString()));
          }

          // validate the optional field `badges` (array)
          for (int i = 0; i < jsonArraybadges.size(); i++) {
            Badge.validateJsonObject(jsonArraybadges.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("bioLinks") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bioLinks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bioLinks` to be an array in the JSON string but got `%s`", jsonObj.get("bioLinks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contentFilters") != null && !jsonObj.get("contentFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentFilters` to be an array in the JSON string but got `%s`", jsonObj.get("contentFilters").toString()));
      }
      if (!jsonObj.get("currentAvatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentAvatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentAvatar").toString()));
      }
      if (!jsonObj.get("currentAvatarImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentAvatarImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentAvatarImageUrl").toString()));
      }
      if (!jsonObj.get("currentAvatarThumbnailImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentAvatarThumbnailImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentAvatarThumbnailImageUrl").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("currentAvatarTags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("currentAvatarTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentAvatarTags` to be an array in the JSON string but got `%s`", jsonObj.get("currentAvatarTags").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("fallbackAvatar") != null && !jsonObj.get("fallbackAvatar").isJsonNull()) && !jsonObj.get("fallbackAvatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallbackAvatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallbackAvatar").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("friendGroupNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("friendGroupNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendGroupNames` to be an array in the JSON string but got `%s`", jsonObj.get("friendGroupNames").toString()));
      }
      if (!jsonObj.get("friendKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendKey").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("friends") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("friends").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `friends` to be an array in the JSON string but got `%s`", jsonObj.get("friends").toString()));
      }
      if ((jsonObj.get("userLanguage") != null && !jsonObj.get("userLanguage").isJsonNull()) && !jsonObj.get("userLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLanguage").toString()));
      }
      if ((jsonObj.get("userLanguageCode") != null && !jsonObj.get("userLanguageCode").isJsonNull()) && !jsonObj.get("userLanguageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLanguageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLanguageCode").toString()));
      }
      if (!jsonObj.get("homeLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeLocation").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("last_platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_platform").toString()));
      }
      if (!jsonObj.get("obfuscatedEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedEmail").toString()));
      }
      if (!jsonObj.get("obfuscatedPendingEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedPendingEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedPendingEmail").toString()));
      }
      if (!jsonObj.get("oculusId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oculusId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oculusId").toString()));
      }
      if ((jsonObj.get("googleId") != null && !jsonObj.get("googleId").isJsonNull()) && !jsonObj.get("googleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleId").toString()));
      }
      if ((jsonObj.get("picoId") != null && !jsonObj.get("picoId").isJsonNull()) && !jsonObj.get("picoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picoId").toString()));
      }
      if ((jsonObj.get("viveId") != null && !jsonObj.get("viveId").isJsonNull()) && !jsonObj.get("viveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viveId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("offlineFriends") != null && !jsonObj.get("offlineFriends").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offlineFriends` to be an array in the JSON string but got `%s`", jsonObj.get("offlineFriends").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("onlineFriends") != null && !jsonObj.get("onlineFriends").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `onlineFriends` to be an array in the JSON string but got `%s`", jsonObj.get("onlineFriends").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("pastDisplayNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pastDisplayNames` to be an array in the JSON string but got `%s`", jsonObj.get("pastDisplayNames").toString()));
      }

      JsonArray jsonArraypastDisplayNames = jsonObj.getAsJsonArray("pastDisplayNames");
      // validate the required field `pastDisplayNames` (array)
      for (int i = 0; i < jsonArraypastDisplayNames.size(); i++) {
        PastDisplayName.validateJsonObject(jsonArraypastDisplayNames.get(i).getAsJsonObject());
      };
      // validate the optional field `presence`
      if (jsonObj.get("presence") != null && !jsonObj.get("presence").isJsonNull()) {
        CurrentUserPresence.validateJsonObject(jsonObj.getAsJsonObject("presence"));
      }
      if (jsonObj.get("platform_history") != null && !jsonObj.get("platform_history").isJsonNull()) {
        JsonArray jsonArrayplatformHistory = jsonObj.getAsJsonArray("platform_history");
        if (jsonArrayplatformHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("platform_history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `platform_history` to be an array in the JSON string but got `%s`", jsonObj.get("platform_history").toString()));
          }

          // validate the optional field `platform_history` (array)
          for (int i = 0; i < jsonArrayplatformHistory.size(); i++) {
            CurrentUserPlatformHistoryInner.validateJsonObject(jsonArrayplatformHistory.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("profilePicOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePicOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePicOverride").toString()));
      }
      if (!jsonObj.get("profilePicOverrideThumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePicOverrideThumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePicOverrideThumbnail").toString()));
      }
      if (!jsonObj.get("pronouns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pronouns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pronouns").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pronounsHistory") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pronounsHistory").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pronounsHistory` to be an array in the JSON string but got `%s`", jsonObj.get("pronounsHistory").toString()));
      }
      if ((jsonObj.get("queuedInstance") != null && !jsonObj.get("queuedInstance").isJsonNull()) && !jsonObj.get("queuedInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queuedInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queuedInstance").toString()));
      }
      if (!jsonObj.get("statusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDescription").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("statusHistory") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("statusHistory").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusHistory` to be an array in the JSON string but got `%s`", jsonObj.get("statusHistory").toString()));
      }
      if (!jsonObj.get("steamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `steamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("steamId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("userIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIcon").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentUser.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentUser>() {
           @Override
           public void write(JsonWriter out, CurrentUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CurrentUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CurrentUser
  * @throws IOException if the JSON string is invalid with respect to CurrentUser
  */
  public static CurrentUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentUser.class);
  }

 /**
  * Convert an instance of CurrentUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

