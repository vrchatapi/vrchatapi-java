/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.ProductListing;
import io.github.vrchatapi.model.StoreShelf;
import io.github.vrchatapi.model.StoreType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * Store
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Store {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SELLER_DISPLAY_NAME = "sellerDisplayName";
  @SerializedName(SERIALIZED_NAME_SELLER_DISPLAY_NAME)
  private String sellerDisplayName;

  public static final String SERIALIZED_NAME_SELLER_ID = "sellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_STORE_ID = "storeId";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_STORE_TYPE = "storeType";
  @SerializedName(SERIALIZED_NAME_STORE_TYPE)
  private StoreType storeType = StoreType.GROUP;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTING_IDS = "listingIds";
  @SerializedName(SERIALIZED_NAME_LISTING_IDS)
  private List<String> listingIds = null;

  public static final String SERIALIZED_NAME_LISTINGS = "listings";
  @SerializedName(SERIALIZED_NAME_LISTINGS)
  private List<ProductListing> listings = null;

  public static final String SERIALIZED_NAME_WORLD_ID = "worldId";
  @SerializedName(SERIALIZED_NAME_WORLD_ID)
  private String worldId;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_SHELF_IDS = "shelfIds";
  @SerializedName(SERIALIZED_NAME_SHELF_IDS)
  private List<String> shelfIds = null;

  public static final String SERIALIZED_NAME_SHELVES = "shelves";
  @SerializedName(SERIALIZED_NAME_SHELVES)
  private List<StoreShelf> shelves = null;

  public Store() {
  }

  public Store description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Store displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Store id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "esto_713b247d-2b5d-41a0-bba3-50db28dc1498", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Store sellerDisplayName(String sellerDisplayName) {
    
    this.sellerDisplayName = sellerDisplayName;
    return this;
  }

   /**
   * Get sellerDisplayName
   * @return sellerDisplayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSellerDisplayName() {
    return sellerDisplayName;
  }


  public void setSellerDisplayName(String sellerDisplayName) {
    this.sellerDisplayName = sellerDisplayName;
  }


  public Store sellerId(String sellerId) {
    
    this.sellerId = sellerId;
    return this;
  }

   /**
   * A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
   * @return sellerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", required = true, value = "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.")

  public String getSellerId() {
    return sellerId;
  }


  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public Store storeId(String storeId) {
    
    this.storeId = storeId;
    return this;
  }

   /**
   * Get storeId
   * @return storeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "esto_713b247d-2b5d-41a0-bba3-50db28dc1498", required = true, value = "")

  public String getStoreId() {
    return storeId;
  }


  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public Store storeType(StoreType storeType) {
    
    this.storeType = storeType;
    return this;
  }

   /**
   * Get storeType
   * @return storeType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StoreType getStoreType() {
    return storeType;
  }


  public void setStoreType(StoreType storeType) {
    this.storeType = storeType;
  }


  public Store tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public Store addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Store listingIds(List<String> listingIds) {
    
    this.listingIds = listingIds;
    return this;
  }

  public Store addListingIdsItem(String listingIdsItem) {
    if (this.listingIds == null) {
      this.listingIds = new ArrayList<>();
    }
    this.listingIds.add(listingIdsItem);
    return this;
  }

   /**
   * Only for store type world and group
   * @return listingIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for store type world and group")

  public List<String> getListingIds() {
    return listingIds;
  }


  public void setListingIds(List<String> listingIds) {
    this.listingIds = listingIds;
  }


  public Store listings(List<ProductListing> listings) {
    
    this.listings = listings;
    return this;
  }

  public Store addListingsItem(ProductListing listingsItem) {
    if (this.listings == null) {
      this.listings = new ArrayList<>();
    }
    this.listings.add(listingsItem);
    return this;
  }

   /**
   * Only for store type world and group
   * @return listings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for store type world and group")

  public List<ProductListing> getListings() {
    return listings;
  }


  public void setListings(List<ProductListing> listings) {
    this.listings = listings;
  }


  public Store worldId(String worldId) {
    
    this.worldId = worldId;
    return this;
  }

   /**
   * WorldID be \&quot;offline\&quot; on User profiles if you are not friends with that user.
   * @return worldId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "wrld_4432ea9b-729c-46e3-8eaf-846aa0a37fdd", value = "WorldID be \"offline\" on User profiles if you are not friends with that user.")

  public String getWorldId() {
    return worldId;
  }


  public void setWorldId(String worldId) {
    this.worldId = worldId;
  }


  public Store groupId(String groupId) {
    
    this.groupId = groupId;
    return this;
  }

   /**
   * Get groupId
   * @return groupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "grp_71a7ff59-112c-4e78-a990-c7cc650776e5", value = "")

  public String getGroupId() {
    return groupId;
  }


  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public Store shelfIds(List<String> shelfIds) {
    
    this.shelfIds = shelfIds;
    return this;
  }

  public Store addShelfIdsItem(String shelfIdsItem) {
    if (this.shelfIds == null) {
      this.shelfIds = new ArrayList<>();
    }
    this.shelfIds.add(shelfIdsItem);
    return this;
  }

   /**
   * Only for store type house
   * @return shelfIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for store type house")

  public List<String> getShelfIds() {
    return shelfIds;
  }


  public void setShelfIds(List<String> shelfIds) {
    this.shelfIds = shelfIds;
  }


  public Store shelves(List<StoreShelf> shelves) {
    
    this.shelves = shelves;
    return this;
  }

  public Store addShelvesItem(StoreShelf shelvesItem) {
    if (this.shelves == null) {
      this.shelves = new ArrayList<>();
    }
    this.shelves.add(shelvesItem);
    return this;
  }

   /**
   * Only for store type house
   * @return shelves
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only for store type house")

  public List<StoreShelf> getShelves() {
    return shelves;
  }


  public void setShelves(List<StoreShelf> shelves) {
    this.shelves = shelves;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Store store = (Store) o;
    return Objects.equals(this.description, store.description) &&
        Objects.equals(this.displayName, store.displayName) &&
        Objects.equals(this.id, store.id) &&
        Objects.equals(this.sellerDisplayName, store.sellerDisplayName) &&
        Objects.equals(this.sellerId, store.sellerId) &&
        Objects.equals(this.storeId, store.storeId) &&
        Objects.equals(this.storeType, store.storeType) &&
        Objects.equals(this.tags, store.tags) &&
        Objects.equals(this.listingIds, store.listingIds) &&
        Objects.equals(this.listings, store.listings) &&
        Objects.equals(this.worldId, store.worldId) &&
        Objects.equals(this.groupId, store.groupId) &&
        Objects.equals(this.shelfIds, store.shelfIds) &&
        Objects.equals(this.shelves, store.shelves);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, id, sellerDisplayName, sellerId, storeId, storeType, tags, listingIds, listings, worldId, groupId, shelfIds, shelves);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Store {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sellerDisplayName: ").append(toIndentedString(sellerDisplayName)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    storeType: ").append(toIndentedString(storeType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    listingIds: ").append(toIndentedString(listingIds)).append("\n");
    sb.append("    listings: ").append(toIndentedString(listings)).append("\n");
    sb.append("    worldId: ").append(toIndentedString(worldId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    shelfIds: ").append(toIndentedString(shelfIds)).append("\n");
    sb.append("    shelves: ").append(toIndentedString(shelves)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("id");
    openapiFields.add("sellerDisplayName");
    openapiFields.add("sellerId");
    openapiFields.add("storeId");
    openapiFields.add("storeType");
    openapiFields.add("tags");
    openapiFields.add("listingIds");
    openapiFields.add("listings");
    openapiFields.add("worldId");
    openapiFields.add("groupId");
    openapiFields.add("shelfIds");
    openapiFields.add("shelves");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("sellerDisplayName");
    openapiRequiredFields.add("sellerId");
    openapiRequiredFields.add("storeId");
    openapiRequiredFields.add("storeType");
    openapiRequiredFields.add("tags");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Store
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Store.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Store is not found in the empty JSON string", Store.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Store.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Store` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Store.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("sellerDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerDisplayName").toString()));
      }
      if (!jsonObj.get("sellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerId").toString()));
      }
      if (!jsonObj.get("storeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("listingIds") != null && !jsonObj.get("listingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingIds` to be an array in the JSON string but got `%s`", jsonObj.get("listingIds").toString()));
      }
      if (jsonObj.get("listings") != null && !jsonObj.get("listings").isJsonNull()) {
        JsonArray jsonArraylistings = jsonObj.getAsJsonArray("listings");
        if (jsonArraylistings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listings` to be an array in the JSON string but got `%s`", jsonObj.get("listings").toString()));
          }

          // validate the optional field `listings` (array)
          for (int i = 0; i < jsonArraylistings.size(); i++) {
            ProductListing.validateJsonObject(jsonArraylistings.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("worldId") != null && !jsonObj.get("worldId").isJsonNull()) && !jsonObj.get("worldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `worldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("worldId").toString()));
      }
      if ((jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) && !jsonObj.get("groupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shelfIds") != null && !jsonObj.get("shelfIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shelfIds` to be an array in the JSON string but got `%s`", jsonObj.get("shelfIds").toString()));
      }
      if (jsonObj.get("shelves") != null && !jsonObj.get("shelves").isJsonNull()) {
        JsonArray jsonArrayshelves = jsonObj.getAsJsonArray("shelves");
        if (jsonArrayshelves != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shelves").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shelves` to be an array in the JSON string but got `%s`", jsonObj.get("shelves").toString()));
          }

          // validate the optional field `shelves` (array)
          for (int i = 0; i < jsonArrayshelves.size(); i++) {
            StoreShelf.validateJsonObject(jsonArrayshelves.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Store.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Store' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Store> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Store.class));

       return (TypeAdapter<T>) new TypeAdapter<Store>() {
           @Override
           public void write(JsonWriter out, Store value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Store read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Store given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Store
  * @throws IOException if the JSON string is invalid with respect to Store
  */
  public static Store fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Store.class);
  }

 /**
  * Convert an instance of Store to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

