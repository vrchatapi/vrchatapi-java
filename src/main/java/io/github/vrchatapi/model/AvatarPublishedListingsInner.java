/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.0
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * AvatarPublishedListingsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AvatarPublishedListingsInner {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_LISTING_ID = "listingId";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private String listingId;

  public static final String SERIALIZED_NAME_LISTING_TYPE = "listingType";
  @SerializedName(SERIALIZED_NAME_LISTING_TYPE)
  private String listingType;

  public static final String SERIALIZED_NAME_PRICE_TOKENS = "priceTokens";
  @SerializedName(SERIALIZED_NAME_PRICE_TOKENS)
  private Integer priceTokens;

  public AvatarPublishedListingsInner() {
  }

  public AvatarPublishedListingsInner description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AvatarPublishedListingsInner displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AvatarPublishedListingsInner imageId(String imageId) {
    
    this.imageId = imageId;
    return this;
  }

   /**
   * Get imageId
   * @return imageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageId() {
    return imageId;
  }


  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public AvatarPublishedListingsInner listingId(String listingId) {
    
    this.listingId = listingId;
    return this;
  }

   /**
   * Get listingId
   * @return listingId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getListingId() {
    return listingId;
  }


  public void setListingId(String listingId) {
    this.listingId = listingId;
  }


  public AvatarPublishedListingsInner listingType(String listingType) {
    
    this.listingType = listingType;
    return this;
  }

   /**
   * Get listingType
   * @return listingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getListingType() {
    return listingType;
  }


  public void setListingType(String listingType) {
    this.listingType = listingType;
  }


  public AvatarPublishedListingsInner priceTokens(Integer priceTokens) {
    
    this.priceTokens = priceTokens;
    return this;
  }

   /**
   * Get priceTokens
   * @return priceTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPriceTokens() {
    return priceTokens;
  }


  public void setPriceTokens(Integer priceTokens) {
    this.priceTokens = priceTokens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvatarPublishedListingsInner avatarPublishedListingsInner = (AvatarPublishedListingsInner) o;
    return Objects.equals(this.description, avatarPublishedListingsInner.description) &&
        Objects.equals(this.displayName, avatarPublishedListingsInner.displayName) &&
        Objects.equals(this.imageId, avatarPublishedListingsInner.imageId) &&
        Objects.equals(this.listingId, avatarPublishedListingsInner.listingId) &&
        Objects.equals(this.listingType, avatarPublishedListingsInner.listingType) &&
        Objects.equals(this.priceTokens, avatarPublishedListingsInner.priceTokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, imageId, listingId, listingType, priceTokens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvatarPublishedListingsInner {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    listingType: ").append(toIndentedString(listingType)).append("\n");
    sb.append("    priceTokens: ").append(toIndentedString(priceTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("imageId");
    openapiFields.add("listingId");
    openapiFields.add("listingType");
    openapiFields.add("priceTokens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AvatarPublishedListingsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AvatarPublishedListingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvatarPublishedListingsInner is not found in the empty JSON string", AvatarPublishedListingsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AvatarPublishedListingsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvatarPublishedListingsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) && !jsonObj.get("imageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageId").toString()));
      }
      if ((jsonObj.get("listingId") != null && !jsonObj.get("listingId").isJsonNull()) && !jsonObj.get("listingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingId").toString()));
      }
      if ((jsonObj.get("listingType") != null && !jsonObj.get("listingType").isJsonNull()) && !jsonObj.get("listingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvatarPublishedListingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvatarPublishedListingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvatarPublishedListingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvatarPublishedListingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AvatarPublishedListingsInner>() {
           @Override
           public void write(JsonWriter out, AvatarPublishedListingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvatarPublishedListingsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvatarPublishedListingsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvatarPublishedListingsInner
  * @throws IOException if the JSON string is invalid with respect to AvatarPublishedListingsInner
  */
  public static AvatarPublishedListingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvatarPublishedListingsInner.class);
  }

 /**
  * Convert an instance of AvatarPublishedListingsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

