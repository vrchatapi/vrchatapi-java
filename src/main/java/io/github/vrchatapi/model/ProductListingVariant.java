/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * ProductListingVariant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProductListingVariant {
  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private OffsetDateTime effectiveFrom;

  public static final String SERIALIZED_NAME_LISTING_VARIANT_ID = "listingVariantId";
  @SerializedName(SERIALIZED_NAME_LISTING_VARIANT_ID)
  private String listingVariantId;

  public static final String SERIALIZED_NAME_NON_REFUNDABLE = "nonRefundable";
  @SerializedName(SERIALIZED_NAME_NON_REFUNDABLE)
  private Boolean nonRefundable;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_SELLER_VARIANT = "sellerVariant";
  @SerializedName(SERIALIZED_NAME_SELLER_VARIANT)
  private Boolean sellerVariant;

  public static final String SERIALIZED_NAME_UNIT_PRICE_TOKENS = "unitPriceTokens";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE_TOKENS)
  private Integer unitPriceTokens;

  public ProductListingVariant() {
  }

  public ProductListingVariant effectiveFrom(OffsetDateTime effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * Get effectiveFrom
   * @return effectiveFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public ProductListingVariant listingVariantId(String listingVariantId) {
    
    this.listingVariantId = listingVariantId;
    return this;
  }

   /**
   * Get listingVariantId
   * @return listingVariantId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "listvar_e8658b56-1662-436c-935a-afcf6a7d4fed", required = true, value = "")

  public String getListingVariantId() {
    return listingVariantId;
  }


  public void setListingVariantId(String listingVariantId) {
    this.listingVariantId = listingVariantId;
  }


  public ProductListingVariant nonRefundable(Boolean nonRefundable) {
    
    this.nonRefundable = nonRefundable;
    return this;
  }

   /**
   * Get nonRefundable
   * @return nonRefundable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getNonRefundable() {
    return nonRefundable;
  }


  public void setNonRefundable(Boolean nonRefundable) {
    this.nonRefundable = nonRefundable;
  }


  public ProductListingVariant quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public ProductListingVariant sellerVariant(Boolean sellerVariant) {
    
    this.sellerVariant = sellerVariant;
    return this;
  }

   /**
   * Get sellerVariant
   * @return sellerVariant
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSellerVariant() {
    return sellerVariant;
  }


  public void setSellerVariant(Boolean sellerVariant) {
    this.sellerVariant = sellerVariant;
  }


  public ProductListingVariant unitPriceTokens(Integer unitPriceTokens) {
    
    this.unitPriceTokens = unitPriceTokens;
    return this;
  }

   /**
   * Get unitPriceTokens
   * @return unitPriceTokens
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getUnitPriceTokens() {
    return unitPriceTokens;
  }


  public void setUnitPriceTokens(Integer unitPriceTokens) {
    this.unitPriceTokens = unitPriceTokens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductListingVariant productListingVariant = (ProductListingVariant) o;
    return Objects.equals(this.effectiveFrom, productListingVariant.effectiveFrom) &&
        Objects.equals(this.listingVariantId, productListingVariant.listingVariantId) &&
        Objects.equals(this.nonRefundable, productListingVariant.nonRefundable) &&
        Objects.equals(this.quantity, productListingVariant.quantity) &&
        Objects.equals(this.sellerVariant, productListingVariant.sellerVariant) &&
        Objects.equals(this.unitPriceTokens, productListingVariant.unitPriceTokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveFrom, listingVariantId, nonRefundable, quantity, sellerVariant, unitPriceTokens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductListingVariant {\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    listingVariantId: ").append(toIndentedString(listingVariantId)).append("\n");
    sb.append("    nonRefundable: ").append(toIndentedString(nonRefundable)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    sellerVariant: ").append(toIndentedString(sellerVariant)).append("\n");
    sb.append("    unitPriceTokens: ").append(toIndentedString(unitPriceTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveFrom");
    openapiFields.add("listingVariantId");
    openapiFields.add("nonRefundable");
    openapiFields.add("quantity");
    openapiFields.add("sellerVariant");
    openapiFields.add("unitPriceTokens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("listingVariantId");
    openapiRequiredFields.add("nonRefundable");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("sellerVariant");
    openapiRequiredFields.add("unitPriceTokens");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductListingVariant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductListingVariant.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductListingVariant is not found in the empty JSON string", ProductListingVariant.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProductListingVariant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductListingVariant` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductListingVariant.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("listingVariantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingVariantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingVariantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductListingVariant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductListingVariant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductListingVariant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductListingVariant.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductListingVariant>() {
           @Override
           public void write(JsonWriter out, ProductListingVariant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductListingVariant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductListingVariant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductListingVariant
  * @throws IOException if the JSON string is invalid with respect to ProductListingVariant
  */
  public static ProductListingVariant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductListingVariant.class);
  }

 /**
  * Convert an instance of ProductListingVariant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

