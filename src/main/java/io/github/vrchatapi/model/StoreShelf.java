/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.ProductListing;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * StoreShelf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StoreShelf {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LISTING_IDS = "listingIds";
  @SerializedName(SERIALIZED_NAME_LISTING_IDS)
  private List<String> listingIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTINGS = "listings";
  @SerializedName(SERIALIZED_NAME_LISTINGS)
  private List<ProductListing> listings = null;

  public static final String SERIALIZED_NAME_SHELF_DESCRIPTION = "shelfDescription";
  @SerializedName(SERIALIZED_NAME_SHELF_DESCRIPTION)
  private String shelfDescription;

  public static final String SERIALIZED_NAME_SHELF_LAYOUT = "shelfLayout";
  @SerializedName(SERIALIZED_NAME_SHELF_LAYOUT)
  private String shelfLayout;

  public static final String SERIALIZED_NAME_SHELF_TITLE = "shelfTitle";
  @SerializedName(SERIALIZED_NAME_SHELF_TITLE)
  private String shelfTitle;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public StoreShelf() {
  }

  public StoreShelf id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ess_964dd7aa-f881-4ba1-adf7-261e906b9189", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public StoreShelf listingIds(List<String> listingIds) {
    
    this.listingIds = listingIds;
    return this;
  }

  public StoreShelf addListingIdsItem(String listingIdsItem) {
    this.listingIds.add(listingIdsItem);
    return this;
  }

   /**
   * Get listingIds
   * @return listingIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getListingIds() {
    return listingIds;
  }


  public void setListingIds(List<String> listingIds) {
    this.listingIds = listingIds;
  }


  public StoreShelf listings(List<ProductListing> listings) {
    
    this.listings = listings;
    return this;
  }

  public StoreShelf addListingsItem(ProductListing listingsItem) {
    if (this.listings == null) {
      this.listings = new ArrayList<>();
    }
    this.listings.add(listingsItem);
    return this;
  }

   /**
   * Get listings
   * @return listings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProductListing> getListings() {
    return listings;
  }


  public void setListings(List<ProductListing> listings) {
    this.listings = listings;
  }


  public StoreShelf shelfDescription(String shelfDescription) {
    
    this.shelfDescription = shelfDescription;
    return this;
  }

   /**
   * Get shelfDescription
   * @return shelfDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getShelfDescription() {
    return shelfDescription;
  }


  public void setShelfDescription(String shelfDescription) {
    this.shelfDescription = shelfDescription;
  }


  public StoreShelf shelfLayout(String shelfLayout) {
    
    this.shelfLayout = shelfLayout;
    return this;
  }

   /**
   * Get shelfLayout
   * @return shelfLayout
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getShelfLayout() {
    return shelfLayout;
  }


  public void setShelfLayout(String shelfLayout) {
    this.shelfLayout = shelfLayout;
  }


  public StoreShelf shelfTitle(String shelfTitle) {
    
    this.shelfTitle = shelfTitle;
    return this;
  }

   /**
   * Get shelfTitle
   * @return shelfTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getShelfTitle() {
    return shelfTitle;
  }


  public void setShelfTitle(String shelfTitle) {
    this.shelfTitle = shelfTitle;
  }


  public StoreShelf updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreShelf storeShelf = (StoreShelf) o;
    return Objects.equals(this.id, storeShelf.id) &&
        Objects.equals(this.listingIds, storeShelf.listingIds) &&
        Objects.equals(this.listings, storeShelf.listings) &&
        Objects.equals(this.shelfDescription, storeShelf.shelfDescription) &&
        Objects.equals(this.shelfLayout, storeShelf.shelfLayout) &&
        Objects.equals(this.shelfTitle, storeShelf.shelfTitle) &&
        Objects.equals(this.updatedAt, storeShelf.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, listingIds, listings, shelfDescription, shelfLayout, shelfTitle, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreShelf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    listingIds: ").append(toIndentedString(listingIds)).append("\n");
    sb.append("    listings: ").append(toIndentedString(listings)).append("\n");
    sb.append("    shelfDescription: ").append(toIndentedString(shelfDescription)).append("\n");
    sb.append("    shelfLayout: ").append(toIndentedString(shelfLayout)).append("\n");
    sb.append("    shelfTitle: ").append(toIndentedString(shelfTitle)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("listingIds");
    openapiFields.add("listings");
    openapiFields.add("shelfDescription");
    openapiFields.add("shelfLayout");
    openapiFields.add("shelfTitle");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("listingIds");
    openapiRequiredFields.add("shelfDescription");
    openapiRequiredFields.add("shelfLayout");
    openapiRequiredFields.add("shelfTitle");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StoreShelf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StoreShelf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoreShelf is not found in the empty JSON string", StoreShelf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StoreShelf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoreShelf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoreShelf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("listingIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("listingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingIds` to be an array in the JSON string but got `%s`", jsonObj.get("listingIds").toString()));
      }
      if (jsonObj.get("listings") != null && !jsonObj.get("listings").isJsonNull()) {
        JsonArray jsonArraylistings = jsonObj.getAsJsonArray("listings");
        if (jsonArraylistings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listings` to be an array in the JSON string but got `%s`", jsonObj.get("listings").toString()));
          }

          // validate the optional field `listings` (array)
          for (int i = 0; i < jsonArraylistings.size(); i++) {
            ProductListing.validateJsonObject(jsonArraylistings.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("shelfDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shelfDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shelfDescription").toString()));
      }
      if (!jsonObj.get("shelfLayout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shelfLayout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shelfLayout").toString()));
      }
      if (!jsonObj.get("shelfTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shelfTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shelfTitle").toString()));
      }
      if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoreShelf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoreShelf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoreShelf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoreShelf.class));

       return (TypeAdapter<T>) new TypeAdapter<StoreShelf>() {
           @Override
           public void write(JsonWriter out, StoreShelf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoreShelf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StoreShelf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StoreShelf
  * @throws IOException if the JSON string is invalid with respect to StoreShelf
  */
  public static StoreShelf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoreShelf.class);
  }

 /**
  * Convert an instance of StoreShelf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

