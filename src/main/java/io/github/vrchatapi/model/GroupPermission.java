/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.19.2
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * A permission that can be granted to a role in a group.
 */
@ApiModel(description = "A permission that can be granted to a role in a group.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GroupPermission {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HELP = "help";
  @SerializedName(SERIALIZED_NAME_HELP)
  private String help;

  public static final String SERIALIZED_NAME_IS_MANAGEMENT_PERMISSION = "isManagementPermission";
  @SerializedName(SERIALIZED_NAME_IS_MANAGEMENT_PERMISSION)
  private Boolean isManagementPermission = false;

  public static final String SERIALIZED_NAME_ALLOWED_TO_ADD = "allowedToAdd";
  @SerializedName(SERIALIZED_NAME_ALLOWED_TO_ADD)
  private Boolean allowedToAdd = false;

  public GroupPermission() {
  }

  public GroupPermission name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the permission.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "group-data-manage", value = "The name of the permission.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GroupPermission displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the permission.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Manage Group Data", value = "The display name of the permission.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GroupPermission help(String help) {
    
    this.help = help;
    return this;
  }

   /**
   * Human-readable description of the permission.
   * @return help
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Allows role to edit group details (name, description, joinState, initialRoles, etc).", value = "Human-readable description of the permission.")

  public String getHelp() {
    return help;
  }


  public void setHelp(String help) {
    this.help = help;
  }


  public GroupPermission isManagementPermission(Boolean isManagementPermission) {
    
    this.isManagementPermission = isManagementPermission;
    return this;
  }

   /**
   * Whether this permission is a \&quot;management\&quot; permission.
   * @return isManagementPermission
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether this permission is a \"management\" permission.")

  public Boolean getIsManagementPermission() {
    return isManagementPermission;
  }


  public void setIsManagementPermission(Boolean isManagementPermission) {
    this.isManagementPermission = isManagementPermission;
  }


  public GroupPermission allowedToAdd(Boolean allowedToAdd) {
    
    this.allowedToAdd = allowedToAdd;
    return this;
  }

   /**
   * Whether the user is allowed to add this permission to a role.
   * @return allowedToAdd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the user is allowed to add this permission to a role.")

  public Boolean getAllowedToAdd() {
    return allowedToAdd;
  }


  public void setAllowedToAdd(Boolean allowedToAdd) {
    this.allowedToAdd = allowedToAdd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupPermission groupPermission = (GroupPermission) o;
    return Objects.equals(this.name, groupPermission.name) &&
        Objects.equals(this.displayName, groupPermission.displayName) &&
        Objects.equals(this.help, groupPermission.help) &&
        Objects.equals(this.isManagementPermission, groupPermission.isManagementPermission) &&
        Objects.equals(this.allowedToAdd, groupPermission.allowedToAdd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, help, isManagementPermission, allowedToAdd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupPermission {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    help: ").append(toIndentedString(help)).append("\n");
    sb.append("    isManagementPermission: ").append(toIndentedString(isManagementPermission)).append("\n");
    sb.append("    allowedToAdd: ").append(toIndentedString(allowedToAdd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("displayName");
    openapiFields.add("help");
    openapiFields.add("isManagementPermission");
    openapiFields.add("allowedToAdd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupPermission
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupPermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupPermission is not found in the empty JSON string", GroupPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GroupPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupPermission` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("help") != null && !jsonObj.get("help").isJsonNull()) && !jsonObj.get("help").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupPermission>() {
           @Override
           public void write(JsonWriter out, GroupPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupPermission read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupPermission given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupPermission
  * @throws IOException if the JSON string is invalid with respect to GroupPermission
  */
  public static GroupPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupPermission.class);
  }

 /**
  * Convert an instance of GroupPermission to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

