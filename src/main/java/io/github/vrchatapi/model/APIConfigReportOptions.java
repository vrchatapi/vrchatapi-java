/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.APIConfigReportOptionsAvatar;
import io.github.vrchatapi.model.APIConfigReportOptionsGroup;
import io.github.vrchatapi.model.APIConfigReportOptionsUser;
import io.github.vrchatapi.model.APIConfigReportOptionsWorld;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * Options for reporting content
 */
@ApiModel(description = "Options for reporting content")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class APIConfigReportOptions {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private APIConfigReportOptionsAvatar avatar;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private APIConfigReportOptionsGroup group;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private APIConfigReportOptionsUser user;

  public static final String SERIALIZED_NAME_WORLD = "world";
  @SerializedName(SERIALIZED_NAME_WORLD)
  private APIConfigReportOptionsWorld world;

  public APIConfigReportOptions() {
  }

  public APIConfigReportOptions avatar(APIConfigReportOptionsAvatar avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIConfigReportOptionsAvatar getAvatar() {
    return avatar;
  }


  public void setAvatar(APIConfigReportOptionsAvatar avatar) {
    this.avatar = avatar;
  }


  public APIConfigReportOptions group(APIConfigReportOptionsGroup group) {
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIConfigReportOptionsGroup getGroup() {
    return group;
  }


  public void setGroup(APIConfigReportOptionsGroup group) {
    this.group = group;
  }


  public APIConfigReportOptions user(APIConfigReportOptionsUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIConfigReportOptionsUser getUser() {
    return user;
  }


  public void setUser(APIConfigReportOptionsUser user) {
    this.user = user;
  }


  public APIConfigReportOptions world(APIConfigReportOptionsWorld world) {
    
    this.world = world;
    return this;
  }

   /**
   * Get world
   * @return world
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIConfigReportOptionsWorld getWorld() {
    return world;
  }


  public void setWorld(APIConfigReportOptionsWorld world) {
    this.world = world;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIConfigReportOptions apIConfigReportOptions = (APIConfigReportOptions) o;
    return Objects.equals(this.avatar, apIConfigReportOptions.avatar) &&
        Objects.equals(this.group, apIConfigReportOptions.group) &&
        Objects.equals(this.user, apIConfigReportOptions.user) &&
        Objects.equals(this.world, apIConfigReportOptions.world);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, group, user, world);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIConfigReportOptions {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    world: ").append(toIndentedString(world)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("group");
    openapiFields.add("user");
    openapiFields.add("world");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIConfigReportOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIConfigReportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIConfigReportOptions is not found in the empty JSON string", APIConfigReportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIConfigReportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIConfigReportOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `avatar`
      if (jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) {
        APIConfigReportOptionsAvatar.validateJsonObject(jsonObj.getAsJsonObject("avatar"));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        APIConfigReportOptionsGroup.validateJsonObject(jsonObj.getAsJsonObject("group"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        APIConfigReportOptionsUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      // validate the optional field `world`
      if (jsonObj.get("world") != null && !jsonObj.get("world").isJsonNull()) {
        APIConfigReportOptionsWorld.validateJsonObject(jsonObj.getAsJsonObject("world"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIConfigReportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIConfigReportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIConfigReportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIConfigReportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<APIConfigReportOptions>() {
           @Override
           public void write(JsonWriter out, APIConfigReportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIConfigReportOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIConfigReportOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIConfigReportOptions
  * @throws IOException if the JSON string is invalid with respect to APIConfigReportOptions
  */
  public static APIConfigReportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIConfigReportOptions.class);
  }

 /**
  * Convert an instance of APIConfigReportOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

