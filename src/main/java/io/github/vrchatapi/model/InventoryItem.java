/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.InventoryItemType;
import io.github.vrchatapi.model.InventoryMetadata;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * InventoryItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InventoryItem {
  public static final String SERIALIZED_NAME_COLLECTIONS = "collections";
  @SerializedName(SERIALIZED_NAME_COLLECTIONS)
  private List<String> collections = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private OffsetDateTime expiryDate;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOLDER_ID = "holderId";
  @SerializedName(SERIALIZED_NAME_HOLDER_ID)
  private String holderId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_IS_SEEN = "isSeen";
  @SerializedName(SERIALIZED_NAME_IS_SEEN)
  private Boolean isSeen;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private InventoryItemType itemType = InventoryItemType.BUNDLE;

  public static final String SERIALIZED_NAME_ITEM_TYPE_LABEL = "itemTypeLabel";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE_LABEL)
  private String itemTypeLabel;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private InventoryMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TEMPLATE_CREATED_AT = "template_created_at";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_CREATED_AT)
  private OffsetDateTime templateCreatedAt;

  public static final String SERIALIZED_NAME_TEMPLATE_UPDATED_AT = "template_updated_at";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_UPDATED_AT)
  private OffsetDateTime templateUpdatedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public InventoryItem() {
  }

  public InventoryItem collections(List<String> collections) {
    
    this.collections = collections;
    return this;
  }

  public InventoryItem addCollectionsItem(String collectionsItem) {
    this.collections.add(collectionsItem);
    return this;
  }

   /**
   * Get collections
   * @return collections
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getCollections() {
    return collections;
  }


  public void setCollections(List<String> collections) {
    this.collections = collections;
  }


  public InventoryItem createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2025-06-13T05:00:45.455Z", required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InventoryItem description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public InventoryItem expiryDate(OffsetDateTime expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2025-06-13T05:00:45.455Z", required = true, value = "")

  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }


  public InventoryItem flags(List<String> flags) {
    
    this.flags = flags;
    return this;
  }

  public InventoryItem addFlagsItem(String flagsItem) {
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * Get flags
   * @return flags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getFlags() {
    return flags;
  }


  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public InventoryItem holderId(String holderId) {
    
    this.holderId = holderId;
    return this;
  }

   /**
   * A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
   * @return holderId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", required = true, value = "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.")

  public String getHolderId() {
    return holderId;
  }


  public void setHolderId(String holderId) {
    this.holderId = holderId;
  }


  public InventoryItem id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "inv_10bce5b0-2d2b-44e0-900d-db6534615162", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public InventoryItem imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Get imageUrl
   * @return imageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public InventoryItem isArchived(Boolean isArchived) {
    
    this.isArchived = isArchived;
    return this;
  }

   /**
   * Get isArchived
   * @return isArchived
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsArchived() {
    return isArchived;
  }


  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public InventoryItem isSeen(Boolean isSeen) {
    
    this.isSeen = isSeen;
    return this;
  }

   /**
   * Get isSeen
   * @return isSeen
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsSeen() {
    return isSeen;
  }


  public void setIsSeen(Boolean isSeen) {
    this.isSeen = isSeen;
  }


  public InventoryItem itemType(InventoryItemType itemType) {
    
    this.itemType = itemType;
    return this;
  }

   /**
   * Get itemType
   * @return itemType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public InventoryItemType getItemType() {
    return itemType;
  }


  public void setItemType(InventoryItemType itemType) {
    this.itemType = itemType;
  }


  public InventoryItem itemTypeLabel(String itemTypeLabel) {
    
    this.itemTypeLabel = itemTypeLabel;
    return this;
  }

   /**
   * Get itemTypeLabel
   * @return itemTypeLabel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getItemTypeLabel() {
    return itemTypeLabel;
  }


  public void setItemTypeLabel(String itemTypeLabel) {
    this.itemTypeLabel = itemTypeLabel;
  }


  public InventoryItem metadata(InventoryMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public InventoryMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(InventoryMetadata metadata) {
    this.metadata = metadata;
  }


  public InventoryItem name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public InventoryItem tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public InventoryItem addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public InventoryItem templateId(String templateId) {
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "invt_b80ce14b-038b-4f56-b970-d232771d62e3", required = true, value = "")

  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public InventoryItem templateCreatedAt(OffsetDateTime templateCreatedAt) {
    
    this.templateCreatedAt = templateCreatedAt;
    return this;
  }

   /**
   * Get templateCreatedAt
   * @return templateCreatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2025-06-09T16:31:40.785Z", required = true, value = "")

  public OffsetDateTime getTemplateCreatedAt() {
    return templateCreatedAt;
  }


  public void setTemplateCreatedAt(OffsetDateTime templateCreatedAt) {
    this.templateCreatedAt = templateCreatedAt;
  }


  public InventoryItem templateUpdatedAt(OffsetDateTime templateUpdatedAt) {
    
    this.templateUpdatedAt = templateUpdatedAt;
    return this;
  }

   /**
   * Get templateUpdatedAt
   * @return templateUpdatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2025-06-25T00:34:14.578Z", required = true, value = "")

  public OffsetDateTime getTemplateUpdatedAt() {
    return templateUpdatedAt;
  }


  public void setTemplateUpdatedAt(OffsetDateTime templateUpdatedAt) {
    this.templateUpdatedAt = templateUpdatedAt;
  }


  public InventoryItem updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2025-06-25T00:34:15.965Z", required = true, value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryItem inventoryItem = (InventoryItem) o;
    return Objects.equals(this.collections, inventoryItem.collections) &&
        Objects.equals(this.createdAt, inventoryItem.createdAt) &&
        Objects.equals(this.description, inventoryItem.description) &&
        Objects.equals(this.expiryDate, inventoryItem.expiryDate) &&
        Objects.equals(this.flags, inventoryItem.flags) &&
        Objects.equals(this.holderId, inventoryItem.holderId) &&
        Objects.equals(this.id, inventoryItem.id) &&
        Objects.equals(this.imageUrl, inventoryItem.imageUrl) &&
        Objects.equals(this.isArchived, inventoryItem.isArchived) &&
        Objects.equals(this.isSeen, inventoryItem.isSeen) &&
        Objects.equals(this.itemType, inventoryItem.itemType) &&
        Objects.equals(this.itemTypeLabel, inventoryItem.itemTypeLabel) &&
        Objects.equals(this.metadata, inventoryItem.metadata) &&
        Objects.equals(this.name, inventoryItem.name) &&
        Objects.equals(this.tags, inventoryItem.tags) &&
        Objects.equals(this.templateId, inventoryItem.templateId) &&
        Objects.equals(this.templateCreatedAt, inventoryItem.templateCreatedAt) &&
        Objects.equals(this.templateUpdatedAt, inventoryItem.templateUpdatedAt) &&
        Objects.equals(this.updatedAt, inventoryItem.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collections, createdAt, description, expiryDate, flags, holderId, id, imageUrl, isArchived, isSeen, itemType, itemTypeLabel, metadata, name, tags, templateId, templateCreatedAt, templateUpdatedAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryItem {\n");
    sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    holderId: ").append(toIndentedString(holderId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    isSeen: ").append(toIndentedString(isSeen)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    itemTypeLabel: ").append(toIndentedString(itemTypeLabel)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateCreatedAt: ").append(toIndentedString(templateCreatedAt)).append("\n");
    sb.append("    templateUpdatedAt: ").append(toIndentedString(templateUpdatedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collections");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("expiryDate");
    openapiFields.add("flags");
    openapiFields.add("holderId");
    openapiFields.add("id");
    openapiFields.add("imageUrl");
    openapiFields.add("isArchived");
    openapiFields.add("isSeen");
    openapiFields.add("itemType");
    openapiFields.add("itemTypeLabel");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("templateId");
    openapiFields.add("template_created_at");
    openapiFields.add("template_updated_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("collections");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("expiryDate");
    openapiRequiredFields.add("flags");
    openapiRequiredFields.add("holderId");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("imageUrl");
    openapiRequiredFields.add("isArchived");
    openapiRequiredFields.add("isSeen");
    openapiRequiredFields.add("itemType");
    openapiRequiredFields.add("itemTypeLabel");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("templateId");
    openapiRequiredFields.add("template_created_at");
    openapiRequiredFields.add("template_updated_at");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InventoryItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InventoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryItem is not found in the empty JSON string", InventoryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InventoryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InventoryItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("collections") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("collections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collections` to be an array in the JSON string but got `%s`", jsonObj.get("collections").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("flags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if (!jsonObj.get("holderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderId").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if (!jsonObj.get("itemTypeLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemTypeLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemTypeLabel").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryItem>() {
           @Override
           public void write(JsonWriter out, InventoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InventoryItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InventoryItem
  * @throws IOException if the JSON string is invalid with respect to InventoryItem
  */
  public static InventoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryItem.class);
  }

 /**
  * Convert an instance of InventoryItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

