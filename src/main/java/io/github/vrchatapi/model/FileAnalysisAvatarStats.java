/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * FileAnalysisAvatarStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FileAnalysisAvatarStats {
  public static final String SERIALIZED_NAME_ANIMATOR_COUNT = "animatorCount";
  @SerializedName(SERIALIZED_NAME_ANIMATOR_COUNT)
  private Integer animatorCount;

  public static final String SERIALIZED_NAME_AUDIO_SOURCE_COUNT = "audioSourceCount";
  @SerializedName(SERIALIZED_NAME_AUDIO_SOURCE_COUNT)
  private Integer audioSourceCount;

  public static final String SERIALIZED_NAME_BLEND_SHAPE_COUNT = "blendShapeCount";
  @SerializedName(SERIALIZED_NAME_BLEND_SHAPE_COUNT)
  private Integer blendShapeCount;

  public static final String SERIALIZED_NAME_BONE_COUNT = "boneCount";
  @SerializedName(SERIALIZED_NAME_BONE_COUNT)
  private Integer boneCount;

  public static final String SERIALIZED_NAME_BOUNDS = "bounds";
  @SerializedName(SERIALIZED_NAME_BOUNDS)
  private List<BigDecimal> bounds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMERA_COUNT = "cameraCount";
  @SerializedName(SERIALIZED_NAME_CAMERA_COUNT)
  private Integer cameraCount;

  public static final String SERIALIZED_NAME_CLOTH_COUNT = "clothCount";
  @SerializedName(SERIALIZED_NAME_CLOTH_COUNT)
  private Integer clothCount;

  public static final String SERIALIZED_NAME_CONSTRAINT_COUNT = "constraintCount";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_COUNT)
  private Integer constraintCount;

  public static final String SERIALIZED_NAME_CONSTRAINT_DEPTH = "constraintDepth";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_DEPTH)
  private Integer constraintDepth;

  public static final String SERIALIZED_NAME_CONTACT_COUNT = "contactCount";
  @SerializedName(SERIALIZED_NAME_CONTACT_COUNT)
  private Integer contactCount;

  public static final String SERIALIZED_NAME_CUSTOM_EXPRESSIONS = "customExpressions";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EXPRESSIONS)
  private Boolean customExpressions;

  public static final String SERIALIZED_NAME_CUSTOMIZE_ANIMATION_LAYERS = "customizeAnimationLayers";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZE_ANIMATION_LAYERS)
  private Boolean customizeAnimationLayers;

  public static final String SERIALIZED_NAME_ENABLE_EYE_LOOK = "enableEyeLook";
  @SerializedName(SERIALIZED_NAME_ENABLE_EYE_LOOK)
  private Boolean enableEyeLook;

  public static final String SERIALIZED_NAME_LIGHT_COUNT = "lightCount";
  @SerializedName(SERIALIZED_NAME_LIGHT_COUNT)
  private Integer lightCount;

  public static final String SERIALIZED_NAME_LINE_RENDERER_COUNT = "lineRendererCount";
  @SerializedName(SERIALIZED_NAME_LINE_RENDERER_COUNT)
  private Integer lineRendererCount;

  public static final String SERIALIZED_NAME_LIP_SYNC = "lipSync";
  @SerializedName(SERIALIZED_NAME_LIP_SYNC)
  private Integer lipSync;

  public static final String SERIALIZED_NAME_MATERIAL_COUNT = "materialCount";
  @SerializedName(SERIALIZED_NAME_MATERIAL_COUNT)
  private Integer materialCount;

  public static final String SERIALIZED_NAME_MATERIAL_SLOTS_USED = "materialSlotsUsed";
  @SerializedName(SERIALIZED_NAME_MATERIAL_SLOTS_USED)
  private Integer materialSlotsUsed;

  public static final String SERIALIZED_NAME_MESH_COUNT = "meshCount";
  @SerializedName(SERIALIZED_NAME_MESH_COUNT)
  private Integer meshCount;

  public static final String SERIALIZED_NAME_MESH_INDICES = "meshIndices";
  @SerializedName(SERIALIZED_NAME_MESH_INDICES)
  private Integer meshIndices;

  public static final String SERIALIZED_NAME_MESH_PARTICLE_MAX_POLYGONS = "meshParticleMaxPolygons";
  @SerializedName(SERIALIZED_NAME_MESH_PARTICLE_MAX_POLYGONS)
  private Integer meshParticleMaxPolygons;

  public static final String SERIALIZED_NAME_MESH_POLYGONS = "meshPolygons";
  @SerializedName(SERIALIZED_NAME_MESH_POLYGONS)
  private Integer meshPolygons;

  public static final String SERIALIZED_NAME_MESH_VERTICES = "meshVertices";
  @SerializedName(SERIALIZED_NAME_MESH_VERTICES)
  private Integer meshVertices;

  public static final String SERIALIZED_NAME_PARTICLE_COLLISION_ENABLED = "particleCollisionEnabled";
  @SerializedName(SERIALIZED_NAME_PARTICLE_COLLISION_ENABLED)
  private Boolean particleCollisionEnabled;

  public static final String SERIALIZED_NAME_PARTICLE_SYSTEM_COUNT = "particleSystemCount";
  @SerializedName(SERIALIZED_NAME_PARTICLE_SYSTEM_COUNT)
  private Integer particleSystemCount;

  public static final String SERIALIZED_NAME_PARTICLE_TRAILS_ENABLED = "particleTrailsEnabled";
  @SerializedName(SERIALIZED_NAME_PARTICLE_TRAILS_ENABLED)
  private Boolean particleTrailsEnabled;

  public static final String SERIALIZED_NAME_PHYS_BONE_COLLIDER_COUNT = "physBoneColliderCount";
  @SerializedName(SERIALIZED_NAME_PHYS_BONE_COLLIDER_COUNT)
  private Integer physBoneColliderCount;

  public static final String SERIALIZED_NAME_PHYS_BONE_COLLISION_CHECK_COUNT = "physBoneCollisionCheckCount";
  @SerializedName(SERIALIZED_NAME_PHYS_BONE_COLLISION_CHECK_COUNT)
  private Integer physBoneCollisionCheckCount;

  public static final String SERIALIZED_NAME_PHYS_BONE_COMPONENT_COUNT = "physBoneComponentCount";
  @SerializedName(SERIALIZED_NAME_PHYS_BONE_COMPONENT_COUNT)
  private Integer physBoneComponentCount;

  public static final String SERIALIZED_NAME_PHYS_BONE_TRANSFORM_COUNT = "physBoneTransformCount";
  @SerializedName(SERIALIZED_NAME_PHYS_BONE_TRANSFORM_COUNT)
  private Integer physBoneTransformCount;

  public static final String SERIALIZED_NAME_PHYSICS_COLLIDERS = "physicsColliders";
  @SerializedName(SERIALIZED_NAME_PHYSICS_COLLIDERS)
  private Integer physicsColliders;

  public static final String SERIALIZED_NAME_PHYSICS_RIGIDBODIES = "physicsRigidbodies";
  @SerializedName(SERIALIZED_NAME_PHYSICS_RIGIDBODIES)
  private Integer physicsRigidbodies;

  public static final String SERIALIZED_NAME_SKINNED_MESH_COUNT = "skinnedMeshCount";
  @SerializedName(SERIALIZED_NAME_SKINNED_MESH_COUNT)
  private Integer skinnedMeshCount;

  public static final String SERIALIZED_NAME_SKINNED_MESH_INDICES = "skinnedMeshIndices";
  @SerializedName(SERIALIZED_NAME_SKINNED_MESH_INDICES)
  private Integer skinnedMeshIndices;

  public static final String SERIALIZED_NAME_SKINNED_MESH_POLYGONS = "skinnedMeshPolygons";
  @SerializedName(SERIALIZED_NAME_SKINNED_MESH_POLYGONS)
  private Integer skinnedMeshPolygons;

  public static final String SERIALIZED_NAME_SKINNED_MESH_VERTICES = "skinnedMeshVertices";
  @SerializedName(SERIALIZED_NAME_SKINNED_MESH_VERTICES)
  private Integer skinnedMeshVertices;

  public static final String SERIALIZED_NAME_TOTAL_CLOTH_VERTICES = "totalClothVertices";
  @SerializedName(SERIALIZED_NAME_TOTAL_CLOTH_VERTICES)
  private Integer totalClothVertices;

  public static final String SERIALIZED_NAME_TOTAL_INDICES = "totalIndices";
  @SerializedName(SERIALIZED_NAME_TOTAL_INDICES)
  private Integer totalIndices;

  public static final String SERIALIZED_NAME_TOTAL_MAX_PARTICLES = "totalMaxParticles";
  @SerializedName(SERIALIZED_NAME_TOTAL_MAX_PARTICLES)
  private Integer totalMaxParticles;

  public static final String SERIALIZED_NAME_TOTAL_POLYGONS = "totalPolygons";
  @SerializedName(SERIALIZED_NAME_TOTAL_POLYGONS)
  private Integer totalPolygons;

  public static final String SERIALIZED_NAME_TOTAL_TEXTURE_USAGE = "totalTextureUsage";
  @SerializedName(SERIALIZED_NAME_TOTAL_TEXTURE_USAGE)
  private Integer totalTextureUsage;

  public static final String SERIALIZED_NAME_TOTAL_VERTICES = "totalVertices";
  @SerializedName(SERIALIZED_NAME_TOTAL_VERTICES)
  private Integer totalVertices;

  public static final String SERIALIZED_NAME_TRAIL_RENDERER_COUNT = "trailRendererCount";
  @SerializedName(SERIALIZED_NAME_TRAIL_RENDERER_COUNT)
  private Integer trailRendererCount;

  public static final String SERIALIZED_NAME_WRITE_DEFAULTS_USED = "writeDefaultsUsed";
  @SerializedName(SERIALIZED_NAME_WRITE_DEFAULTS_USED)
  private Boolean writeDefaultsUsed;

  public FileAnalysisAvatarStats() {
  }

  public FileAnalysisAvatarStats animatorCount(Integer animatorCount) {
    
    this.animatorCount = animatorCount;
    return this;
  }

   /**
   * Get animatorCount
   * @return animatorCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAnimatorCount() {
    return animatorCount;
  }


  public void setAnimatorCount(Integer animatorCount) {
    this.animatorCount = animatorCount;
  }


  public FileAnalysisAvatarStats audioSourceCount(Integer audioSourceCount) {
    
    this.audioSourceCount = audioSourceCount;
    return this;
  }

   /**
   * Get audioSourceCount
   * @return audioSourceCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAudioSourceCount() {
    return audioSourceCount;
  }


  public void setAudioSourceCount(Integer audioSourceCount) {
    this.audioSourceCount = audioSourceCount;
  }


  public FileAnalysisAvatarStats blendShapeCount(Integer blendShapeCount) {
    
    this.blendShapeCount = blendShapeCount;
    return this;
  }

   /**
   * Get blendShapeCount
   * @return blendShapeCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getBlendShapeCount() {
    return blendShapeCount;
  }


  public void setBlendShapeCount(Integer blendShapeCount) {
    this.blendShapeCount = blendShapeCount;
  }


  public FileAnalysisAvatarStats boneCount(Integer boneCount) {
    
    this.boneCount = boneCount;
    return this;
  }

   /**
   * Get boneCount
   * @return boneCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getBoneCount() {
    return boneCount;
  }


  public void setBoneCount(Integer boneCount) {
    this.boneCount = boneCount;
  }


  public FileAnalysisAvatarStats bounds(List<BigDecimal> bounds) {
    
    this.bounds = bounds;
    return this;
  }

  public FileAnalysisAvatarStats addBoundsItem(BigDecimal boundsItem) {
    this.bounds.add(boundsItem);
    return this;
  }

   /**
   * Get bounds
   * @return bounds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<BigDecimal> getBounds() {
    return bounds;
  }


  public void setBounds(List<BigDecimal> bounds) {
    this.bounds = bounds;
  }


  public FileAnalysisAvatarStats cameraCount(Integer cameraCount) {
    
    this.cameraCount = cameraCount;
    return this;
  }

   /**
   * Get cameraCount
   * @return cameraCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCameraCount() {
    return cameraCount;
  }


  public void setCameraCount(Integer cameraCount) {
    this.cameraCount = cameraCount;
  }


  public FileAnalysisAvatarStats clothCount(Integer clothCount) {
    
    this.clothCount = clothCount;
    return this;
  }

   /**
   * Get clothCount
   * @return clothCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getClothCount() {
    return clothCount;
  }


  public void setClothCount(Integer clothCount) {
    this.clothCount = clothCount;
  }


  public FileAnalysisAvatarStats constraintCount(Integer constraintCount) {
    
    this.constraintCount = constraintCount;
    return this;
  }

   /**
   * Get constraintCount
   * @return constraintCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getConstraintCount() {
    return constraintCount;
  }


  public void setConstraintCount(Integer constraintCount) {
    this.constraintCount = constraintCount;
  }


  public FileAnalysisAvatarStats constraintDepth(Integer constraintDepth) {
    
    this.constraintDepth = constraintDepth;
    return this;
  }

   /**
   * Get constraintDepth
   * @return constraintDepth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getConstraintDepth() {
    return constraintDepth;
  }


  public void setConstraintDepth(Integer constraintDepth) {
    this.constraintDepth = constraintDepth;
  }


  public FileAnalysisAvatarStats contactCount(Integer contactCount) {
    
    this.contactCount = contactCount;
    return this;
  }

   /**
   * Get contactCount
   * @return contactCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getContactCount() {
    return contactCount;
  }


  public void setContactCount(Integer contactCount) {
    this.contactCount = contactCount;
  }


  public FileAnalysisAvatarStats customExpressions(Boolean customExpressions) {
    
    this.customExpressions = customExpressions;
    return this;
  }

   /**
   * Get customExpressions
   * @return customExpressions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCustomExpressions() {
    return customExpressions;
  }


  public void setCustomExpressions(Boolean customExpressions) {
    this.customExpressions = customExpressions;
  }


  public FileAnalysisAvatarStats customizeAnimationLayers(Boolean customizeAnimationLayers) {
    
    this.customizeAnimationLayers = customizeAnimationLayers;
    return this;
  }

   /**
   * Get customizeAnimationLayers
   * @return customizeAnimationLayers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCustomizeAnimationLayers() {
    return customizeAnimationLayers;
  }


  public void setCustomizeAnimationLayers(Boolean customizeAnimationLayers) {
    this.customizeAnimationLayers = customizeAnimationLayers;
  }


  public FileAnalysisAvatarStats enableEyeLook(Boolean enableEyeLook) {
    
    this.enableEyeLook = enableEyeLook;
    return this;
  }

   /**
   * Get enableEyeLook
   * @return enableEyeLook
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getEnableEyeLook() {
    return enableEyeLook;
  }


  public void setEnableEyeLook(Boolean enableEyeLook) {
    this.enableEyeLook = enableEyeLook;
  }


  public FileAnalysisAvatarStats lightCount(Integer lightCount) {
    
    this.lightCount = lightCount;
    return this;
  }

   /**
   * Get lightCount
   * @return lightCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getLightCount() {
    return lightCount;
  }


  public void setLightCount(Integer lightCount) {
    this.lightCount = lightCount;
  }


  public FileAnalysisAvatarStats lineRendererCount(Integer lineRendererCount) {
    
    this.lineRendererCount = lineRendererCount;
    return this;
  }

   /**
   * Get lineRendererCount
   * @return lineRendererCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getLineRendererCount() {
    return lineRendererCount;
  }


  public void setLineRendererCount(Integer lineRendererCount) {
    this.lineRendererCount = lineRendererCount;
  }


  public FileAnalysisAvatarStats lipSync(Integer lipSync) {
    
    this.lipSync = lipSync;
    return this;
  }

   /**
   * Get lipSync
   * @return lipSync
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getLipSync() {
    return lipSync;
  }


  public void setLipSync(Integer lipSync) {
    this.lipSync = lipSync;
  }


  public FileAnalysisAvatarStats materialCount(Integer materialCount) {
    
    this.materialCount = materialCount;
    return this;
  }

   /**
   * Get materialCount
   * @return materialCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMaterialCount() {
    return materialCount;
  }


  public void setMaterialCount(Integer materialCount) {
    this.materialCount = materialCount;
  }


  public FileAnalysisAvatarStats materialSlotsUsed(Integer materialSlotsUsed) {
    
    this.materialSlotsUsed = materialSlotsUsed;
    return this;
  }

   /**
   * Get materialSlotsUsed
   * @return materialSlotsUsed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMaterialSlotsUsed() {
    return materialSlotsUsed;
  }


  public void setMaterialSlotsUsed(Integer materialSlotsUsed) {
    this.materialSlotsUsed = materialSlotsUsed;
  }


  public FileAnalysisAvatarStats meshCount(Integer meshCount) {
    
    this.meshCount = meshCount;
    return this;
  }

   /**
   * Get meshCount
   * @return meshCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMeshCount() {
    return meshCount;
  }


  public void setMeshCount(Integer meshCount) {
    this.meshCount = meshCount;
  }


  public FileAnalysisAvatarStats meshIndices(Integer meshIndices) {
    
    this.meshIndices = meshIndices;
    return this;
  }

   /**
   * Get meshIndices
   * @return meshIndices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMeshIndices() {
    return meshIndices;
  }


  public void setMeshIndices(Integer meshIndices) {
    this.meshIndices = meshIndices;
  }


  public FileAnalysisAvatarStats meshParticleMaxPolygons(Integer meshParticleMaxPolygons) {
    
    this.meshParticleMaxPolygons = meshParticleMaxPolygons;
    return this;
  }

   /**
   * Get meshParticleMaxPolygons
   * @return meshParticleMaxPolygons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMeshParticleMaxPolygons() {
    return meshParticleMaxPolygons;
  }


  public void setMeshParticleMaxPolygons(Integer meshParticleMaxPolygons) {
    this.meshParticleMaxPolygons = meshParticleMaxPolygons;
  }


  public FileAnalysisAvatarStats meshPolygons(Integer meshPolygons) {
    
    this.meshPolygons = meshPolygons;
    return this;
  }

   /**
   * Get meshPolygons
   * @return meshPolygons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMeshPolygons() {
    return meshPolygons;
  }


  public void setMeshPolygons(Integer meshPolygons) {
    this.meshPolygons = meshPolygons;
  }


  public FileAnalysisAvatarStats meshVertices(Integer meshVertices) {
    
    this.meshVertices = meshVertices;
    return this;
  }

   /**
   * Get meshVertices
   * @return meshVertices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMeshVertices() {
    return meshVertices;
  }


  public void setMeshVertices(Integer meshVertices) {
    this.meshVertices = meshVertices;
  }


  public FileAnalysisAvatarStats particleCollisionEnabled(Boolean particleCollisionEnabled) {
    
    this.particleCollisionEnabled = particleCollisionEnabled;
    return this;
  }

   /**
   * Get particleCollisionEnabled
   * @return particleCollisionEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getParticleCollisionEnabled() {
    return particleCollisionEnabled;
  }


  public void setParticleCollisionEnabled(Boolean particleCollisionEnabled) {
    this.particleCollisionEnabled = particleCollisionEnabled;
  }


  public FileAnalysisAvatarStats particleSystemCount(Integer particleSystemCount) {
    
    this.particleSystemCount = particleSystemCount;
    return this;
  }

   /**
   * Get particleSystemCount
   * @return particleSystemCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getParticleSystemCount() {
    return particleSystemCount;
  }


  public void setParticleSystemCount(Integer particleSystemCount) {
    this.particleSystemCount = particleSystemCount;
  }


  public FileAnalysisAvatarStats particleTrailsEnabled(Boolean particleTrailsEnabled) {
    
    this.particleTrailsEnabled = particleTrailsEnabled;
    return this;
  }

   /**
   * Get particleTrailsEnabled
   * @return particleTrailsEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getParticleTrailsEnabled() {
    return particleTrailsEnabled;
  }


  public void setParticleTrailsEnabled(Boolean particleTrailsEnabled) {
    this.particleTrailsEnabled = particleTrailsEnabled;
  }


  public FileAnalysisAvatarStats physBoneColliderCount(Integer physBoneColliderCount) {
    
    this.physBoneColliderCount = physBoneColliderCount;
    return this;
  }

   /**
   * Get physBoneColliderCount
   * @return physBoneColliderCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPhysBoneColliderCount() {
    return physBoneColliderCount;
  }


  public void setPhysBoneColliderCount(Integer physBoneColliderCount) {
    this.physBoneColliderCount = physBoneColliderCount;
  }


  public FileAnalysisAvatarStats physBoneCollisionCheckCount(Integer physBoneCollisionCheckCount) {
    
    this.physBoneCollisionCheckCount = physBoneCollisionCheckCount;
    return this;
  }

   /**
   * Get physBoneCollisionCheckCount
   * @return physBoneCollisionCheckCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPhysBoneCollisionCheckCount() {
    return physBoneCollisionCheckCount;
  }


  public void setPhysBoneCollisionCheckCount(Integer physBoneCollisionCheckCount) {
    this.physBoneCollisionCheckCount = physBoneCollisionCheckCount;
  }


  public FileAnalysisAvatarStats physBoneComponentCount(Integer physBoneComponentCount) {
    
    this.physBoneComponentCount = physBoneComponentCount;
    return this;
  }

   /**
   * Get physBoneComponentCount
   * @return physBoneComponentCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPhysBoneComponentCount() {
    return physBoneComponentCount;
  }


  public void setPhysBoneComponentCount(Integer physBoneComponentCount) {
    this.physBoneComponentCount = physBoneComponentCount;
  }


  public FileAnalysisAvatarStats physBoneTransformCount(Integer physBoneTransformCount) {
    
    this.physBoneTransformCount = physBoneTransformCount;
    return this;
  }

   /**
   * Get physBoneTransformCount
   * @return physBoneTransformCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPhysBoneTransformCount() {
    return physBoneTransformCount;
  }


  public void setPhysBoneTransformCount(Integer physBoneTransformCount) {
    this.physBoneTransformCount = physBoneTransformCount;
  }


  public FileAnalysisAvatarStats physicsColliders(Integer physicsColliders) {
    
    this.physicsColliders = physicsColliders;
    return this;
  }

   /**
   * Get physicsColliders
   * @return physicsColliders
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPhysicsColliders() {
    return physicsColliders;
  }


  public void setPhysicsColliders(Integer physicsColliders) {
    this.physicsColliders = physicsColliders;
  }


  public FileAnalysisAvatarStats physicsRigidbodies(Integer physicsRigidbodies) {
    
    this.physicsRigidbodies = physicsRigidbodies;
    return this;
  }

   /**
   * Get physicsRigidbodies
   * @return physicsRigidbodies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPhysicsRigidbodies() {
    return physicsRigidbodies;
  }


  public void setPhysicsRigidbodies(Integer physicsRigidbodies) {
    this.physicsRigidbodies = physicsRigidbodies;
  }


  public FileAnalysisAvatarStats skinnedMeshCount(Integer skinnedMeshCount) {
    
    this.skinnedMeshCount = skinnedMeshCount;
    return this;
  }

   /**
   * Get skinnedMeshCount
   * @return skinnedMeshCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getSkinnedMeshCount() {
    return skinnedMeshCount;
  }


  public void setSkinnedMeshCount(Integer skinnedMeshCount) {
    this.skinnedMeshCount = skinnedMeshCount;
  }


  public FileAnalysisAvatarStats skinnedMeshIndices(Integer skinnedMeshIndices) {
    
    this.skinnedMeshIndices = skinnedMeshIndices;
    return this;
  }

   /**
   * Get skinnedMeshIndices
   * @return skinnedMeshIndices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getSkinnedMeshIndices() {
    return skinnedMeshIndices;
  }


  public void setSkinnedMeshIndices(Integer skinnedMeshIndices) {
    this.skinnedMeshIndices = skinnedMeshIndices;
  }


  public FileAnalysisAvatarStats skinnedMeshPolygons(Integer skinnedMeshPolygons) {
    
    this.skinnedMeshPolygons = skinnedMeshPolygons;
    return this;
  }

   /**
   * Get skinnedMeshPolygons
   * @return skinnedMeshPolygons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getSkinnedMeshPolygons() {
    return skinnedMeshPolygons;
  }


  public void setSkinnedMeshPolygons(Integer skinnedMeshPolygons) {
    this.skinnedMeshPolygons = skinnedMeshPolygons;
  }


  public FileAnalysisAvatarStats skinnedMeshVertices(Integer skinnedMeshVertices) {
    
    this.skinnedMeshVertices = skinnedMeshVertices;
    return this;
  }

   /**
   * Get skinnedMeshVertices
   * @return skinnedMeshVertices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getSkinnedMeshVertices() {
    return skinnedMeshVertices;
  }


  public void setSkinnedMeshVertices(Integer skinnedMeshVertices) {
    this.skinnedMeshVertices = skinnedMeshVertices;
  }


  public FileAnalysisAvatarStats totalClothVertices(Integer totalClothVertices) {
    
    this.totalClothVertices = totalClothVertices;
    return this;
  }

   /**
   * Get totalClothVertices
   * @return totalClothVertices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalClothVertices() {
    return totalClothVertices;
  }


  public void setTotalClothVertices(Integer totalClothVertices) {
    this.totalClothVertices = totalClothVertices;
  }


  public FileAnalysisAvatarStats totalIndices(Integer totalIndices) {
    
    this.totalIndices = totalIndices;
    return this;
  }

   /**
   * Get totalIndices
   * @return totalIndices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalIndices() {
    return totalIndices;
  }


  public void setTotalIndices(Integer totalIndices) {
    this.totalIndices = totalIndices;
  }


  public FileAnalysisAvatarStats totalMaxParticles(Integer totalMaxParticles) {
    
    this.totalMaxParticles = totalMaxParticles;
    return this;
  }

   /**
   * Get totalMaxParticles
   * @return totalMaxParticles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalMaxParticles() {
    return totalMaxParticles;
  }


  public void setTotalMaxParticles(Integer totalMaxParticles) {
    this.totalMaxParticles = totalMaxParticles;
  }


  public FileAnalysisAvatarStats totalPolygons(Integer totalPolygons) {
    
    this.totalPolygons = totalPolygons;
    return this;
  }

   /**
   * Get totalPolygons
   * @return totalPolygons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalPolygons() {
    return totalPolygons;
  }


  public void setTotalPolygons(Integer totalPolygons) {
    this.totalPolygons = totalPolygons;
  }


  public FileAnalysisAvatarStats totalTextureUsage(Integer totalTextureUsage) {
    
    this.totalTextureUsage = totalTextureUsage;
    return this;
  }

   /**
   * Get totalTextureUsage
   * @return totalTextureUsage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalTextureUsage() {
    return totalTextureUsage;
  }


  public void setTotalTextureUsage(Integer totalTextureUsage) {
    this.totalTextureUsage = totalTextureUsage;
  }


  public FileAnalysisAvatarStats totalVertices(Integer totalVertices) {
    
    this.totalVertices = totalVertices;
    return this;
  }

   /**
   * Get totalVertices
   * @return totalVertices
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTotalVertices() {
    return totalVertices;
  }


  public void setTotalVertices(Integer totalVertices) {
    this.totalVertices = totalVertices;
  }


  public FileAnalysisAvatarStats trailRendererCount(Integer trailRendererCount) {
    
    this.trailRendererCount = trailRendererCount;
    return this;
  }

   /**
   * Get trailRendererCount
   * @return trailRendererCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTrailRendererCount() {
    return trailRendererCount;
  }


  public void setTrailRendererCount(Integer trailRendererCount) {
    this.trailRendererCount = trailRendererCount;
  }


  public FileAnalysisAvatarStats writeDefaultsUsed(Boolean writeDefaultsUsed) {
    
    this.writeDefaultsUsed = writeDefaultsUsed;
    return this;
  }

   /**
   * Get writeDefaultsUsed
   * @return writeDefaultsUsed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getWriteDefaultsUsed() {
    return writeDefaultsUsed;
  }


  public void setWriteDefaultsUsed(Boolean writeDefaultsUsed) {
    this.writeDefaultsUsed = writeDefaultsUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileAnalysisAvatarStats fileAnalysisAvatarStats = (FileAnalysisAvatarStats) o;
    return Objects.equals(this.animatorCount, fileAnalysisAvatarStats.animatorCount) &&
        Objects.equals(this.audioSourceCount, fileAnalysisAvatarStats.audioSourceCount) &&
        Objects.equals(this.blendShapeCount, fileAnalysisAvatarStats.blendShapeCount) &&
        Objects.equals(this.boneCount, fileAnalysisAvatarStats.boneCount) &&
        Objects.equals(this.bounds, fileAnalysisAvatarStats.bounds) &&
        Objects.equals(this.cameraCount, fileAnalysisAvatarStats.cameraCount) &&
        Objects.equals(this.clothCount, fileAnalysisAvatarStats.clothCount) &&
        Objects.equals(this.constraintCount, fileAnalysisAvatarStats.constraintCount) &&
        Objects.equals(this.constraintDepth, fileAnalysisAvatarStats.constraintDepth) &&
        Objects.equals(this.contactCount, fileAnalysisAvatarStats.contactCount) &&
        Objects.equals(this.customExpressions, fileAnalysisAvatarStats.customExpressions) &&
        Objects.equals(this.customizeAnimationLayers, fileAnalysisAvatarStats.customizeAnimationLayers) &&
        Objects.equals(this.enableEyeLook, fileAnalysisAvatarStats.enableEyeLook) &&
        Objects.equals(this.lightCount, fileAnalysisAvatarStats.lightCount) &&
        Objects.equals(this.lineRendererCount, fileAnalysisAvatarStats.lineRendererCount) &&
        Objects.equals(this.lipSync, fileAnalysisAvatarStats.lipSync) &&
        Objects.equals(this.materialCount, fileAnalysisAvatarStats.materialCount) &&
        Objects.equals(this.materialSlotsUsed, fileAnalysisAvatarStats.materialSlotsUsed) &&
        Objects.equals(this.meshCount, fileAnalysisAvatarStats.meshCount) &&
        Objects.equals(this.meshIndices, fileAnalysisAvatarStats.meshIndices) &&
        Objects.equals(this.meshParticleMaxPolygons, fileAnalysisAvatarStats.meshParticleMaxPolygons) &&
        Objects.equals(this.meshPolygons, fileAnalysisAvatarStats.meshPolygons) &&
        Objects.equals(this.meshVertices, fileAnalysisAvatarStats.meshVertices) &&
        Objects.equals(this.particleCollisionEnabled, fileAnalysisAvatarStats.particleCollisionEnabled) &&
        Objects.equals(this.particleSystemCount, fileAnalysisAvatarStats.particleSystemCount) &&
        Objects.equals(this.particleTrailsEnabled, fileAnalysisAvatarStats.particleTrailsEnabled) &&
        Objects.equals(this.physBoneColliderCount, fileAnalysisAvatarStats.physBoneColliderCount) &&
        Objects.equals(this.physBoneCollisionCheckCount, fileAnalysisAvatarStats.physBoneCollisionCheckCount) &&
        Objects.equals(this.physBoneComponentCount, fileAnalysisAvatarStats.physBoneComponentCount) &&
        Objects.equals(this.physBoneTransformCount, fileAnalysisAvatarStats.physBoneTransformCount) &&
        Objects.equals(this.physicsColliders, fileAnalysisAvatarStats.physicsColliders) &&
        Objects.equals(this.physicsRigidbodies, fileAnalysisAvatarStats.physicsRigidbodies) &&
        Objects.equals(this.skinnedMeshCount, fileAnalysisAvatarStats.skinnedMeshCount) &&
        Objects.equals(this.skinnedMeshIndices, fileAnalysisAvatarStats.skinnedMeshIndices) &&
        Objects.equals(this.skinnedMeshPolygons, fileAnalysisAvatarStats.skinnedMeshPolygons) &&
        Objects.equals(this.skinnedMeshVertices, fileAnalysisAvatarStats.skinnedMeshVertices) &&
        Objects.equals(this.totalClothVertices, fileAnalysisAvatarStats.totalClothVertices) &&
        Objects.equals(this.totalIndices, fileAnalysisAvatarStats.totalIndices) &&
        Objects.equals(this.totalMaxParticles, fileAnalysisAvatarStats.totalMaxParticles) &&
        Objects.equals(this.totalPolygons, fileAnalysisAvatarStats.totalPolygons) &&
        Objects.equals(this.totalTextureUsage, fileAnalysisAvatarStats.totalTextureUsage) &&
        Objects.equals(this.totalVertices, fileAnalysisAvatarStats.totalVertices) &&
        Objects.equals(this.trailRendererCount, fileAnalysisAvatarStats.trailRendererCount) &&
        Objects.equals(this.writeDefaultsUsed, fileAnalysisAvatarStats.writeDefaultsUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(animatorCount, audioSourceCount, blendShapeCount, boneCount, bounds, cameraCount, clothCount, constraintCount, constraintDepth, contactCount, customExpressions, customizeAnimationLayers, enableEyeLook, lightCount, lineRendererCount, lipSync, materialCount, materialSlotsUsed, meshCount, meshIndices, meshParticleMaxPolygons, meshPolygons, meshVertices, particleCollisionEnabled, particleSystemCount, particleTrailsEnabled, physBoneColliderCount, physBoneCollisionCheckCount, physBoneComponentCount, physBoneTransformCount, physicsColliders, physicsRigidbodies, skinnedMeshCount, skinnedMeshIndices, skinnedMeshPolygons, skinnedMeshVertices, totalClothVertices, totalIndices, totalMaxParticles, totalPolygons, totalTextureUsage, totalVertices, trailRendererCount, writeDefaultsUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileAnalysisAvatarStats {\n");
    sb.append("    animatorCount: ").append(toIndentedString(animatorCount)).append("\n");
    sb.append("    audioSourceCount: ").append(toIndentedString(audioSourceCount)).append("\n");
    sb.append("    blendShapeCount: ").append(toIndentedString(blendShapeCount)).append("\n");
    sb.append("    boneCount: ").append(toIndentedString(boneCount)).append("\n");
    sb.append("    bounds: ").append(toIndentedString(bounds)).append("\n");
    sb.append("    cameraCount: ").append(toIndentedString(cameraCount)).append("\n");
    sb.append("    clothCount: ").append(toIndentedString(clothCount)).append("\n");
    sb.append("    constraintCount: ").append(toIndentedString(constraintCount)).append("\n");
    sb.append("    constraintDepth: ").append(toIndentedString(constraintDepth)).append("\n");
    sb.append("    contactCount: ").append(toIndentedString(contactCount)).append("\n");
    sb.append("    customExpressions: ").append(toIndentedString(customExpressions)).append("\n");
    sb.append("    customizeAnimationLayers: ").append(toIndentedString(customizeAnimationLayers)).append("\n");
    sb.append("    enableEyeLook: ").append(toIndentedString(enableEyeLook)).append("\n");
    sb.append("    lightCount: ").append(toIndentedString(lightCount)).append("\n");
    sb.append("    lineRendererCount: ").append(toIndentedString(lineRendererCount)).append("\n");
    sb.append("    lipSync: ").append(toIndentedString(lipSync)).append("\n");
    sb.append("    materialCount: ").append(toIndentedString(materialCount)).append("\n");
    sb.append("    materialSlotsUsed: ").append(toIndentedString(materialSlotsUsed)).append("\n");
    sb.append("    meshCount: ").append(toIndentedString(meshCount)).append("\n");
    sb.append("    meshIndices: ").append(toIndentedString(meshIndices)).append("\n");
    sb.append("    meshParticleMaxPolygons: ").append(toIndentedString(meshParticleMaxPolygons)).append("\n");
    sb.append("    meshPolygons: ").append(toIndentedString(meshPolygons)).append("\n");
    sb.append("    meshVertices: ").append(toIndentedString(meshVertices)).append("\n");
    sb.append("    particleCollisionEnabled: ").append(toIndentedString(particleCollisionEnabled)).append("\n");
    sb.append("    particleSystemCount: ").append(toIndentedString(particleSystemCount)).append("\n");
    sb.append("    particleTrailsEnabled: ").append(toIndentedString(particleTrailsEnabled)).append("\n");
    sb.append("    physBoneColliderCount: ").append(toIndentedString(physBoneColliderCount)).append("\n");
    sb.append("    physBoneCollisionCheckCount: ").append(toIndentedString(physBoneCollisionCheckCount)).append("\n");
    sb.append("    physBoneComponentCount: ").append(toIndentedString(physBoneComponentCount)).append("\n");
    sb.append("    physBoneTransformCount: ").append(toIndentedString(physBoneTransformCount)).append("\n");
    sb.append("    physicsColliders: ").append(toIndentedString(physicsColliders)).append("\n");
    sb.append("    physicsRigidbodies: ").append(toIndentedString(physicsRigidbodies)).append("\n");
    sb.append("    skinnedMeshCount: ").append(toIndentedString(skinnedMeshCount)).append("\n");
    sb.append("    skinnedMeshIndices: ").append(toIndentedString(skinnedMeshIndices)).append("\n");
    sb.append("    skinnedMeshPolygons: ").append(toIndentedString(skinnedMeshPolygons)).append("\n");
    sb.append("    skinnedMeshVertices: ").append(toIndentedString(skinnedMeshVertices)).append("\n");
    sb.append("    totalClothVertices: ").append(toIndentedString(totalClothVertices)).append("\n");
    sb.append("    totalIndices: ").append(toIndentedString(totalIndices)).append("\n");
    sb.append("    totalMaxParticles: ").append(toIndentedString(totalMaxParticles)).append("\n");
    sb.append("    totalPolygons: ").append(toIndentedString(totalPolygons)).append("\n");
    sb.append("    totalTextureUsage: ").append(toIndentedString(totalTextureUsage)).append("\n");
    sb.append("    totalVertices: ").append(toIndentedString(totalVertices)).append("\n");
    sb.append("    trailRendererCount: ").append(toIndentedString(trailRendererCount)).append("\n");
    sb.append("    writeDefaultsUsed: ").append(toIndentedString(writeDefaultsUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("animatorCount");
    openapiFields.add("audioSourceCount");
    openapiFields.add("blendShapeCount");
    openapiFields.add("boneCount");
    openapiFields.add("bounds");
    openapiFields.add("cameraCount");
    openapiFields.add("clothCount");
    openapiFields.add("constraintCount");
    openapiFields.add("constraintDepth");
    openapiFields.add("contactCount");
    openapiFields.add("customExpressions");
    openapiFields.add("customizeAnimationLayers");
    openapiFields.add("enableEyeLook");
    openapiFields.add("lightCount");
    openapiFields.add("lineRendererCount");
    openapiFields.add("lipSync");
    openapiFields.add("materialCount");
    openapiFields.add("materialSlotsUsed");
    openapiFields.add("meshCount");
    openapiFields.add("meshIndices");
    openapiFields.add("meshParticleMaxPolygons");
    openapiFields.add("meshPolygons");
    openapiFields.add("meshVertices");
    openapiFields.add("particleCollisionEnabled");
    openapiFields.add("particleSystemCount");
    openapiFields.add("particleTrailsEnabled");
    openapiFields.add("physBoneColliderCount");
    openapiFields.add("physBoneCollisionCheckCount");
    openapiFields.add("physBoneComponentCount");
    openapiFields.add("physBoneTransformCount");
    openapiFields.add("physicsColliders");
    openapiFields.add("physicsRigidbodies");
    openapiFields.add("skinnedMeshCount");
    openapiFields.add("skinnedMeshIndices");
    openapiFields.add("skinnedMeshPolygons");
    openapiFields.add("skinnedMeshVertices");
    openapiFields.add("totalClothVertices");
    openapiFields.add("totalIndices");
    openapiFields.add("totalMaxParticles");
    openapiFields.add("totalPolygons");
    openapiFields.add("totalTextureUsage");
    openapiFields.add("totalVertices");
    openapiFields.add("trailRendererCount");
    openapiFields.add("writeDefaultsUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("animatorCount");
    openapiRequiredFields.add("audioSourceCount");
    openapiRequiredFields.add("blendShapeCount");
    openapiRequiredFields.add("boneCount");
    openapiRequiredFields.add("bounds");
    openapiRequiredFields.add("clothCount");
    openapiRequiredFields.add("constraintCount");
    openapiRequiredFields.add("constraintDepth");
    openapiRequiredFields.add("contactCount");
    openapiRequiredFields.add("customExpressions");
    openapiRequiredFields.add("customizeAnimationLayers");
    openapiRequiredFields.add("enableEyeLook");
    openapiRequiredFields.add("lightCount");
    openapiRequiredFields.add("lineRendererCount");
    openapiRequiredFields.add("lipSync");
    openapiRequiredFields.add("materialCount");
    openapiRequiredFields.add("materialSlotsUsed");
    openapiRequiredFields.add("meshCount");
    openapiRequiredFields.add("meshIndices");
    openapiRequiredFields.add("meshParticleMaxPolygons");
    openapiRequiredFields.add("meshPolygons");
    openapiRequiredFields.add("meshVertices");
    openapiRequiredFields.add("particleCollisionEnabled");
    openapiRequiredFields.add("particleSystemCount");
    openapiRequiredFields.add("particleTrailsEnabled");
    openapiRequiredFields.add("physBoneColliderCount");
    openapiRequiredFields.add("physBoneCollisionCheckCount");
    openapiRequiredFields.add("physBoneComponentCount");
    openapiRequiredFields.add("physBoneTransformCount");
    openapiRequiredFields.add("physicsColliders");
    openapiRequiredFields.add("physicsRigidbodies");
    openapiRequiredFields.add("skinnedMeshCount");
    openapiRequiredFields.add("skinnedMeshIndices");
    openapiRequiredFields.add("skinnedMeshPolygons");
    openapiRequiredFields.add("skinnedMeshVertices");
    openapiRequiredFields.add("totalClothVertices");
    openapiRequiredFields.add("totalIndices");
    openapiRequiredFields.add("totalMaxParticles");
    openapiRequiredFields.add("totalPolygons");
    openapiRequiredFields.add("totalTextureUsage");
    openapiRequiredFields.add("totalVertices");
    openapiRequiredFields.add("trailRendererCount");
    openapiRequiredFields.add("writeDefaultsUsed");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileAnalysisAvatarStats
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FileAnalysisAvatarStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileAnalysisAvatarStats is not found in the empty JSON string", FileAnalysisAvatarStats.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FileAnalysisAvatarStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileAnalysisAvatarStats` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileAnalysisAvatarStats.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("bounds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bounds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounds` to be an array in the JSON string but got `%s`", jsonObj.get("bounds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileAnalysisAvatarStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileAnalysisAvatarStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileAnalysisAvatarStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileAnalysisAvatarStats.class));

       return (TypeAdapter<T>) new TypeAdapter<FileAnalysisAvatarStats>() {
           @Override
           public void write(JsonWriter out, FileAnalysisAvatarStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileAnalysisAvatarStats read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileAnalysisAvatarStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileAnalysisAvatarStats
  * @throws IOException if the JSON string is invalid with respect to FileAnalysisAvatarStats
  */
  public static FileAnalysisAvatarStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileAnalysisAvatarStats.class);
  }

 /**
  * Convert an instance of FileAnalysisAvatarStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

