/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.0
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.FavoriteGroupLimits;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * FavoriteLimits
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FavoriteLimits {
  public static final String SERIALIZED_NAME_DEFAULT_MAX_FAVORITE_GROUPS = "defaultMaxFavoriteGroups";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MAX_FAVORITE_GROUPS)
  private Integer defaultMaxFavoriteGroups;

  public static final String SERIALIZED_NAME_DEFAULT_MAX_FAVORITES_PER_GROUP = "defaultMaxFavoritesPerGroup";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MAX_FAVORITES_PER_GROUP)
  private Integer defaultMaxFavoritesPerGroup;

  public static final String SERIALIZED_NAME_MAX_FAVORITE_GROUPS = "maxFavoriteGroups";
  @SerializedName(SERIALIZED_NAME_MAX_FAVORITE_GROUPS)
  private FavoriteGroupLimits maxFavoriteGroups;

  public static final String SERIALIZED_NAME_MAX_FAVORITES_PER_GROUP = "maxFavoritesPerGroup";
  @SerializedName(SERIALIZED_NAME_MAX_FAVORITES_PER_GROUP)
  private FavoriteGroupLimits maxFavoritesPerGroup;

  public FavoriteLimits() {
  }

  public FavoriteLimits defaultMaxFavoriteGroups(Integer defaultMaxFavoriteGroups) {
    
    this.defaultMaxFavoriteGroups = defaultMaxFavoriteGroups;
    return this;
  }

   /**
   * Get defaultMaxFavoriteGroups
   * @return defaultMaxFavoriteGroups
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDefaultMaxFavoriteGroups() {
    return defaultMaxFavoriteGroups;
  }


  public void setDefaultMaxFavoriteGroups(Integer defaultMaxFavoriteGroups) {
    this.defaultMaxFavoriteGroups = defaultMaxFavoriteGroups;
  }


  public FavoriteLimits defaultMaxFavoritesPerGroup(Integer defaultMaxFavoritesPerGroup) {
    
    this.defaultMaxFavoritesPerGroup = defaultMaxFavoritesPerGroup;
    return this;
  }

   /**
   * Get defaultMaxFavoritesPerGroup
   * @return defaultMaxFavoritesPerGroup
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getDefaultMaxFavoritesPerGroup() {
    return defaultMaxFavoritesPerGroup;
  }


  public void setDefaultMaxFavoritesPerGroup(Integer defaultMaxFavoritesPerGroup) {
    this.defaultMaxFavoritesPerGroup = defaultMaxFavoritesPerGroup;
  }


  public FavoriteLimits maxFavoriteGroups(FavoriteGroupLimits maxFavoriteGroups) {
    
    this.maxFavoriteGroups = maxFavoriteGroups;
    return this;
  }

   /**
   * Get maxFavoriteGroups
   * @return maxFavoriteGroups
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FavoriteGroupLimits getMaxFavoriteGroups() {
    return maxFavoriteGroups;
  }


  public void setMaxFavoriteGroups(FavoriteGroupLimits maxFavoriteGroups) {
    this.maxFavoriteGroups = maxFavoriteGroups;
  }


  public FavoriteLimits maxFavoritesPerGroup(FavoriteGroupLimits maxFavoritesPerGroup) {
    
    this.maxFavoritesPerGroup = maxFavoritesPerGroup;
    return this;
  }

   /**
   * Get maxFavoritesPerGroup
   * @return maxFavoritesPerGroup
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FavoriteGroupLimits getMaxFavoritesPerGroup() {
    return maxFavoritesPerGroup;
  }


  public void setMaxFavoritesPerGroup(FavoriteGroupLimits maxFavoritesPerGroup) {
    this.maxFavoritesPerGroup = maxFavoritesPerGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FavoriteLimits favoriteLimits = (FavoriteLimits) o;
    return Objects.equals(this.defaultMaxFavoriteGroups, favoriteLimits.defaultMaxFavoriteGroups) &&
        Objects.equals(this.defaultMaxFavoritesPerGroup, favoriteLimits.defaultMaxFavoritesPerGroup) &&
        Objects.equals(this.maxFavoriteGroups, favoriteLimits.maxFavoriteGroups) &&
        Objects.equals(this.maxFavoritesPerGroup, favoriteLimits.maxFavoritesPerGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultMaxFavoriteGroups, defaultMaxFavoritesPerGroup, maxFavoriteGroups, maxFavoritesPerGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FavoriteLimits {\n");
    sb.append("    defaultMaxFavoriteGroups: ").append(toIndentedString(defaultMaxFavoriteGroups)).append("\n");
    sb.append("    defaultMaxFavoritesPerGroup: ").append(toIndentedString(defaultMaxFavoritesPerGroup)).append("\n");
    sb.append("    maxFavoriteGroups: ").append(toIndentedString(maxFavoriteGroups)).append("\n");
    sb.append("    maxFavoritesPerGroup: ").append(toIndentedString(maxFavoritesPerGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultMaxFavoriteGroups");
    openapiFields.add("defaultMaxFavoritesPerGroup");
    openapiFields.add("maxFavoriteGroups");
    openapiFields.add("maxFavoritesPerGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultMaxFavoriteGroups");
    openapiRequiredFields.add("defaultMaxFavoritesPerGroup");
    openapiRequiredFields.add("maxFavoriteGroups");
    openapiRequiredFields.add("maxFavoritesPerGroup");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FavoriteLimits
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FavoriteLimits.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FavoriteLimits is not found in the empty JSON string", FavoriteLimits.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FavoriteLimits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FavoriteLimits` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FavoriteLimits.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `maxFavoriteGroups`
      FavoriteGroupLimits.validateJsonObject(jsonObj.getAsJsonObject("maxFavoriteGroups"));
      // validate the required field `maxFavoritesPerGroup`
      FavoriteGroupLimits.validateJsonObject(jsonObj.getAsJsonObject("maxFavoritesPerGroup"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FavoriteLimits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FavoriteLimits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FavoriteLimits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FavoriteLimits.class));

       return (TypeAdapter<T>) new TypeAdapter<FavoriteLimits>() {
           @Override
           public void write(JsonWriter out, FavoriteLimits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FavoriteLimits read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FavoriteLimits given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FavoriteLimits
  * @throws IOException if the JSON string is invalid with respect to FavoriteLimits
  */
  public static FavoriteLimits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FavoriteLimits.class);
  }

 /**
  * Convert an instance of FavoriteLimits to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

