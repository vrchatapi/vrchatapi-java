/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * AvatarPerformance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AvatarPerformance {
  public static final String SERIALIZED_NAME_ANDROID = "android";
  @SerializedName(SERIALIZED_NAME_ANDROID)
  private String android;

  public static final String SERIALIZED_NAME_ANDROID_SORT = "android-sort";
  @SerializedName(SERIALIZED_NAME_ANDROID_SORT)
  private Integer androidSort;

  public static final String SERIALIZED_NAME_IOS = "ios";
  @SerializedName(SERIALIZED_NAME_IOS)
  private String ios;

  public static final String SERIALIZED_NAME_IOS_SORT = "ios-sort";
  @SerializedName(SERIALIZED_NAME_IOS_SORT)
  private Integer iosSort;

  public static final String SERIALIZED_NAME_STANDALONEWINDOWS = "standalonewindows";
  @SerializedName(SERIALIZED_NAME_STANDALONEWINDOWS)
  private String standalonewindows;

  public static final String SERIALIZED_NAME_STANDALONEWINDOWS_SORT = "standalonewindows-sort";
  @SerializedName(SERIALIZED_NAME_STANDALONEWINDOWS_SORT)
  private Integer standalonewindowsSort;

  public AvatarPerformance() {
  }

  public AvatarPerformance android(String android) {
    
    this.android = android;
    return this;
  }

   /**
   * Get android
   * @return android
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAndroid() {
    return android;
  }


  public void setAndroid(String android) {
    this.android = android;
  }


  public AvatarPerformance androidSort(Integer androidSort) {
    
    this.androidSort = androidSort;
    return this;
  }

   /**
   * Get androidSort
   * @return androidSort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAndroidSort() {
    return androidSort;
  }


  public void setAndroidSort(Integer androidSort) {
    this.androidSort = androidSort;
  }


  public AvatarPerformance ios(String ios) {
    
    this.ios = ios;
    return this;
  }

   /**
   * Get ios
   * @return ios
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIos() {
    return ios;
  }


  public void setIos(String ios) {
    this.ios = ios;
  }


  public AvatarPerformance iosSort(Integer iosSort) {
    
    this.iosSort = iosSort;
    return this;
  }

   /**
   * Get iosSort
   * @return iosSort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getIosSort() {
    return iosSort;
  }


  public void setIosSort(Integer iosSort) {
    this.iosSort = iosSort;
  }


  public AvatarPerformance standalonewindows(String standalonewindows) {
    
    this.standalonewindows = standalonewindows;
    return this;
  }

   /**
   * Get standalonewindows
   * @return standalonewindows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStandalonewindows() {
    return standalonewindows;
  }


  public void setStandalonewindows(String standalonewindows) {
    this.standalonewindows = standalonewindows;
  }


  public AvatarPerformance standalonewindowsSort(Integer standalonewindowsSort) {
    
    this.standalonewindowsSort = standalonewindowsSort;
    return this;
  }

   /**
   * Get standalonewindowsSort
   * @return standalonewindowsSort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStandalonewindowsSort() {
    return standalonewindowsSort;
  }


  public void setStandalonewindowsSort(Integer standalonewindowsSort) {
    this.standalonewindowsSort = standalonewindowsSort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvatarPerformance avatarPerformance = (AvatarPerformance) o;
    return Objects.equals(this.android, avatarPerformance.android) &&
        Objects.equals(this.androidSort, avatarPerformance.androidSort) &&
        Objects.equals(this.ios, avatarPerformance.ios) &&
        Objects.equals(this.iosSort, avatarPerformance.iosSort) &&
        Objects.equals(this.standalonewindows, avatarPerformance.standalonewindows) &&
        Objects.equals(this.standalonewindowsSort, avatarPerformance.standalonewindowsSort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(android, androidSort, ios, iosSort, standalonewindows, standalonewindowsSort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvatarPerformance {\n");
    sb.append("    android: ").append(toIndentedString(android)).append("\n");
    sb.append("    androidSort: ").append(toIndentedString(androidSort)).append("\n");
    sb.append("    ios: ").append(toIndentedString(ios)).append("\n");
    sb.append("    iosSort: ").append(toIndentedString(iosSort)).append("\n");
    sb.append("    standalonewindows: ").append(toIndentedString(standalonewindows)).append("\n");
    sb.append("    standalonewindowsSort: ").append(toIndentedString(standalonewindowsSort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("android");
    openapiFields.add("android-sort");
    openapiFields.add("ios");
    openapiFields.add("ios-sort");
    openapiFields.add("standalonewindows");
    openapiFields.add("standalonewindows-sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AvatarPerformance
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AvatarPerformance.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvatarPerformance is not found in the empty JSON string", AvatarPerformance.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AvatarPerformance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvatarPerformance` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("android") != null && !jsonObj.get("android").isJsonNull()) && !jsonObj.get("android").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `android` to be a primitive type in the JSON string but got `%s`", jsonObj.get("android").toString()));
      }
      if ((jsonObj.get("ios") != null && !jsonObj.get("ios").isJsonNull()) && !jsonObj.get("ios").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ios` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ios").toString()));
      }
      if ((jsonObj.get("standalonewindows") != null && !jsonObj.get("standalonewindows").isJsonNull()) && !jsonObj.get("standalonewindows").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standalonewindows` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standalonewindows").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvatarPerformance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvatarPerformance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvatarPerformance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvatarPerformance.class));

       return (TypeAdapter<T>) new TypeAdapter<AvatarPerformance>() {
           @Override
           public void write(JsonWriter out, AvatarPerformance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvatarPerformance read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvatarPerformance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvatarPerformance
  * @throws IOException if the JSON string is invalid with respect to AvatarPerformance
  */
  public static AvatarPerformance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvatarPerformance.class);
  }

 /**
  * Convert an instance of AvatarPerformance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

