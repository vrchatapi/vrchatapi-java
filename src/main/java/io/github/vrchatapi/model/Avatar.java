/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.19.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.vrchatapi.model.AvatarPublishedListingsInner;
import io.github.vrchatapi.model.AvatarStyles;
import io.github.vrchatapi.model.AvatarUnityPackageUrlObject;
import io.github.vrchatapi.model.ReleaseStatus;
import io.github.vrchatapi.model.UnityPackage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Avatar {
  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENTS = "acknowledgements";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENTS)
  private String acknowledgements;

  public static final String SERIALIZED_NAME_ASSET_URL = "assetUrl";
  @SerializedName(SERIALIZED_NAME_ASSET_URL)
  private String assetUrl;

  public static final String SERIALIZED_NAME_ASSET_URL_OBJECT = "assetUrlObject";
  @SerializedName(SERIALIZED_NAME_ASSET_URL_OBJECT)
  private Object assetUrlObject;

  public static final String SERIALIZED_NAME_AUTHOR_ID = "authorId";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ID)
  private String authorId;

  public static final String SERIALIZED_NAME_AUTHOR_NAME = "authorName";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FEATURED = "featured";
  @SerializedName(SERIALIZED_NAME_FEATURED)
  private Boolean featured = false;

  public static final String SERIALIZED_NAME_HIGHEST_PRICE = "highestPrice";
  @SerializedName(SERIALIZED_NAME_HIGHEST_PRICE)
  private Integer highestPrice;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_LOCK = "lock";
  @SerializedName(SERIALIZED_NAME_LOCK)
  private Boolean lock;

  public static final String SERIALIZED_NAME_LOWEST_PRICE = "lowestPrice";
  @SerializedName(SERIALIZED_NAME_LOWEST_PRICE)
  private Integer lowestPrice;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PUBLISHED_LISTINGS = "publishedListings";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_LISTINGS)
  private List<AvatarPublishedListingsInner> publishedListings = null;

  public static final String SERIALIZED_NAME_RELEASE_STATUS = "releaseStatus";
  @SerializedName(SERIALIZED_NAME_RELEASE_STATUS)
  private ReleaseStatus releaseStatus = ReleaseStatus.PUBLIC;

  public static final String SERIALIZED_NAME_SEARCHABLE = "searchable";
  @SerializedName(SERIALIZED_NAME_SEARCHABLE)
  private Boolean searchable = false;

  public static final String SERIALIZED_NAME_STYLES = "styles";
  @SerializedName(SERIALIZED_NAME_STYLES)
  private AvatarStyles styles;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMBNAIL_IMAGE_URL = "thumbnailImageUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_IMAGE_URL)
  private String thumbnailImageUrl;

  public static final String SERIALIZED_NAME_UNITY_PACKAGE_URL = "unityPackageUrl";
  @SerializedName(SERIALIZED_NAME_UNITY_PACKAGE_URL)
  private String unityPackageUrl;

  public static final String SERIALIZED_NAME_UNITY_PACKAGE_URL_OBJECT = "unityPackageUrlObject";
  @SerializedName(SERIALIZED_NAME_UNITY_PACKAGE_URL_OBJECT)
  private AvatarUnityPackageUrlObject unityPackageUrlObject;

  public static final String SERIALIZED_NAME_UNITY_PACKAGES = "unityPackages";
  @SerializedName(SERIALIZED_NAME_UNITY_PACKAGES)
  private Set<UnityPackage> unityPackages = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version = 0;

  public Avatar() {
  }

  public Avatar acknowledgements(String acknowledgements) {
    
    this.acknowledgements = acknowledgements;
    return this;
  }

   /**
   * Get acknowledgements
   * @return acknowledgements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAcknowledgements() {
    return acknowledgements;
  }


  public void setAcknowledgements(String acknowledgements) {
    this.acknowledgements = acknowledgements;
  }


  public Avatar assetUrl(String assetUrl) {
    
    this.assetUrl = assetUrl;
    return this;
  }

   /**
   * Not present from general search &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;.
   * @return assetUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not present from general search `/avatars`, only on specific requests `/avatars/{avatarId}`.")

  public String getAssetUrl() {
    return assetUrl;
  }


  public void setAssetUrl(String assetUrl) {
    this.assetUrl = assetUrl;
  }


  public Avatar assetUrlObject(Object assetUrlObject) {
    
    this.assetUrlObject = assetUrlObject;
    return this;
  }

   /**
   * Not present from general search &#x60;/avatars&#x60;, only on specific requests &#x60;/avatars/{avatarId}&#x60;. **Deprecation:** &#x60;Object&#x60; has unknown usage/fields, and is always empty. Use normal &#x60;Url&#x60; field instead.
   * @return assetUrlObject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not present from general search `/avatars`, only on specific requests `/avatars/{avatarId}`. **Deprecation:** `Object` has unknown usage/fields, and is always empty. Use normal `Url` field instead.")

  public Object getAssetUrlObject() {
    return assetUrlObject;
  }


  public void setAssetUrlObject(Object assetUrlObject) {
    this.assetUrlObject = assetUrlObject;
  }


  public Avatar authorId(String authorId) {
    
    this.authorId = authorId;
    return this;
  }

   /**
   * A users unique ID, usually in the form of &#x60;usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469&#x60;. Legacy players can have old IDs in the form of &#x60;8JoV9XEdpo&#x60;. The ID can never be changed.
   * @return authorId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469", required = true, value = "A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.")

  public String getAuthorId() {
    return authorId;
  }


  public void setAuthorId(String authorId) {
    this.authorId = authorId;
  }


  public Avatar authorName(String authorName) {
    
    this.authorName = authorName;
    return this;
  }

   /**
   * Get authorName
   * @return authorName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAuthorName() {
    return authorName;
  }


  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }


  public Avatar createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Avatar description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Avatar featured(Boolean featured) {
    
    this.featured = featured;
    return this;
  }

   /**
   * Get featured
   * @return featured
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getFeatured() {
    return featured;
  }


  public void setFeatured(Boolean featured) {
    this.featured = featured;
  }


  public Avatar highestPrice(Integer highestPrice) {
    
    this.highestPrice = highestPrice;
    return this;
  }

   /**
   * Get highestPrice
   * @return highestPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getHighestPrice() {
    return highestPrice;
  }


  public void setHighestPrice(Integer highestPrice) {
    this.highestPrice = highestPrice;
  }


  public Avatar id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "avtr_912d66a4-4714-43b8-8407-7de2cafbf55b", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Avatar imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Get imageUrl
   * @return imageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public Avatar lock(Boolean lock) {
    
    this.lock = lock;
    return this;
  }

   /**
   * Get lock
   * @return lock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLock() {
    return lock;
  }


  public void setLock(Boolean lock) {
    this.lock = lock;
  }


  public Avatar lowestPrice(Integer lowestPrice) {
    
    this.lowestPrice = lowestPrice;
    return this;
  }

   /**
   * Get lowestPrice
   * @return lowestPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLowestPrice() {
    return lowestPrice;
  }


  public void setLowestPrice(Integer lowestPrice) {
    this.lowestPrice = lowestPrice;
  }


  public Avatar name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Avatar productId(String productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Get productId
   * @return productId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Avatar publishedListings(List<AvatarPublishedListingsInner> publishedListings) {
    
    this.publishedListings = publishedListings;
    return this;
  }

  public Avatar addPublishedListingsItem(AvatarPublishedListingsInner publishedListingsItem) {
    if (this.publishedListings == null) {
      this.publishedListings = new ArrayList<>();
    }
    this.publishedListings.add(publishedListingsItem);
    return this;
  }

   /**
   * Get publishedListings
   * @return publishedListings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AvatarPublishedListingsInner> getPublishedListings() {
    return publishedListings;
  }


  public void setPublishedListings(List<AvatarPublishedListingsInner> publishedListings) {
    this.publishedListings = publishedListings;
  }


  public Avatar releaseStatus(ReleaseStatus releaseStatus) {
    
    this.releaseStatus = releaseStatus;
    return this;
  }

   /**
   * Get releaseStatus
   * @return releaseStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ReleaseStatus getReleaseStatus() {
    return releaseStatus;
  }


  public void setReleaseStatus(ReleaseStatus releaseStatus) {
    this.releaseStatus = releaseStatus;
  }


  public Avatar searchable(Boolean searchable) {
    
    this.searchable = searchable;
    return this;
  }

   /**
   * Get searchable
   * @return searchable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSearchable() {
    return searchable;
  }


  public void setSearchable(Boolean searchable) {
    this.searchable = searchable;
  }


  public Avatar styles(AvatarStyles styles) {
    
    this.styles = styles;
    return this;
  }

   /**
   * Get styles
   * @return styles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AvatarStyles getStyles() {
    return styles;
  }


  public void setStyles(AvatarStyles styles) {
    this.styles = styles;
  }


  public Avatar tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public Avatar addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   *  
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = " ")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Avatar thumbnailImageUrl(String thumbnailImageUrl) {
    
    this.thumbnailImageUrl = thumbnailImageUrl;
    return this;
  }

   /**
   * Get thumbnailImageUrl
   * @return thumbnailImageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getThumbnailImageUrl() {
    return thumbnailImageUrl;
  }


  public void setThumbnailImageUrl(String thumbnailImageUrl) {
    this.thumbnailImageUrl = thumbnailImageUrl;
  }


  public Avatar unityPackageUrl(String unityPackageUrl) {
    
    this.unityPackageUrl = unityPackageUrl;
    return this;
  }

   /**
   * Get unityPackageUrl
   * @return unityPackageUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUnityPackageUrl() {
    return unityPackageUrl;
  }


  public void setUnityPackageUrl(String unityPackageUrl) {
    this.unityPackageUrl = unityPackageUrl;
  }


  public Avatar unityPackageUrlObject(AvatarUnityPackageUrlObject unityPackageUrlObject) {
    
    this.unityPackageUrlObject = unityPackageUrlObject;
    return this;
  }

   /**
   * Get unityPackageUrlObject
   * @return unityPackageUrlObject
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AvatarUnityPackageUrlObject getUnityPackageUrlObject() {
    return unityPackageUrlObject;
  }


  public void setUnityPackageUrlObject(AvatarUnityPackageUrlObject unityPackageUrlObject) {
    this.unityPackageUrlObject = unityPackageUrlObject;
  }


  public Avatar unityPackages(Set<UnityPackage> unityPackages) {
    
    this.unityPackages = unityPackages;
    return this;
  }

  public Avatar addUnityPackagesItem(UnityPackage unityPackagesItem) {
    this.unityPackages.add(unityPackagesItem);
    return this;
  }

   /**
   * Get unityPackages
   * @return unityPackages
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<UnityPackage> getUnityPackages() {
    return unityPackages;
  }


  public void setUnityPackages(Set<UnityPackage> unityPackages) {
    this.unityPackages = unityPackages;
  }


  public Avatar updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Avatar version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * minimum: 0
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "68", required = true, value = "")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Avatar avatar = (Avatar) o;
    return Objects.equals(this.acknowledgements, avatar.acknowledgements) &&
        Objects.equals(this.assetUrl, avatar.assetUrl) &&
        Objects.equals(this.assetUrlObject, avatar.assetUrlObject) &&
        Objects.equals(this.authorId, avatar.authorId) &&
        Objects.equals(this.authorName, avatar.authorName) &&
        Objects.equals(this.createdAt, avatar.createdAt) &&
        Objects.equals(this.description, avatar.description) &&
        Objects.equals(this.featured, avatar.featured) &&
        Objects.equals(this.highestPrice, avatar.highestPrice) &&
        Objects.equals(this.id, avatar.id) &&
        Objects.equals(this.imageUrl, avatar.imageUrl) &&
        Objects.equals(this.lock, avatar.lock) &&
        Objects.equals(this.lowestPrice, avatar.lowestPrice) &&
        Objects.equals(this.name, avatar.name) &&
        Objects.equals(this.productId, avatar.productId) &&
        Objects.equals(this.publishedListings, avatar.publishedListings) &&
        Objects.equals(this.releaseStatus, avatar.releaseStatus) &&
        Objects.equals(this.searchable, avatar.searchable) &&
        Objects.equals(this.styles, avatar.styles) &&
        Objects.equals(this.tags, avatar.tags) &&
        Objects.equals(this.thumbnailImageUrl, avatar.thumbnailImageUrl) &&
        Objects.equals(this.unityPackageUrl, avatar.unityPackageUrl) &&
        Objects.equals(this.unityPackageUrlObject, avatar.unityPackageUrlObject) &&
        Objects.equals(this.unityPackages, avatar.unityPackages) &&
        Objects.equals(this.updatedAt, avatar.updatedAt) &&
        Objects.equals(this.version, avatar.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgements, assetUrl, assetUrlObject, authorId, authorName, createdAt, description, featured, highestPrice, id, imageUrl, lock, lowestPrice, name, productId, publishedListings, releaseStatus, searchable, styles, tags, thumbnailImageUrl, unityPackageUrl, unityPackageUrlObject, unityPackages, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Avatar {\n");
    sb.append("    acknowledgements: ").append(toIndentedString(acknowledgements)).append("\n");
    sb.append("    assetUrl: ").append(toIndentedString(assetUrl)).append("\n");
    sb.append("    assetUrlObject: ").append(toIndentedString(assetUrlObject)).append("\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    highestPrice: ").append(toIndentedString(highestPrice)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    lock: ").append(toIndentedString(lock)).append("\n");
    sb.append("    lowestPrice: ").append(toIndentedString(lowestPrice)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    publishedListings: ").append(toIndentedString(publishedListings)).append("\n");
    sb.append("    releaseStatus: ").append(toIndentedString(releaseStatus)).append("\n");
    sb.append("    searchable: ").append(toIndentedString(searchable)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    thumbnailImageUrl: ").append(toIndentedString(thumbnailImageUrl)).append("\n");
    sb.append("    unityPackageUrl: ").append(toIndentedString(unityPackageUrl)).append("\n");
    sb.append("    unityPackageUrlObject: ").append(toIndentedString(unityPackageUrlObject)).append("\n");
    sb.append("    unityPackages: ").append(toIndentedString(unityPackages)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgements");
    openapiFields.add("assetUrl");
    openapiFields.add("assetUrlObject");
    openapiFields.add("authorId");
    openapiFields.add("authorName");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("featured");
    openapiFields.add("highestPrice");
    openapiFields.add("id");
    openapiFields.add("imageUrl");
    openapiFields.add("lock");
    openapiFields.add("lowestPrice");
    openapiFields.add("name");
    openapiFields.add("productId");
    openapiFields.add("publishedListings");
    openapiFields.add("releaseStatus");
    openapiFields.add("searchable");
    openapiFields.add("styles");
    openapiFields.add("tags");
    openapiFields.add("thumbnailImageUrl");
    openapiFields.add("unityPackageUrl");
    openapiFields.add("unityPackageUrlObject");
    openapiFields.add("unityPackages");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorId");
    openapiRequiredFields.add("authorName");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("featured");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("imageUrl");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("releaseStatus");
    openapiRequiredFields.add("styles");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("thumbnailImageUrl");
    openapiRequiredFields.add("unityPackageUrl");
    openapiRequiredFields.add("unityPackageUrlObject");
    openapiRequiredFields.add("unityPackages");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Avatar
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Avatar.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Avatar is not found in the empty JSON string", Avatar.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Avatar.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Avatar` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Avatar.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("acknowledgements") != null && !jsonObj.get("acknowledgements").isJsonNull()) && !jsonObj.get("acknowledgements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acknowledgements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acknowledgements").toString()));
      }
      if ((jsonObj.get("assetUrl") != null && !jsonObj.get("assetUrl").isJsonNull()) && !jsonObj.get("assetUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetUrl").toString()));
      }
      if (!jsonObj.get("authorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorId").toString()));
      }
      if (!jsonObj.get("authorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorName").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if (jsonObj.get("publishedListings") != null && !jsonObj.get("publishedListings").isJsonNull()) {
        JsonArray jsonArraypublishedListings = jsonObj.getAsJsonArray("publishedListings");
        if (jsonArraypublishedListings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publishedListings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publishedListings` to be an array in the JSON string but got `%s`", jsonObj.get("publishedListings").toString()));
          }

          // validate the optional field `publishedListings` (array)
          for (int i = 0; i < jsonArraypublishedListings.size(); i++) {
            AvatarPublishedListingsInner.validateJsonObject(jsonArraypublishedListings.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `styles`
      AvatarStyles.validateJsonObject(jsonObj.getAsJsonObject("styles"));
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("thumbnailImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailImageUrl").toString()));
      }
      if (!jsonObj.get("unityPackageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unityPackageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unityPackageUrl").toString()));
      }
      // validate the required field `unityPackageUrlObject`
      AvatarUnityPackageUrlObject.validateJsonObject(jsonObj.getAsJsonObject("unityPackageUrlObject"));
      // ensure the json data is an array
      if (!jsonObj.get("unityPackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unityPackages` to be an array in the JSON string but got `%s`", jsonObj.get("unityPackages").toString()));
      }

      JsonArray jsonArrayunityPackages = jsonObj.getAsJsonArray("unityPackages");
      // validate the required field `unityPackages` (array)
      for (int i = 0; i < jsonArrayunityPackages.size(); i++) {
        UnityPackage.validateJsonObject(jsonArrayunityPackages.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Avatar.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Avatar' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Avatar> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Avatar.class));

       return (TypeAdapter<T>) new TypeAdapter<Avatar>() {
           @Override
           public void write(JsonWriter out, Avatar value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Avatar read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Avatar given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Avatar
  * @throws IOException if the JSON string is invalid with respect to Avatar
  */
  public static Avatar fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Avatar.class);
  }

 /**
  * Convert an instance of Avatar to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

