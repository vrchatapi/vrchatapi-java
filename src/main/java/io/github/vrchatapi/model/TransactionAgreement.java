/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * Represents a single Transaction, which is likely between VRChat and Steam.
 */
@ApiModel(description = "Represents a single Transaction, which is likely between VRChat and Steam.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionAgreement {
  public static final String SERIALIZED_NAME_AGREEMENT_ID = "agreementId";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_ID)
  private String agreementId;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private Integer itemId;

  public static final String SERIALIZED_NAME_AGREEMENT = "agreement";
  @SerializedName(SERIALIZED_NAME_AGREEMENT)
  private String agreement;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Integer frequency;

  public static final String SERIALIZED_NAME_BILLING_TYPE = "billingType";
  @SerializedName(SERIALIZED_NAME_BILLING_TYPE)
  private String billingType;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_RECURRING_AMT = "recurringAmt";
  @SerializedName(SERIALIZED_NAME_RECURRING_AMT)
  private BigDecimal recurringAmt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_TIME_CREATED = "timeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private String timeCreated;

  public static final String SERIALIZED_NAME_NEXT_PAYMENT = "nextPayment";
  @SerializedName(SERIALIZED_NAME_NEXT_PAYMENT)
  private String nextPayment;

  public static final String SERIALIZED_NAME_LAST_PAYMENT = "lastPayment";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT)
  private String lastPayment;

  public static final String SERIALIZED_NAME_LAST_AMOUNT = "lastAmount";
  @SerializedName(SERIALIZED_NAME_LAST_AMOUNT)
  private BigDecimal lastAmount;

  public static final String SERIALIZED_NAME_LAST_AMOUNT_VAT = "lastAmountVat";
  @SerializedName(SERIALIZED_NAME_LAST_AMOUNT_VAT)
  private BigDecimal lastAmountVat;

  public static final String SERIALIZED_NAME_OUTSTANDING = "outstanding";
  @SerializedName(SERIALIZED_NAME_OUTSTANDING)
  private Integer outstanding;

  public static final String SERIALIZED_NAME_FAILED_ATTEMPTS = "failedAttempts";
  @SerializedName(SERIALIZED_NAME_FAILED_ATTEMPTS)
  private Integer failedAttempts;

  public TransactionAgreement() {
  }

  public TransactionAgreement agreementId(String agreementId) {
    
    this.agreementId = agreementId;
    return this;
  }

   /**
   * Get agreementId
   * @return agreementId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAgreementId() {
    return agreementId;
  }


  public void setAgreementId(String agreementId) {
    this.agreementId = agreementId;
  }


  public TransactionAgreement itemId(Integer itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * Get itemId
   * @return itemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getItemId() {
    return itemId;
  }


  public void setItemId(Integer itemId) {
    this.itemId = itemId;
  }


  public TransactionAgreement agreement(String agreement) {
    
    this.agreement = agreement;
    return this;
  }

   /**
   * Get agreement
   * @return agreement
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAgreement() {
    return agreement;
  }


  public void setAgreement(String agreement) {
    this.agreement = agreement;
  }


  public TransactionAgreement status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * This is NOT TransactionStatus, but whatever Steam return.
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "This is NOT TransactionStatus, but whatever Steam return.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public TransactionAgreement period(String period) {
    
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPeriod() {
    return period;
  }


  public void setPeriod(String period) {
    this.period = period;
  }


  public TransactionAgreement frequency(Integer frequency) {
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * @return frequency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFrequency() {
    return frequency;
  }


  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }


  public TransactionAgreement billingType(String billingType) {
    
    this.billingType = billingType;
    return this;
  }

   /**
   * Get billingType
   * @return billingType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getBillingType() {
    return billingType;
  }


  public void setBillingType(String billingType) {
    this.billingType = billingType;
  }


  public TransactionAgreement startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public TransactionAgreement endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public TransactionAgreement recurringAmt(BigDecimal recurringAmt) {
    
    this.recurringAmt = recurringAmt;
    return this;
  }

   /**
   * Get recurringAmt
   * @return recurringAmt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getRecurringAmt() {
    return recurringAmt;
  }


  public void setRecurringAmt(BigDecimal recurringAmt) {
    this.recurringAmt = recurringAmt;
  }


  public TransactionAgreement currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public TransactionAgreement timeCreated(String timeCreated) {
    
    this.timeCreated = timeCreated;
    return this;
  }

   /**
   * Get timeCreated
   * @return timeCreated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTimeCreated() {
    return timeCreated;
  }


  public void setTimeCreated(String timeCreated) {
    this.timeCreated = timeCreated;
  }


  public TransactionAgreement nextPayment(String nextPayment) {
    
    this.nextPayment = nextPayment;
    return this;
  }

   /**
   * Get nextPayment
   * @return nextPayment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNextPayment() {
    return nextPayment;
  }


  public void setNextPayment(String nextPayment) {
    this.nextPayment = nextPayment;
  }


  public TransactionAgreement lastPayment(String lastPayment) {
    
    this.lastPayment = lastPayment;
    return this;
  }

   /**
   * Get lastPayment
   * @return lastPayment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLastPayment() {
    return lastPayment;
  }


  public void setLastPayment(String lastPayment) {
    this.lastPayment = lastPayment;
  }


  public TransactionAgreement lastAmount(BigDecimal lastAmount) {
    
    this.lastAmount = lastAmount;
    return this;
  }

   /**
   * Get lastAmount
   * @return lastAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getLastAmount() {
    return lastAmount;
  }


  public void setLastAmount(BigDecimal lastAmount) {
    this.lastAmount = lastAmount;
  }


  public TransactionAgreement lastAmountVat(BigDecimal lastAmountVat) {
    
    this.lastAmountVat = lastAmountVat;
    return this;
  }

   /**
   * Get lastAmountVat
   * @return lastAmountVat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BigDecimal getLastAmountVat() {
    return lastAmountVat;
  }


  public void setLastAmountVat(BigDecimal lastAmountVat) {
    this.lastAmountVat = lastAmountVat;
  }


  public TransactionAgreement outstanding(Integer outstanding) {
    
    this.outstanding = outstanding;
    return this;
  }

   /**
   * Get outstanding
   * @return outstanding
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getOutstanding() {
    return outstanding;
  }


  public void setOutstanding(Integer outstanding) {
    this.outstanding = outstanding;
  }


  public TransactionAgreement failedAttempts(Integer failedAttempts) {
    
    this.failedAttempts = failedAttempts;
    return this;
  }

   /**
   * Get failedAttempts
   * @return failedAttempts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getFailedAttempts() {
    return failedAttempts;
  }


  public void setFailedAttempts(Integer failedAttempts) {
    this.failedAttempts = failedAttempts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionAgreement transactionAgreement = (TransactionAgreement) o;
    return Objects.equals(this.agreementId, transactionAgreement.agreementId) &&
        Objects.equals(this.itemId, transactionAgreement.itemId) &&
        Objects.equals(this.agreement, transactionAgreement.agreement) &&
        Objects.equals(this.status, transactionAgreement.status) &&
        Objects.equals(this.period, transactionAgreement.period) &&
        Objects.equals(this.frequency, transactionAgreement.frequency) &&
        Objects.equals(this.billingType, transactionAgreement.billingType) &&
        Objects.equals(this.startDate, transactionAgreement.startDate) &&
        Objects.equals(this.endDate, transactionAgreement.endDate) &&
        Objects.equals(this.recurringAmt, transactionAgreement.recurringAmt) &&
        Objects.equals(this.currency, transactionAgreement.currency) &&
        Objects.equals(this.timeCreated, transactionAgreement.timeCreated) &&
        Objects.equals(this.nextPayment, transactionAgreement.nextPayment) &&
        Objects.equals(this.lastPayment, transactionAgreement.lastPayment) &&
        Objects.equals(this.lastAmount, transactionAgreement.lastAmount) &&
        Objects.equals(this.lastAmountVat, transactionAgreement.lastAmountVat) &&
        Objects.equals(this.outstanding, transactionAgreement.outstanding) &&
        Objects.equals(this.failedAttempts, transactionAgreement.failedAttempts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementId, itemId, agreement, status, period, frequency, billingType, startDate, endDate, recurringAmt, currency, timeCreated, nextPayment, lastPayment, lastAmount, lastAmountVat, outstanding, failedAttempts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionAgreement {\n");
    sb.append("    agreementId: ").append(toIndentedString(agreementId)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    agreement: ").append(toIndentedString(agreement)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    billingType: ").append(toIndentedString(billingType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    recurringAmt: ").append(toIndentedString(recurringAmt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    nextPayment: ").append(toIndentedString(nextPayment)).append("\n");
    sb.append("    lastPayment: ").append(toIndentedString(lastPayment)).append("\n");
    sb.append("    lastAmount: ").append(toIndentedString(lastAmount)).append("\n");
    sb.append("    lastAmountVat: ").append(toIndentedString(lastAmountVat)).append("\n");
    sb.append("    outstanding: ").append(toIndentedString(outstanding)).append("\n");
    sb.append("    failedAttempts: ").append(toIndentedString(failedAttempts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agreementId");
    openapiFields.add("itemId");
    openapiFields.add("agreement");
    openapiFields.add("status");
    openapiFields.add("period");
    openapiFields.add("frequency");
    openapiFields.add("billingType");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("recurringAmt");
    openapiFields.add("currency");
    openapiFields.add("timeCreated");
    openapiFields.add("nextPayment");
    openapiFields.add("lastPayment");
    openapiFields.add("lastAmount");
    openapiFields.add("lastAmountVat");
    openapiFields.add("outstanding");
    openapiFields.add("failedAttempts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("agreementId");
    openapiRequiredFields.add("itemId");
    openapiRequiredFields.add("agreement");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("period");
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("billingType");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("recurringAmt");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("timeCreated");
    openapiRequiredFields.add("nextPayment");
    openapiRequiredFields.add("lastPayment");
    openapiRequiredFields.add("lastAmount");
    openapiRequiredFields.add("lastAmountVat");
    openapiRequiredFields.add("outstanding");
    openapiRequiredFields.add("failedAttempts");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionAgreement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionAgreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionAgreement is not found in the empty JSON string", TransactionAgreement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactionAgreement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionAgreement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionAgreement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("agreementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreementId").toString()));
      }
      if (!jsonObj.get("agreement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreement").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      if (!jsonObj.get("billingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingType").toString()));
      }
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (!jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("timeCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeCreated").toString()));
      }
      if (!jsonObj.get("nextPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPayment").toString()));
      }
      if (!jsonObj.get("lastPayment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastPayment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastPayment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionAgreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionAgreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionAgreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionAgreement.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionAgreement>() {
           @Override
           public void write(JsonWriter out, TransactionAgreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionAgreement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionAgreement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionAgreement
  * @throws IOException if the JSON string is invalid with respect to TransactionAgreement
  */
  public static TransactionAgreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionAgreement.class);
  }

 /**
  * Convert an instance of TransactionAgreement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

