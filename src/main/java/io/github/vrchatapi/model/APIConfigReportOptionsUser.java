/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.19.2
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.github.vrchatapi.JSON;

/**
 * APIConfigReportOptionsUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class APIConfigReportOptionsUser {
  public static final String SERIALIZED_NAME_BEHAVIOR = "behavior";
  @SerializedName(SERIALIZED_NAME_BEHAVIOR)
  private List<String> behavior = null;

  public static final String SERIALIZED_NAME_CHAT = "chat";
  @SerializedName(SERIALIZED_NAME_CHAT)
  private List<String> chat = null;

  public static final String SERIALIZED_NAME_EMOJI = "emoji";
  @SerializedName(SERIALIZED_NAME_EMOJI)
  private List<String> emoji = null;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private List<String> image = null;

  public static final String SERIALIZED_NAME_STICKER = "sticker";
  @SerializedName(SERIALIZED_NAME_STICKER)
  private List<String> sticker = null;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private List<String> text = null;

  public APIConfigReportOptionsUser() {
  }

  public APIConfigReportOptionsUser behavior(List<String> behavior) {
    
    this.behavior = behavior;
    return this;
  }

  public APIConfigReportOptionsUser addBehaviorItem(String behaviorItem) {
    if (this.behavior == null) {
      this.behavior = new ArrayList<>();
    }
    this.behavior.add(behaviorItem);
    return this;
  }

   /**
   * Get behavior
   * @return behavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getBehavior() {
    return behavior;
  }


  public void setBehavior(List<String> behavior) {
    this.behavior = behavior;
  }


  public APIConfigReportOptionsUser chat(List<String> chat) {
    
    this.chat = chat;
    return this;
  }

  public APIConfigReportOptionsUser addChatItem(String chatItem) {
    if (this.chat == null) {
      this.chat = new ArrayList<>();
    }
    this.chat.add(chatItem);
    return this;
  }

   /**
   * Get chat
   * @return chat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getChat() {
    return chat;
  }


  public void setChat(List<String> chat) {
    this.chat = chat;
  }


  public APIConfigReportOptionsUser emoji(List<String> emoji) {
    
    this.emoji = emoji;
    return this;
  }

  public APIConfigReportOptionsUser addEmojiItem(String emojiItem) {
    if (this.emoji == null) {
      this.emoji = new ArrayList<>();
    }
    this.emoji.add(emojiItem);
    return this;
  }

   /**
   * Get emoji
   * @return emoji
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getEmoji() {
    return emoji;
  }


  public void setEmoji(List<String> emoji) {
    this.emoji = emoji;
  }


  public APIConfigReportOptionsUser image(List<String> image) {
    
    this.image = image;
    return this;
  }

  public APIConfigReportOptionsUser addImageItem(String imageItem) {
    if (this.image == null) {
      this.image = new ArrayList<>();
    }
    this.image.add(imageItem);
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getImage() {
    return image;
  }


  public void setImage(List<String> image) {
    this.image = image;
  }


  public APIConfigReportOptionsUser sticker(List<String> sticker) {
    
    this.sticker = sticker;
    return this;
  }

  public APIConfigReportOptionsUser addStickerItem(String stickerItem) {
    if (this.sticker == null) {
      this.sticker = new ArrayList<>();
    }
    this.sticker.add(stickerItem);
    return this;
  }

   /**
   * Get sticker
   * @return sticker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSticker() {
    return sticker;
  }


  public void setSticker(List<String> sticker) {
    this.sticker = sticker;
  }


  public APIConfigReportOptionsUser text(List<String> text) {
    
    this.text = text;
    return this;
  }

  public APIConfigReportOptionsUser addTextItem(String textItem) {
    if (this.text == null) {
      this.text = new ArrayList<>();
    }
    this.text.add(textItem);
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getText() {
    return text;
  }


  public void setText(List<String> text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIConfigReportOptionsUser apIConfigReportOptionsUser = (APIConfigReportOptionsUser) o;
    return Objects.equals(this.behavior, apIConfigReportOptionsUser.behavior) &&
        Objects.equals(this.chat, apIConfigReportOptionsUser.chat) &&
        Objects.equals(this.emoji, apIConfigReportOptionsUser.emoji) &&
        Objects.equals(this.image, apIConfigReportOptionsUser.image) &&
        Objects.equals(this.sticker, apIConfigReportOptionsUser.sticker) &&
        Objects.equals(this.text, apIConfigReportOptionsUser.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(behavior, chat, emoji, image, sticker, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIConfigReportOptionsUser {\n");
    sb.append("    behavior: ").append(toIndentedString(behavior)).append("\n");
    sb.append("    chat: ").append(toIndentedString(chat)).append("\n");
    sb.append("    emoji: ").append(toIndentedString(emoji)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    sticker: ").append(toIndentedString(sticker)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("behavior");
    openapiFields.add("chat");
    openapiFields.add("emoji");
    openapiFields.add("image");
    openapiFields.add("sticker");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIConfigReportOptionsUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIConfigReportOptionsUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIConfigReportOptionsUser is not found in the empty JSON string", APIConfigReportOptionsUser.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIConfigReportOptionsUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIConfigReportOptionsUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("behavior") != null && !jsonObj.get("behavior").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `behavior` to be an array in the JSON string but got `%s`", jsonObj.get("behavior").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("chat") != null && !jsonObj.get("chat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat` to be an array in the JSON string but got `%s`", jsonObj.get("chat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emoji") != null && !jsonObj.get("emoji").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emoji` to be an array in the JSON string but got `%s`", jsonObj.get("emoji").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be an array in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sticker") != null && !jsonObj.get("sticker").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sticker` to be an array in the JSON string but got `%s`", jsonObj.get("sticker").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be an array in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIConfigReportOptionsUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIConfigReportOptionsUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIConfigReportOptionsUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIConfigReportOptionsUser.class));

       return (TypeAdapter<T>) new TypeAdapter<APIConfigReportOptionsUser>() {
           @Override
           public void write(JsonWriter out, APIConfigReportOptionsUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIConfigReportOptionsUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIConfigReportOptionsUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIConfigReportOptionsUser
  * @throws IOException if the JSON string is invalid with respect to APIConfigReportOptionsUser
  */
  public static APIConfigReportOptionsUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIConfigReportOptionsUser.class);
  }

 /**
  * Convert an instance of APIConfigReportOptionsUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

