/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.CalendarEvent;
import io.github.vrchatapi.model.CreateCalendarEventRequest;
import io.github.vrchatapi.model.Error;
import java.io.File;
import io.github.vrchatapi.model.FollowCalendarEventRequest;
import java.time.OffsetDateTime;
import io.github.vrchatapi.model.PaginatedCalendarEventList;
import io.github.vrchatapi.model.Success;
import io.github.vrchatapi.model.UpdateCalendarEventRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CalendarApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CalendarApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGroupCalendarEvent
     * @param groupId Must be a valid group ID. (required)
     * @param createCalendarEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCalendarEventCall(String groupId, CreateCalendarEventRequest createCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCalendarEventRequest;

        // create path and map variables
        String localVarPath = "/calendar/{groupId}/event"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupCalendarEventValidateBeforeCall(String groupId, CreateCalendarEventRequest createCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createGroupCalendarEvent(Async)");
        }

        // verify the required parameter 'createCalendarEventRequest' is set
        if (createCalendarEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createCalendarEventRequest' when calling createGroupCalendarEvent(Async)");
        }

        return createGroupCalendarEventCall(groupId, createCalendarEventRequest, _callback);

    }

    /**
     * Create a calendar event
     * Creates an event for a group on the calendar
     * @param groupId Must be a valid group ID. (required)
     * @param createCalendarEventRequest  (required)
     * @return CalendarEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public CalendarEvent createGroupCalendarEvent(String groupId, CreateCalendarEventRequest createCalendarEventRequest) throws ApiException {
        ApiResponse<CalendarEvent> localVarResp = createGroupCalendarEventWithHttpInfo(groupId, createCalendarEventRequest);
        return localVarResp.getData();
    }

    /**
     * Create a calendar event
     * Creates an event for a group on the calendar
     * @param groupId Must be a valid group ID. (required)
     * @param createCalendarEventRequest  (required)
     * @return ApiResponse&lt;CalendarEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarEvent> createGroupCalendarEventWithHttpInfo(String groupId, CreateCalendarEventRequest createCalendarEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupCalendarEventValidateBeforeCall(groupId, createCalendarEventRequest, null);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a calendar event (asynchronously)
     * Creates an event for a group on the calendar
     * @param groupId Must be a valid group ID. (required)
     * @param createCalendarEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCalendarEventAsync(String groupId, CreateCalendarEventRequest createCalendarEventRequest, final ApiCallback<CalendarEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupCalendarEventValidateBeforeCall(groupId, createCalendarEventRequest, _callback);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupCalendarEvent
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a calendar event. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCalendarEventCall(String groupId, String calendarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/{groupId}/{calendarId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupCalendarEventValidateBeforeCall(String groupId, String calendarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupCalendarEvent(Async)");
        }

        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling deleteGroupCalendarEvent(Async)");
        }

        return deleteGroupCalendarEventCall(groupId, calendarId, _callback);

    }

    /**
     * Delete a calendar event
     * Delete a group calendar event
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a calendar event. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteGroupCalendarEvent(String groupId, String calendarId) throws ApiException {
        ApiResponse<Success> localVarResp = deleteGroupCalendarEventWithHttpInfo(groupId, calendarId);
        return localVarResp.getData();
    }

    /**
     * Delete a calendar event
     * Delete a group calendar event
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a calendar event. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteGroupCalendarEventWithHttpInfo(String groupId, String calendarId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupCalendarEventValidateBeforeCall(groupId, calendarId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a calendar event (asynchronously)
     * Delete a group calendar event
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a calendar event. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCalendarEventAsync(String groupId, String calendarId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupCalendarEventValidateBeforeCall(groupId, calendarId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for followGroupCalendarEvent
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param followCalendarEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followGroupCalendarEventCall(String groupId, String calendarId, FollowCalendarEventRequest followCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = followCalendarEventRequest;

        // create path and map variables
        String localVarPath = "/calendar/{groupId}/{calendarId}/follow"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followGroupCalendarEventValidateBeforeCall(String groupId, String calendarId, FollowCalendarEventRequest followCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling followGroupCalendarEvent(Async)");
        }

        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling followGroupCalendarEvent(Async)");
        }

        // verify the required parameter 'followCalendarEventRequest' is set
        if (followCalendarEventRequest == null) {
            throw new ApiException("Missing the required parameter 'followCalendarEventRequest' when calling followGroupCalendarEvent(Async)");
        }

        return followGroupCalendarEventCall(groupId, calendarId, followCalendarEventRequest, _callback);

    }

    /**
     * Follow a calendar event
     * Follow or unfollow an event on a group&#39;s calendar
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param followCalendarEventRequest  (required)
     * @return CalendarEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public CalendarEvent followGroupCalendarEvent(String groupId, String calendarId, FollowCalendarEventRequest followCalendarEventRequest) throws ApiException {
        ApiResponse<CalendarEvent> localVarResp = followGroupCalendarEventWithHttpInfo(groupId, calendarId, followCalendarEventRequest);
        return localVarResp.getData();
    }

    /**
     * Follow a calendar event
     * Follow or unfollow an event on a group&#39;s calendar
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param followCalendarEventRequest  (required)
     * @return ApiResponse&lt;CalendarEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarEvent> followGroupCalendarEventWithHttpInfo(String groupId, String calendarId, FollowCalendarEventRequest followCalendarEventRequest) throws ApiException {
        okhttp3.Call localVarCall = followGroupCalendarEventValidateBeforeCall(groupId, calendarId, followCalendarEventRequest, null);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Follow a calendar event (asynchronously)
     * Follow or unfollow an event on a group&#39;s calendar
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param followCalendarEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call followGroupCalendarEventAsync(String groupId, String calendarId, FollowCalendarEventRequest followCalendarEventRequest, final ApiCallback<CalendarEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = followGroupCalendarEventValidateBeforeCall(groupId, calendarId, followCalendarEventRequest, _callback);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalendarEvents
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarEventsCall(OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalendarEventsValidateBeforeCall(OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        return getCalendarEventsCall(date, n, offset, _callback);

    }

    /**
     * List calendar events
     * Get a list of a user&#39;s calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return PaginatedCalendarEventList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCalendarEventList getCalendarEvents(OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        ApiResponse<PaginatedCalendarEventList> localVarResp = getCalendarEventsWithHttpInfo(date, n, offset);
        return localVarResp.getData();
    }

    /**
     * List calendar events
     * Get a list of a user&#39;s calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;PaginatedCalendarEventList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCalendarEventList> getCalendarEventsWithHttpInfo(OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCalendarEventsValidateBeforeCall(date, n, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List calendar events (asynchronously)
     * Get a list of a user&#39;s calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarEventsAsync(OffsetDateTime date, Integer n, Integer offset, final ApiCallback<PaginatedCalendarEventList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalendarEventsValidateBeforeCall(date, n, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedCalendarEvents
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedCalendarEventsCall(OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedCalendarEventsValidateBeforeCall(OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        return getFeaturedCalendarEventsCall(date, n, offset, _callback);

    }

    /**
     * List featured calendar events
     * Get a list of a featured calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return PaginatedCalendarEventList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCalendarEventList getFeaturedCalendarEvents(OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        ApiResponse<PaginatedCalendarEventList> localVarResp = getFeaturedCalendarEventsWithHttpInfo(date, n, offset);
        return localVarResp.getData();
    }

    /**
     * List featured calendar events
     * Get a list of a featured calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;PaginatedCalendarEventList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCalendarEventList> getFeaturedCalendarEventsWithHttpInfo(OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedCalendarEventsValidateBeforeCall(date, n, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List featured calendar events (asynchronously)
     * Get a list of a featured calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedCalendarEventsAsync(OffsetDateTime date, Integer n, Integer offset, final ApiCallback<PaginatedCalendarEventList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedCalendarEventsValidateBeforeCall(date, n, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFollowedCalendarEvents
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFollowedCalendarEventsCall(OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowedCalendarEventsValidateBeforeCall(OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        return getFollowedCalendarEventsCall(date, n, offset, _callback);

    }

    /**
     * List followed calendar events
     * Get a list of a followed calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return PaginatedCalendarEventList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCalendarEventList getFollowedCalendarEvents(OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        ApiResponse<PaginatedCalendarEventList> localVarResp = getFollowedCalendarEventsWithHttpInfo(date, n, offset);
        return localVarResp.getData();
    }

    /**
     * List followed calendar events
     * Get a list of a followed calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;PaginatedCalendarEventList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCalendarEventList> getFollowedCalendarEventsWithHttpInfo(OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFollowedCalendarEventsValidateBeforeCall(date, n, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List followed calendar events (asynchronously)
     * Get a list of a followed calendar events for the month in ?date
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFollowedCalendarEventsAsync(OffsetDateTime date, Integer n, Integer offset, final ApiCallback<PaginatedCalendarEventList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowedCalendarEventsValidateBeforeCall(date, n, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupCalendarEvent
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCalendarEventCall(String groupId, String calendarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/{groupId}/{calendarId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupCalendarEventValidateBeforeCall(String groupId, String calendarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupCalendarEvent(Async)");
        }

        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling getGroupCalendarEvent(Async)");
        }

        return getGroupCalendarEventCall(groupId, calendarId, _callback);

    }

    /**
     * Get a calendar event
     * Get a group calendar event
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @return CalendarEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public CalendarEvent getGroupCalendarEvent(String groupId, String calendarId) throws ApiException {
        ApiResponse<CalendarEvent> localVarResp = getGroupCalendarEventWithHttpInfo(groupId, calendarId);
        return localVarResp.getData();
    }

    /**
     * Get a calendar event
     * Get a group calendar event
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @return ApiResponse&lt;CalendarEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarEvent> getGroupCalendarEventWithHttpInfo(String groupId, String calendarId) throws ApiException {
        okhttp3.Call localVarCall = getGroupCalendarEventValidateBeforeCall(groupId, calendarId, null);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a calendar event (asynchronously)
     * Get a group calendar event
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCalendarEventAsync(String groupId, String calendarId, final ApiCallback<CalendarEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupCalendarEventValidateBeforeCall(groupId, calendarId, _callback);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupCalendarEventICS
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iCalendar file download </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to download ICS calendar of a non-existent calendar entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCalendarEventICSCall(String groupId, String calendarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/{groupId}/{calendarId}.ics"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/calendar",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupCalendarEventICSValidateBeforeCall(String groupId, String calendarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupCalendarEventICS(Async)");
        }

        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling getGroupCalendarEventICS(Async)");
        }

        return getGroupCalendarEventICSCall(groupId, calendarId, _callback);

    }

    /**
     * Download calendar event as ICS
     * Returns the specified calendar in iCalendar (ICS) format.
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iCalendar file download </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to download ICS calendar of a non-existent calendar entry. </td><td>  -  </td></tr>
     </table>
     */
    public File getGroupCalendarEventICS(String groupId, String calendarId) throws ApiException {
        ApiResponse<File> localVarResp = getGroupCalendarEventICSWithHttpInfo(groupId, calendarId);
        return localVarResp.getData();
    }

    /**
     * Download calendar event as ICS
     * Returns the specified calendar in iCalendar (ICS) format.
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iCalendar file download </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to download ICS calendar of a non-existent calendar entry. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getGroupCalendarEventICSWithHttpInfo(String groupId, String calendarId) throws ApiException {
        okhttp3.Call localVarCall = getGroupCalendarEventICSValidateBeforeCall(groupId, calendarId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download calendar event as ICS (asynchronously)
     * Returns the specified calendar in iCalendar (ICS) format.
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> iCalendar file download </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to download ICS calendar of a non-existent calendar entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCalendarEventICSAsync(String groupId, String calendarId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupCalendarEventICSValidateBeforeCall(groupId, calendarId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupCalendarEvents
     * @param groupId Must be a valid group ID. (required)
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCalendarEventsCall(String groupId, OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/{groupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupCalendarEventsValidateBeforeCall(String groupId, OffsetDateTime date, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupCalendarEvents(Async)");
        }

        return getGroupCalendarEventsCall(groupId, date, n, offset, _callback);

    }

    /**
     * List a group&#39;s calendar events
     * Get a list of a group&#39;s calendar events
     * @param groupId Must be a valid group ID. (required)
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return PaginatedCalendarEventList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCalendarEventList getGroupCalendarEvents(String groupId, OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        ApiResponse<PaginatedCalendarEventList> localVarResp = getGroupCalendarEventsWithHttpInfo(groupId, date, n, offset);
        return localVarResp.getData();
    }

    /**
     * List a group&#39;s calendar events
     * Get a list of a group&#39;s calendar events
     * @param groupId Must be a valid group ID. (required)
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;PaginatedCalendarEventList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCalendarEventList> getGroupCalendarEventsWithHttpInfo(String groupId, OffsetDateTime date, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getGroupCalendarEventsValidateBeforeCall(groupId, date, n, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a group&#39;s calendar events (asynchronously)
     * Get a list of a group&#39;s calendar events
     * @param groupId Must be a valid group ID. (required)
     * @param date The month to search in. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCalendarEventsAsync(String groupId, OffsetDateTime date, Integer n, Integer offset, final ApiCallback<PaginatedCalendarEventList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupCalendarEventsValidateBeforeCall(groupId, date, n, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCalendarEvents
     * @param searchTerm Search term for calendar events. (required)
     * @param utcOffset The offset from UTC in hours of the client or authenticated user. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCalendarEventsCall(String searchTerm, Integer utcOffset, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (utcOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("utcOffset", utcOffset));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCalendarEventsValidateBeforeCall(String searchTerm, Integer utcOffset, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling searchCalendarEvents(Async)");
        }

        return searchCalendarEventsCall(searchTerm, utcOffset, n, offset, _callback);

    }

    /**
     * Search for calendar events
     * Get a list of calendar events by search terms
     * @param searchTerm Search term for calendar events. (required)
     * @param utcOffset The offset from UTC in hours of the client or authenticated user. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return PaginatedCalendarEventList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCalendarEventList searchCalendarEvents(String searchTerm, Integer utcOffset, Integer n, Integer offset) throws ApiException {
        ApiResponse<PaginatedCalendarEventList> localVarResp = searchCalendarEventsWithHttpInfo(searchTerm, utcOffset, n, offset);
        return localVarResp.getData();
    }

    /**
     * Search for calendar events
     * Get a list of calendar events by search terms
     * @param searchTerm Search term for calendar events. (required)
     * @param utcOffset The offset from UTC in hours of the client or authenticated user. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;PaginatedCalendarEventList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCalendarEventList> searchCalendarEventsWithHttpInfo(String searchTerm, Integer utcOffset, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchCalendarEventsValidateBeforeCall(searchTerm, utcOffset, n, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for calendar events (asynchronously)
     * Get a list of calendar events by search terms
     * @param searchTerm Search term for calendar events. (required)
     * @param utcOffset The offset from UTC in hours of the client or authenticated user. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of CalendarEvent objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCalendarEventsAsync(String searchTerm, Integer utcOffset, Integer n, Integer offset, final ApiCallback<PaginatedCalendarEventList> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCalendarEventsValidateBeforeCall(searchTerm, utcOffset, n, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCalendarEventList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupCalendarEvent
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param updateCalendarEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCalendarEventCall(String groupId, String calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCalendarEventRequest;

        // create path and map variables
        String localVarPath = "/calendar/{groupId}/{calendarId}/event"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupCalendarEventValidateBeforeCall(String groupId, String calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupCalendarEvent(Async)");
        }

        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling updateGroupCalendarEvent(Async)");
        }

        // verify the required parameter 'updateCalendarEventRequest' is set
        if (updateCalendarEventRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCalendarEventRequest' when calling updateGroupCalendarEvent(Async)");
        }

        return updateGroupCalendarEventCall(groupId, calendarId, updateCalendarEventRequest, _callback);

    }

    /**
     * Update a calendar event
     * Updates an event for a group on the calendar
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param updateCalendarEventRequest  (required)
     * @return CalendarEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public CalendarEvent updateGroupCalendarEvent(String groupId, String calendarId, UpdateCalendarEventRequest updateCalendarEventRequest) throws ApiException {
        ApiResponse<CalendarEvent> localVarResp = updateGroupCalendarEventWithHttpInfo(groupId, calendarId, updateCalendarEventRequest);
        return localVarResp.getData();
    }

    /**
     * Update a calendar event
     * Updates an event for a group on the calendar
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param updateCalendarEventRequest  (required)
     * @return ApiResponse&lt;CalendarEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarEvent> updateGroupCalendarEventWithHttpInfo(String groupId, String calendarId, UpdateCalendarEventRequest updateCalendarEventRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupCalendarEventValidateBeforeCall(groupId, calendarId, updateCalendarEventRequest, null);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a calendar event (asynchronously)
     * Updates an event for a group on the calendar
     * @param groupId Must be a valid group ID. (required)
     * @param calendarId Must be a valid calendar ID. (required)
     * @param updateCalendarEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CalendarEvent object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCalendarEventAsync(String groupId, String calendarId, UpdateCalendarEventRequest updateCalendarEventRequest, final ApiCallback<CalendarEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupCalendarEventValidateBeforeCall(groupId, calendarId, updateCalendarEventRequest, _callback);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
