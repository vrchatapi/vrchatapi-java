/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.CreateWorldRequest;
import io.github.vrchatapi.model.Error;
import io.github.vrchatapi.model.FavoritedWorld;
import io.github.vrchatapi.model.Instance;
import io.github.vrchatapi.model.LimitedWorld;
import io.github.vrchatapi.model.OrderOption;
import io.github.vrchatapi.model.ReleaseStatus;
import io.github.vrchatapi.model.SortOption;
import io.github.vrchatapi.model.UpdateWorldRequest;
import io.github.vrchatapi.model.World;
import io.github.vrchatapi.model.WorldMetadata;
import io.github.vrchatapi.model.WorldPublishStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorldsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorldsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorldsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkUserPersistenceExists
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has persistence data for the given world. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUserPersistenceExistsCall(String userId, String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/{worldId}/persist/exists"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkUserPersistenceExistsValidateBeforeCall(String userId, String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkUserPersistenceExists(Async)");
        }

        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling checkUserPersistenceExists(Async)");
        }

        return checkUserPersistenceExistsCall(userId, worldId, _callback);

    }

    /**
     * Check User Persistence Exists
     * Checks whether the user has persistence data for a given world
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has persistence data for the given world. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public void checkUserPersistenceExists(String userId, String worldId) throws ApiException {
        checkUserPersistenceExistsWithHttpInfo(userId, worldId);
    }

    /**
     * Check User Persistence Exists
     * Checks whether the user has persistence data for a given world
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has persistence data for the given world. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkUserPersistenceExistsWithHttpInfo(String userId, String worldId) throws ApiException {
        okhttp3.Call localVarCall = checkUserPersistenceExistsValidateBeforeCall(userId, worldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check User Persistence Exists (asynchronously)
     * Checks whether the user has persistence data for a given world
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user has persistence data for the given world. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkUserPersistenceExistsAsync(String userId, String worldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkUserPersistenceExistsValidateBeforeCall(userId, worldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWorld
     * @param createWorldRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying create a world without having the neccesary Trust rank yet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorldCall(CreateWorldRequest createWorldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWorldRequest;

        // create path and map variables
        String localVarPath = "/worlds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorldValidateBeforeCall(CreateWorldRequest createWorldRequest, final ApiCallback _callback) throws ApiException {
        return createWorldCall(createWorldRequest, _callback);

    }

    /**
     * Create World
     * Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
     * @param createWorldRequest  (optional)
     * @return World
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying create a world without having the neccesary Trust rank yet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public World createWorld(CreateWorldRequest createWorldRequest) throws ApiException {
        ApiResponse<World> localVarResp = createWorldWithHttpInfo(createWorldRequest);
        return localVarResp.getData();
    }

    /**
     * Create World
     * Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
     * @param createWorldRequest  (optional)
     * @return ApiResponse&lt;World&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying create a world without having the neccesary Trust rank yet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<World> createWorldWithHttpInfo(CreateWorldRequest createWorldRequest) throws ApiException {
        okhttp3.Call localVarCall = createWorldValidateBeforeCall(createWorldRequest, null);
        Type localVarReturnType = new TypeToken<World>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create World (asynchronously)
     * Create a new world. This endpoint requires &#x60;assetUrl&#x60; to be a valid File object with &#x60;.vrcw&#x60; file extension, and &#x60;imageUrl&#x60; to be a valid File object with an image file extension.
     * @param createWorldRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying create a world without having the neccesary Trust rank yet. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorldAsync(CreateWorldRequest createWorldRequest, final ApiCallback<World> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorldValidateBeforeCall(createWorldRequest, _callback);
        Type localVarReturnType = new TypeToken<World>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserPersistence
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s persistence data for the given world is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPersistenceCall(String userId, String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/{worldId}/persist"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserPersistenceValidateBeforeCall(String userId, String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserPersistence(Async)");
        }

        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling deleteUserPersistence(Async)");
        }

        return deleteUserPersistenceCall(userId, worldId, _callback);

    }

    /**
     * Delete User Persistence
     * Deletes the user&#39;s persistence data for a given world
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s persistence data for the given world is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserPersistence(String userId, String worldId) throws ApiException {
        deleteUserPersistenceWithHttpInfo(userId, worldId);
    }

    /**
     * Delete User Persistence
     * Deletes the user&#39;s persistence data for a given world
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s persistence data for the given world is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserPersistenceWithHttpInfo(String userId, String worldId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserPersistenceValidateBeforeCall(userId, worldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User Persistence (asynchronously)
     * Deletes the user&#39;s persistence data for a given world
     * @param userId Must be a valid user ID. (required)
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user&#39;s persistence data for the given world is deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user does not have persistence data for the given world. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPersistenceAsync(String userId, String worldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserPersistenceValidateBeforeCall(userId, worldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorld
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorldCall(String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorldValidateBeforeCall(String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling deleteWorld(Async)");
        }

        return deleteWorldCall(worldId, _callback);

    }

    /**
     * Delete World
     * Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
     * @param worldId Must be a valid world ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorld(String worldId) throws ApiException {
        deleteWorldWithHttpInfo(worldId);
    }

    /**
     * Delete World
     * Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorldWithHttpInfo(String worldId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorldValidateBeforeCall(worldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete World (asynchronously)
     * Delete a world. Notice a world is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The WorldID is permanently reserved.
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorldAsync(String worldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorldValidateBeforeCall(worldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActiveWorlds
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveWorldsCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (notag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notag", notag));
        }

        if (releaseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseStatus", releaseStatus));
        }

        if (maxUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUnityVersion", maxUnityVersion));
        }

        if (minUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minUnityVersion", minUnityVersion));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveWorldsValidateBeforeCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, final ApiCallback _callback) throws ApiException {
        return getActiveWorldsCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, _callback);

    }

    /**
     * List Active Worlds
     * Search and list currently Active worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @return List&lt;LimitedWorld&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<LimitedWorld> getActiveWorlds(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform) throws ApiException {
        ApiResponse<List<LimitedWorld>> localVarResp = getActiveWorldsWithHttpInfo(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform);
        return localVarResp.getData();
    }

    /**
     * List Active Worlds
     * Search and list currently Active worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @return ApiResponse&lt;List&lt;LimitedWorld&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LimitedWorld>> getActiveWorldsWithHttpInfo(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform) throws ApiException {
        okhttp3.Call localVarCall = getActiveWorldsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, null);
        Type localVarReturnType = new TypeToken<List<LimitedWorld>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Active Worlds (asynchronously)
     * Search and list currently Active worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActiveWorldsAsync(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, final ApiCallback<List<LimitedWorld>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveWorldsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, _callback);
        Type localVarReturnType = new TypeToken<List<LimitedWorld>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFavoritedWorlds
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoritedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoritedWorldsCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/favorites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (notag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notag", notag));
        }

        if (releaseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseStatus", releaseStatus));
        }

        if (maxUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUnityVersion", maxUnityVersion));
        }

        if (minUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minUnityVersion", minUnityVersion));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoritedWorldsValidateBeforeCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback _callback) throws ApiException {
        return getFavoritedWorldsCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, _callback);

    }

    /**
     * List Favorited Worlds
     * Search and list favorited worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @return List&lt;FavoritedWorld&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoritedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public List<FavoritedWorld> getFavoritedWorlds(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId) throws ApiException {
        ApiResponse<List<FavoritedWorld>> localVarResp = getFavoritedWorldsWithHttpInfo(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId);
        return localVarResp.getData();
    }

    /**
     * List Favorited Worlds
     * Search and list favorited worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @return ApiResponse&lt;List&lt;FavoritedWorld&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoritedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FavoritedWorld>> getFavoritedWorldsWithHttpInfo(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId) throws ApiException {
        okhttp3.Call localVarCall = getFavoritedWorldsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, null);
        Type localVarReturnType = new TypeToken<List<FavoritedWorld>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Favorited Worlds (asynchronously)
     * Search and list favorited worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoritedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoritedWorldsAsync(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback<List<FavoritedWorld>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoritedWorldsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, _callback);
        Type localVarReturnType = new TypeToken<List<FavoritedWorld>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecentWorlds
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see recently visited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecentWorldsCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (notag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notag", notag));
        }

        if (releaseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseStatus", releaseStatus));
        }

        if (maxUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUnityVersion", maxUnityVersion));
        }

        if (minUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minUnityVersion", minUnityVersion));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentWorldsValidateBeforeCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback _callback) throws ApiException {
        return getRecentWorldsCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, _callback);

    }

    /**
     * List Recent Worlds
     * Search and list recently visited worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @return List&lt;LimitedWorld&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see recently visited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public List<LimitedWorld> getRecentWorlds(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId) throws ApiException {
        ApiResponse<List<LimitedWorld>> localVarResp = getRecentWorldsWithHttpInfo(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId);
        return localVarResp.getData();
    }

    /**
     * List Recent Worlds
     * Search and list recently visited worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @return ApiResponse&lt;List&lt;LimitedWorld&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see recently visited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LimitedWorld>> getRecentWorldsWithHttpInfo(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId) throws ApiException {
        okhttp3.Call localVarCall = getRecentWorldsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, null);
        Type localVarReturnType = new TypeToken<List<LimitedWorld>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Recent Worlds (asynchronously)
     * Search and list recently visited worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see recently visited worlds of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecentWorldsAsync(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback<List<LimitedWorld>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentWorldsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, _callback);
        Type localVarReturnType = new TypeToken<List<LimitedWorld>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorld
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorldCall(String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorldValidateBeforeCall(String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling getWorld(Async)");
        }

        return getWorldCall(worldId, _callback);

    }

    /**
     * Get World by ID
     * Get information about a specific World. Works unauthenticated but when so will always return &#x60;0&#x60; for certain fields.
     * @param worldId Must be a valid world ID. (required)
     * @return World
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public World getWorld(String worldId) throws ApiException {
        ApiResponse<World> localVarResp = getWorldWithHttpInfo(worldId);
        return localVarResp.getData();
    }

    /**
     * Get World by ID
     * Get information about a specific World. Works unauthenticated but when so will always return &#x60;0&#x60; for certain fields.
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;World&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<World> getWorldWithHttpInfo(String worldId) throws ApiException {
        okhttp3.Call localVarCall = getWorldValidateBeforeCall(worldId, null);
        Type localVarReturnType = new TypeToken<World>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get World by ID (asynchronously)
     * Get information about a specific World. Works unauthenticated but when so will always return &#x60;0&#x60; for certain fields.
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorldAsync(String worldId, final ApiCallback<World> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorldValidateBeforeCall(worldId, _callback);
        Type localVarReturnType = new TypeToken<World>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorldInstance
     * @param worldId Must be a valid world ID. (required)
     * @param instanceId Must be a valid instance ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Instance object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorldInstanceCall(String worldId, String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}/{instanceId}"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorldInstanceValidateBeforeCall(String worldId, String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling getWorldInstance(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getWorldInstance(Async)");
        }

        return getWorldInstanceCall(worldId, instanceId, _callback);

    }

    /**
     * Get World Instance
     * Returns a worlds instance.
     * @param worldId Must be a valid world ID. (required)
     * @param instanceId Must be a valid instance ID. (required)
     * @return Instance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Instance object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public Instance getWorldInstance(String worldId, String instanceId) throws ApiException {
        ApiResponse<Instance> localVarResp = getWorldInstanceWithHttpInfo(worldId, instanceId);
        return localVarResp.getData();
    }

    /**
     * Get World Instance
     * Returns a worlds instance.
     * @param worldId Must be a valid world ID. (required)
     * @param instanceId Must be a valid instance ID. (required)
     * @return ApiResponse&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Instance object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Instance> getWorldInstanceWithHttpInfo(String worldId, String instanceId) throws ApiException {
        okhttp3.Call localVarCall = getWorldInstanceValidateBeforeCall(worldId, instanceId, null);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get World Instance (asynchronously)
     * Returns a worlds instance.
     * @param worldId Must be a valid world ID. (required)
     * @param instanceId Must be a valid instance ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Instance object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorldInstanceAsync(String worldId, String instanceId, final ApiCallback<Instance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorldInstanceValidateBeforeCall(worldId, instanceId, _callback);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorldMetadata
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getWorldMetadataCall(String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}/metadata"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorldMetadataValidateBeforeCall(String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling getWorldMetadata(Async)");
        }

        return getWorldMetadataCall(worldId, _callback);

    }

    /**
     * Get World Metadata
     * Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
     * @param worldId Must be a valid world ID. (required)
     * @return WorldMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public WorldMetadata getWorldMetadata(String worldId) throws ApiException {
        ApiResponse<WorldMetadata> localVarResp = getWorldMetadataWithHttpInfo(worldId);
        return localVarResp.getData();
    }

    /**
     * Get World Metadata
     * Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;WorldMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<WorldMetadata> getWorldMetadataWithHttpInfo(String worldId) throws ApiException {
        okhttp3.Call localVarCall = getWorldMetadataValidateBeforeCall(worldId, null);
        Type localVarReturnType = new TypeToken<WorldMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get World Metadata (asynchronously)
     * Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with &#x60;updateWorld&#x60; and can be any arbitrary object.
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getWorldMetadataAsync(String worldId, final ApiCallback<WorldMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorldMetadataValidateBeforeCall(worldId, _callback);
        Type localVarReturnType = new TypeToken<WorldMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorldPublishStatus
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single WorldPublishStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorldPublishStatusCall(String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}/publish"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorldPublishStatusValidateBeforeCall(String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling getWorldPublishStatus(Async)");
        }

        return getWorldPublishStatusCall(worldId, _callback);

    }

    /**
     * Get World Publish Status
     * Returns a worlds publish status.
     * @param worldId Must be a valid world ID. (required)
     * @return WorldPublishStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single WorldPublishStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public WorldPublishStatus getWorldPublishStatus(String worldId) throws ApiException {
        ApiResponse<WorldPublishStatus> localVarResp = getWorldPublishStatusWithHttpInfo(worldId);
        return localVarResp.getData();
    }

    /**
     * Get World Publish Status
     * Returns a worlds publish status.
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;WorldPublishStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single WorldPublishStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorldPublishStatus> getWorldPublishStatusWithHttpInfo(String worldId) throws ApiException {
        okhttp3.Call localVarCall = getWorldPublishStatusValidateBeforeCall(worldId, null);
        Type localVarReturnType = new TypeToken<WorldPublishStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get World Publish Status (asynchronously)
     * Returns a worlds publish status.
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single WorldPublishStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorldPublishStatusAsync(String worldId, final ApiCallback<WorldPublishStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorldPublishStatusValidateBeforeCall(worldId, _callback);
        Type localVarReturnType = new TypeToken<WorldPublishStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishWorld
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TODO </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishWorldCall(String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}/publish"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishWorldValidateBeforeCall(String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling publishWorld(Async)");
        }

        return publishWorldCall(worldId, _callback);

    }

    /**
     * Publish World
     * Publish a world. You can only publish one world per week.
     * @param worldId Must be a valid world ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TODO </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public void publishWorld(String worldId) throws ApiException {
        publishWorldWithHttpInfo(worldId);
    }

    /**
     * Publish World
     * Publish a world. You can only publish one world per week.
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TODO </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> publishWorldWithHttpInfo(String worldId) throws ApiException {
        okhttp3.Call localVarCall = publishWorldValidateBeforeCall(worldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publish World (asynchronously)
     * Publish a world. You can only publish one world per week.
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TODO </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishWorldAsync(String worldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishWorldValidateBeforeCall(worldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchWorlds
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own worlds. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param fuzzy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchWorldsCall(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, Boolean fuzzy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (notag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notag", notag));
        }

        if (releaseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseStatus", releaseStatus));
        }

        if (maxUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUnityVersion", maxUnityVersion));
        }

        if (minUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minUnityVersion", minUnityVersion));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (fuzzy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuzzy", fuzzy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchWorldsValidateBeforeCall(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, Boolean fuzzy, final ApiCallback _callback) throws ApiException {
        return searchWorldsCall(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, fuzzy, _callback);

    }

    /**
     * Search All Worlds
     * Search and list any worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own worlds. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param fuzzy  (optional)
     * @return List&lt;LimitedWorld&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<LimitedWorld> searchWorlds(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, Boolean fuzzy) throws ApiException {
        ApiResponse<List<LimitedWorld>> localVarResp = searchWorldsWithHttpInfo(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, fuzzy);
        return localVarResp.getData();
    }

    /**
     * Search All Worlds
     * Search and list any worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own worlds. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param fuzzy  (optional)
     * @return ApiResponse&lt;List&lt;LimitedWorld&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LimitedWorld>> searchWorldsWithHttpInfo(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, Boolean fuzzy) throws ApiException {
        okhttp3.Call localVarCall = searchWorldsValidateBeforeCall(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, fuzzy, null);
        Type localVarReturnType = new TypeToken<List<LimitedWorld>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search All Worlds (asynchronously)
     * Search and list any worlds by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own worlds. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param fuzzy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedWorld objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchWorldsAsync(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, Boolean fuzzy, final ApiCallback<List<LimitedWorld>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchWorldsValidateBeforeCall(featured, sort, user, userId, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, fuzzy, _callback);
        Type localVarReturnType = new TypeToken<List<LimitedWorld>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpublishWorld
     * @param worldId Must be a valid world ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublishWorldCall(String worldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}/publish"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublishWorldValidateBeforeCall(String worldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling unpublishWorld(Async)");
        }

        return unpublishWorldCall(worldId, _callback);

    }

    /**
     * Unpublish World
     * Unpublish a world.
     * @param worldId Must be a valid world ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public void unpublishWorld(String worldId) throws ApiException {
        unpublishWorldWithHttpInfo(worldId);
    }

    /**
     * Unpublish World
     * Unpublish a world.
     * @param worldId Must be a valid world ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unpublishWorldWithHttpInfo(String worldId) throws ApiException {
        okhttp3.Call localVarCall = unpublishWorldValidateBeforeCall(worldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unpublish World (asynchronously)
     * Unpublish a world.
     * @param worldId Must be a valid world ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublishWorldAsync(String worldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublishWorldValidateBeforeCall(worldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorld
     * @param worldId Must be a valid world ID. (required)
     * @param updateWorldRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorldCall(String worldId, UpdateWorldRequest updateWorldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWorldRequest;

        // create path and map variables
        String localVarPath = "/worlds/{worldId}"
            .replace("{" + "worldId" + "}", localVarApiClient.escapeString(worldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorldValidateBeforeCall(String worldId, UpdateWorldRequest updateWorldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'worldId' is set
        if (worldId == null) {
            throw new ApiException("Missing the required parameter 'worldId' when calling updateWorld(Async)");
        }

        return updateWorldCall(worldId, updateWorldRequest, _callback);

    }

    /**
     * Update World
     * Update information about a specific World.
     * @param worldId Must be a valid world ID. (required)
     * @param updateWorldRequest  (optional)
     * @return World
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public World updateWorld(String worldId, UpdateWorldRequest updateWorldRequest) throws ApiException {
        ApiResponse<World> localVarResp = updateWorldWithHttpInfo(worldId, updateWorldRequest);
        return localVarResp.getData();
    }

    /**
     * Update World
     * Update information about a specific World.
     * @param worldId Must be a valid world ID. (required)
     * @param updateWorldRequest  (optional)
     * @return ApiResponse&lt;World&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<World> updateWorldWithHttpInfo(String worldId, UpdateWorldRequest updateWorldRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorldValidateBeforeCall(worldId, updateWorldRequest, null);
        Type localVarReturnType = new TypeToken<World>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update World (asynchronously)
     * Update information about a specific World.
     * @param worldId Must be a valid world ID. (required)
     * @param updateWorldRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single World object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent world. Sometimes returns with &#x60;model &lt;worldId&gt; not found&#x60; instead of &#x60;World &lt;worldId not found&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorldAsync(String worldId, UpdateWorldRequest updateWorldRequest, final ApiCallback<World> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorldValidateBeforeCall(worldId, updateWorldRequest, _callback);
        Type localVarReturnType = new TypeToken<World>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
