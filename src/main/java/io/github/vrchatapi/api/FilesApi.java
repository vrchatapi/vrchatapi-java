/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.AdminAssetBundle;
import io.github.vrchatapi.model.CreateFileRequest;
import io.github.vrchatapi.model.CreateFileVersionRequest;
import io.github.vrchatapi.model.Error;
import java.io.File;
import io.github.vrchatapi.model.FileAnalysis;
import io.github.vrchatapi.model.FileUploadURL;
import io.github.vrchatapi.model.FileVersionUploadStatus;
import io.github.vrchatapi.model.FinishFileDataUploadRequest;
import io.github.vrchatapi.model.ModelFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFile
     * @param createFileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileCall(CreateFileRequest createFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFileRequest;

        // create path and map variables
        String localVarPath = "/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileValidateBeforeCall(CreateFileRequest createFileRequest, final ApiCallback _callback) throws ApiException {
        return createFileCall(createFileRequest, _callback);

    }

    /**
     * Create File
     * Creates a new File object
     * @param createFileRequest  (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile createFile(CreateFileRequest createFileRequest) throws ApiException {
        ApiResponse<ModelFile> localVarResp = createFileWithHttpInfo(createFileRequest);
        return localVarResp.getData();
    }

    /**
     * Create File
     * Creates a new File object
     * @param createFileRequest  (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> createFileWithHttpInfo(CreateFileRequest createFileRequest) throws ApiException {
        okhttp3.Call localVarCall = createFileValidateBeforeCall(createFileRequest, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create File (asynchronously)
     * Creates a new File object
     * @param createFileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileAsync(CreateFileRequest createFileRequest, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileValidateBeforeCall(createFileRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFileVersion
     * @param fileId Must be a valid file ID. (required)
     * @param createFileVersionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileVersionCall(String fileId, CreateFileVersionRequest createFileVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFileVersionRequest;

        // create path and map variables
        String localVarPath = "/file/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileVersionValidateBeforeCall(String fileId, CreateFileVersionRequest createFileVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling createFileVersion(Async)");
        }

        return createFileVersionCall(fileId, createFileVersionRequest, _callback);

    }

    /**
     * Create File Version
     * Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
     * @param fileId Must be a valid file ID. (required)
     * @param createFileVersionRequest  (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile createFileVersion(String fileId, CreateFileVersionRequest createFileVersionRequest) throws ApiException {
        ApiResponse<ModelFile> localVarResp = createFileVersionWithHttpInfo(fileId, createFileVersionRequest);
        return localVarResp.getData();
    }

    /**
     * Create File Version
     * Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
     * @param fileId Must be a valid file ID. (required)
     * @param createFileVersionRequest  (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> createFileVersionWithHttpInfo(String fileId, CreateFileVersionRequest createFileVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = createFileVersionValidateBeforeCall(fileId, createFileVersionRequest, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create File Version (asynchronously)
     * Creates a new FileVersion. Once a Version has been created, proceed to the &#x60;/file/{fileId}/{versionId}/file/start&#x60; endpoint to start a file upload.
     * @param fileId Must be a valid file ID. (required)
     * @param createFileVersionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFileVersionAsync(String fileId, CreateFileVersionRequest createFileVersionRequest, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileVersionValidateBeforeCall(fileId, createFileVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFile
     * @param fileId Must be a valid file ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFile(Async)");
        }

        return deleteFileCall(fileId, _callback);

    }

    /**
     * Delete File
     * Deletes a File object.
     * @param fileId Must be a valid file ID. (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile deleteFile(String fileId) throws ApiException {
        ApiResponse<ModelFile> localVarResp = deleteFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Delete File
     * Deletes a File object.
     * @param fileId Must be a valid file ID. (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> deleteFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete File (asynchronously)
     * Deletes a File object.
     * @param fileId Must be a valid file ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to delete a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAsync(String fileId, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFileVersion
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not the last one. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileVersionCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileVersionValidateBeforeCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFileVersion(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteFileVersion(Async)");
        }

        return deleteFileVersionCall(fileId, versionId, _callback);

    }

    /**
     * Delete File Version
     * Delete a specific version of a file. You can only delete the latest version.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not the last one. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile deleteFileVersion(String fileId, Integer versionId) throws ApiException {
        ApiResponse<ModelFile> localVarResp = deleteFileVersionWithHttpInfo(fileId, versionId);
        return localVarResp.getData();
    }

    /**
     * Delete File Version
     * Delete a specific version of a file. You can only delete the latest version.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not the last one. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> deleteFileVersionWithHttpInfo(String fileId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileVersionValidateBeforeCall(fileId, versionId, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete File Version (asynchronously)
     * Delete a specific version of a file. You can only delete the latest version.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to delete the initial version of a file. Delete the main File object instead. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error response when trying to delete any version of a file that is not the last one. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileVersionAsync(String fileId, Integer versionId, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileVersionValidateBeforeCall(fileId, versionId, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadFileVersion
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFileVersionCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadFileVersionValidateBeforeCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling downloadFileVersion(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling downloadFileVersion(Async)");
        }

        return downloadFileVersionCall(fileId, versionId, _callback);

    }

    /**
     * Download File Version
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public File downloadFileVersion(String fileId, Integer versionId) throws ApiException {
        ApiResponse<File> localVarResp = downloadFileVersionWithHttpInfo(fileId, versionId);
        return localVarResp.getData();
    }

    /**
     * Download File Version
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadFileVersionWithHttpInfo(String fileId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = downloadFileVersionValidateBeforeCall(fileId, versionId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download File Version (asynchronously)
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the &#x60;extension&#x60; field when neccesary.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw file </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadFileVersionAsync(String fileId, Integer versionId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadFileVersionValidateBeforeCall(fileId, versionId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for finishFileDataUpload
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param finishFileDataUploadRequest Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finishFileDataUploadCall(String fileId, Integer versionId, String fileType, FinishFileDataUploadRequest finishFileDataUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = finishFileDataUploadRequest;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}/{fileType}/finish"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "fileType" + "}", localVarApiClient.escapeString(fileType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finishFileDataUploadValidateBeforeCall(String fileId, Integer versionId, String fileType, FinishFileDataUploadRequest finishFileDataUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling finishFileDataUpload(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling finishFileDataUpload(Async)");
        }

        // verify the required parameter 'fileType' is set
        if (fileType == null) {
            throw new ApiException("Missing the required parameter 'fileType' when calling finishFileDataUpload(Async)");
        }

        return finishFileDataUploadCall(fileId, versionId, fileType, finishFileDataUploadRequest, _callback);

    }

    /**
     * Finish FileData Upload
     * Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param finishFileDataUploadRequest Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile finishFileDataUpload(String fileId, Integer versionId, String fileType, FinishFileDataUploadRequest finishFileDataUploadRequest) throws ApiException {
        ApiResponse<ModelFile> localVarResp = finishFileDataUploadWithHttpInfo(fileId, versionId, fileType, finishFileDataUploadRequest);
        return localVarResp.getData();
    }

    /**
     * Finish FileData Upload
     * Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param finishFileDataUploadRequest Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> finishFileDataUploadWithHttpInfo(String fileId, Integer versionId, String fileType, FinishFileDataUploadRequest finishFileDataUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = finishFileDataUploadValidateBeforeCall(fileId, versionId, fileType, finishFileDataUploadRequest, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finish FileData Upload (asynchronously)
     * Finish an upload of a FileData. This will mark it as \&quot;complete\&quot;. After uploading the &#x60;file&#x60; for Avatars and Worlds you then have to upload a &#x60;signature&#x60; file.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param finishFileDataUploadRequest Please see documentation on ETag&#39;s: [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)  ETag&#39;s should NOT be present when uploading a &#x60;signature&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finishFileDataUploadAsync(String fileId, Integer versionId, String fileType, FinishFileDataUploadRequest finishFileDataUploadRequest, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = finishFileDataUploadValidateBeforeCall(fileId, versionId, fileType, finishFileDataUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdminAssetBundle
     * @param adminAssetBundleId Must be a valid admin asset bundle ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single AdminAssetBundle object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminAssetBundleCall(String adminAssetBundleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/adminassetbundles/{adminAssetBundleId}"
            .replace("{" + "adminAssetBundleId" + "}", localVarApiClient.escapeString(adminAssetBundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdminAssetBundleValidateBeforeCall(String adminAssetBundleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminAssetBundleId' is set
        if (adminAssetBundleId == null) {
            throw new ApiException("Missing the required parameter 'adminAssetBundleId' when calling getAdminAssetBundle(Async)");
        }

        return getAdminAssetBundleCall(adminAssetBundleId, _callback);

    }

    /**
     * Get AdminAssetBundle
     * Returns an AdminAssetBundle
     * @param adminAssetBundleId Must be a valid admin asset bundle ID. (required)
     * @return AdminAssetBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single AdminAssetBundle object. </td><td>  -  </td></tr>
     </table>
     */
    public AdminAssetBundle getAdminAssetBundle(String adminAssetBundleId) throws ApiException {
        ApiResponse<AdminAssetBundle> localVarResp = getAdminAssetBundleWithHttpInfo(adminAssetBundleId);
        return localVarResp.getData();
    }

    /**
     * Get AdminAssetBundle
     * Returns an AdminAssetBundle
     * @param adminAssetBundleId Must be a valid admin asset bundle ID. (required)
     * @return ApiResponse&lt;AdminAssetBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single AdminAssetBundle object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminAssetBundle> getAdminAssetBundleWithHttpInfo(String adminAssetBundleId) throws ApiException {
        okhttp3.Call localVarCall = getAdminAssetBundleValidateBeforeCall(adminAssetBundleId, null);
        Type localVarReturnType = new TypeToken<AdminAssetBundle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get AdminAssetBundle (asynchronously)
     * Returns an AdminAssetBundle
     * @param adminAssetBundleId Must be a valid admin asset bundle ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single AdminAssetBundle object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdminAssetBundleAsync(String adminAssetBundleId, final ApiCallback<AdminAssetBundle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdminAssetBundleValidateBeforeCall(adminAssetBundleId, _callback);
        Type localVarReturnType = new TypeToken<AdminAssetBundle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFile
     * @param fileId Must be a valid file ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }

        return getFileCall(fileId, _callback);

    }

    /**
     * Show File
     * Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
     * @param fileId Must be a valid file ID. (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile getFile(String fileId) throws ApiException {
        ApiResponse<ModelFile> localVarResp = getFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Show File
     * Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
     * @param fileId Must be a valid file ID. (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> getFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show File (asynchronously)
     * Shows general information about the \&quot;File\&quot; object. Each File can have several \&quot;Version\&quot;&#39;s, and each Version can have multiple real files or \&quot;Data\&quot; blobs.
     * @param fileId Must be a valid file ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(String fileId, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileAnalysis
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAnalysisCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/{fileId}/{versionId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileAnalysisValidateBeforeCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileAnalysis(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getFileAnalysis(Async)");
        }

        return getFileAnalysisCall(fileId, versionId, _callback);

    }

    /**
     * Get File Version Analysis
     * Get the performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return FileAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public FileAnalysis getFileAnalysis(String fileId, Integer versionId) throws ApiException {
        ApiResponse<FileAnalysis> localVarResp = getFileAnalysisWithHttpInfo(fileId, versionId);
        return localVarResp.getData();
    }

    /**
     * Get File Version Analysis
     * Get the performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return ApiResponse&lt;FileAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileAnalysis> getFileAnalysisWithHttpInfo(String fileId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = getFileAnalysisValidateBeforeCall(fileId, versionId, null);
        Type localVarReturnType = new TypeToken<FileAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File Version Analysis (asynchronously)
     * Get the performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAnalysisAsync(String fileId, Integer versionId, final ApiCallback<FileAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileAnalysisValidateBeforeCall(fileId, versionId, _callback);
        Type localVarReturnType = new TypeToken<FileAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileAnalysisSecurity
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAnalysisSecurityCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/{fileId}/{versionId}/security"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileAnalysisSecurityValidateBeforeCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileAnalysisSecurity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getFileAnalysisSecurity(Async)");
        }

        return getFileAnalysisSecurityCall(fileId, versionId, _callback);

    }

    /**
     * Get File Version Analysis Security
     * Get the security performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return FileAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public FileAnalysis getFileAnalysisSecurity(String fileId, Integer versionId) throws ApiException {
        ApiResponse<FileAnalysis> localVarResp = getFileAnalysisSecurityWithHttpInfo(fileId, versionId);
        return localVarResp.getData();
    }

    /**
     * Get File Version Analysis Security
     * Get the security performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return ApiResponse&lt;FileAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileAnalysis> getFileAnalysisSecurityWithHttpInfo(String fileId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = getFileAnalysisSecurityValidateBeforeCall(fileId, versionId, null);
        Type localVarReturnType = new TypeToken<FileAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File Version Analysis Security (asynchronously)
     * Get the security performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAnalysisSecurityAsync(String fileId, Integer versionId, final ApiCallback<FileAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileAnalysisSecurityValidateBeforeCall(fileId, versionId, _callback);
        Type localVarReturnType = new TypeToken<FileAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileAnalysisStandard
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAnalysisStandardCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysis/{fileId}/{versionId}/standard"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileAnalysisStandardValidateBeforeCall(String fileId, Integer versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileAnalysisStandard(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getFileAnalysisStandard(Async)");
        }

        return getFileAnalysisStandardCall(fileId, versionId, _callback);

    }

    /**
     * Get File Version Analysis Standard
     * Get the standard performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return FileAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public FileAnalysis getFileAnalysisStandard(String fileId, Integer versionId) throws ApiException {
        ApiResponse<FileAnalysis> localVarResp = getFileAnalysisStandardWithHttpInfo(fileId, versionId);
        return localVarResp.getData();
    }

    /**
     * Get File Version Analysis Standard
     * Get the standard performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @return ApiResponse&lt;FileAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileAnalysis> getFileAnalysisStandardWithHttpInfo(String fileId, Integer versionId) throws ApiException {
        okhttp3.Call localVarCall = getFileAnalysisStandardValidateBeforeCall(fileId, versionId, null);
        Type localVarReturnType = new TypeToken<FileAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File Version Analysis Standard (asynchronously)
     * Get the standard performance analysis for the uploaded assets of an avatar
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FileAnalysis object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Error response when requesting file Analysis that is not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAnalysisStandardAsync(String fileId, Integer versionId, final ApiCallback<FileAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileAnalysisStandardValidateBeforeCall(fileId, versionId, _callback);
        Type localVarReturnType = new TypeToken<FileAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileDataUploadStatus
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileDataUploadStatusCall(String fileId, Integer versionId, String fileType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}/{fileType}/status"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "fileType" + "}", localVarApiClient.escapeString(fileType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileDataUploadStatusValidateBeforeCall(String fileId, Integer versionId, String fileType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileDataUploadStatus(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getFileDataUploadStatus(Async)");
        }

        // verify the required parameter 'fileType' is set
        if (fileType == null) {
            throw new ApiException("Missing the required parameter 'fileType' when calling getFileDataUploadStatus(Async)");
        }

        return getFileDataUploadStatusCall(fileId, versionId, fileType, _callback);

    }

    /**
     * Check FileData Upload Status
     * Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @return FileVersionUploadStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public FileVersionUploadStatus getFileDataUploadStatus(String fileId, Integer versionId, String fileType) throws ApiException {
        ApiResponse<FileVersionUploadStatus> localVarResp = getFileDataUploadStatusWithHttpInfo(fileId, versionId, fileType);
        return localVarResp.getData();
    }

    /**
     * Check FileData Upload Status
     * Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @return ApiResponse&lt;FileVersionUploadStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileVersionUploadStatus> getFileDataUploadStatusWithHttpInfo(String fileId, Integer versionId, String fileType) throws ApiException {
        okhttp3.Call localVarCall = getFileDataUploadStatusValidateBeforeCall(fileId, versionId, fileType, null);
        Type localVarReturnType = new TypeToken<FileVersionUploadStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check FileData Upload Status (asynchronously)
     * Retrieves the upload status for file upload. Can currently only be accessed when &#x60;status&#x60; is &#x60;waiting&#x60;. Trying to access it on a file version already uploaded currently times out.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileDataUploadStatusAsync(String fileId, Integer versionId, String fileType, final ApiCallback<FileVersionUploadStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileDataUploadStatusValidateBeforeCall(fileId, versionId, fileType, _callback);
        Type localVarReturnType = new TypeToken<FileVersionUploadStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFiles
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesCall(String tag, String userId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesValidateBeforeCall(String tag, String userId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        return getFilesCall(tag, userId, n, offset, _callback);

    }

    /**
     * List Files
     * Returns a list of files
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return List&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelFile> getFiles(String tag, String userId, Integer n, Integer offset) throws ApiException {
        ApiResponse<List<ModelFile>> localVarResp = getFilesWithHttpInfo(tag, userId, n, offset);
        return localVarResp.getData();
    }

    /**
     * List Files
     * Returns a list of files
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;List&lt;ModelFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelFile>> getFilesWithHttpInfo(String tag, String userId, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFilesValidateBeforeCall(tag, userId, n, offset, null);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Files (asynchronously)
     * Returns a list of files
     * @param tag Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default. (optional)
     * @param userId UserID, will always generate a 500 permission error. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of File objects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAsync(String tag, String userId, Integer n, Integer offset, final ApiCallback<List<ModelFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesValidateBeforeCall(tag, userId, n, offset, _callback);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startFileDataUpload
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param partNumber The part number to start uploading. If not provided, the first part will be started. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startFileDataUploadCall(String fileId, Integer versionId, String fileType, Integer partNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/{fileId}/{versionId}/{fileType}/start"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "fileType" + "}", localVarApiClient.escapeString(fileType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partNumber", partNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startFileDataUploadValidateBeforeCall(String fileId, Integer versionId, String fileType, Integer partNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling startFileDataUpload(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling startFileDataUpload(Async)");
        }

        // verify the required parameter 'fileType' is set
        if (fileType == null) {
            throw new ApiException("Missing the required parameter 'fileType' when calling startFileDataUpload(Async)");
        }

        return startFileDataUploadCall(fileId, versionId, fileType, partNumber, _callback);

    }

    /**
     * Start FileData Upload
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param partNumber The part number to start uploading. If not provided, the first part will be started. (optional)
     * @return FileUploadURL
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public FileUploadURL startFileDataUpload(String fileId, Integer versionId, String fileType, Integer partNumber) throws ApiException {
        ApiResponse<FileUploadURL> localVarResp = startFileDataUploadWithHttpInfo(fileId, versionId, fileType, partNumber);
        return localVarResp.getData();
    }

    /**
     * Start FileData Upload
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param partNumber The part number to start uploading. If not provided, the first part will be started. (optional)
     * @return ApiResponse&lt;FileUploadURL&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileUploadURL> startFileDataUploadWithHttpInfo(String fileId, Integer versionId, String fileType, Integer partNumber) throws ApiException {
        okhttp3.Call localVarCall = startFileDataUploadValidateBeforeCall(fileId, versionId, fileType, partNumber, null);
        Type localVarReturnType = new TypeToken<FileUploadURL>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start FileData Upload (asynchronously)
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each &#x60;partNumber&#x60;. Please see AWS&#39;s REST documentation on \&quot;PUT Object to S3\&quot; on how to upload. Once all parts has been uploaded, proceed to &#x60;/finish&#x60; endpoint.  **Note:** &#x60;nextPartNumber&#x60; seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @param fileId Must be a valid file ID. (required)
     * @param versionId Version ID of the asset. (required)
     * @param fileType Type of file. (required)
     * @param partNumber The part number to start uploading. If not provided, the first part will be started. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to start an upload against a FileVersion that is already marked as  &#x60;complete&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startFileDataUploadAsync(String fileId, Integer versionId, String fileType, Integer partNumber, final ApiCallback<FileUploadURL> _callback) throws ApiException {

        okhttp3.Call localVarCall = startFileDataUploadValidateBeforeCall(fileId, versionId, fileType, partNumber, _callback);
        Type localVarReturnType = new TypeToken<FileUploadURL>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadGalleryImage
     * @param _file The binary blob of the png file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadGalleryImageCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gallery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadGalleryImageValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadGalleryImage(Async)");
        }

        return uploadGalleryImageCall(_file, _callback);

    }

    /**
     * Upload gallery image
     * Upload a gallery image
     * @param _file The binary blob of the png file. (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile uploadGalleryImage(File _file) throws ApiException {
        ApiResponse<ModelFile> localVarResp = uploadGalleryImageWithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Upload gallery image
     * Upload a gallery image
     * @param _file The binary blob of the png file. (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> uploadGalleryImageWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadGalleryImageValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload gallery image (asynchronously)
     * Upload a gallery image
     * @param _file The binary blob of the png file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadGalleryImageAsync(File _file, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadGalleryImageValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadIcon
     * @param _file The binary blob of the png file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadIconCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/icon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadIconValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadIcon(Async)");
        }

        return uploadIconCall(_file, _callback);

    }

    /**
     * Upload icon
     * Upload an icon
     * @param _file The binary blob of the png file. (required)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile uploadIcon(File _file) throws ApiException {
        ApiResponse<ModelFile> localVarResp = uploadIconWithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Upload icon
     * Upload an icon
     * @param _file The binary blob of the png file. (required)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> uploadIconWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadIconValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload icon (asynchronously)
     * Upload an icon
     * @param _file The binary blob of the png file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadIconAsync(File _file, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadIconValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadImage
     * @param _file The binary blob of the png file. (required)
     * @param tag Needs to be either icon, gallery, sticker, emoji, or emojianimated (required)
     * @param frames Required for emojianimated. Total number of frames to be animated (2-64) (optional)
     * @param framesOverTime Required for emojianimated. Animation frames per second (1-64) (optional)
     * @param animationStyle Animation style for sticker, required for emoji. (optional)
     * @param maskTag Mask of the sticker, optional for emoji. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadImageCall(File _file, String tag, Integer frames, Integer framesOverTime, String animationStyle, String maskTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/file/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (tag != null) {
            localVarFormParams.put("tag", tag);
        }

        if (frames != null) {
            localVarFormParams.put("frames", frames);
        }

        if (framesOverTime != null) {
            localVarFormParams.put("framesOverTime", framesOverTime);
        }

        if (animationStyle != null) {
            localVarFormParams.put("animationStyle", animationStyle);
        }

        if (maskTag != null) {
            localVarFormParams.put("maskTag", maskTag);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageValidateBeforeCall(File _file, String tag, Integer frames, Integer framesOverTime, String animationStyle, String maskTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadImage(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling uploadImage(Async)");
        }

        return uploadImageCall(_file, tag, frames, framesOverTime, animationStyle, maskTag, _callback);

    }

    /**
     * Upload gallery image, icon, emoji or sticker
     * Upload an image, which can be an icon, gallery image, sticker or emoji
     * @param _file The binary blob of the png file. (required)
     * @param tag Needs to be either icon, gallery, sticker, emoji, or emojianimated (required)
     * @param frames Required for emojianimated. Total number of frames to be animated (2-64) (optional)
     * @param framesOverTime Required for emojianimated. Animation frames per second (1-64) (optional)
     * @param animationStyle Animation style for sticker, required for emoji. (optional)
     * @param maskTag Mask of the sticker, optional for emoji. (optional)
     * @return ModelFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ModelFile uploadImage(File _file, String tag, Integer frames, Integer framesOverTime, String animationStyle, String maskTag) throws ApiException {
        ApiResponse<ModelFile> localVarResp = uploadImageWithHttpInfo(_file, tag, frames, framesOverTime, animationStyle, maskTag);
        return localVarResp.getData();
    }

    /**
     * Upload gallery image, icon, emoji or sticker
     * Upload an image, which can be an icon, gallery image, sticker or emoji
     * @param _file The binary blob of the png file. (required)
     * @param tag Needs to be either icon, gallery, sticker, emoji, or emojianimated (required)
     * @param frames Required for emojianimated. Total number of frames to be animated (2-64) (optional)
     * @param framesOverTime Required for emojianimated. Animation frames per second (1-64) (optional)
     * @param animationStyle Animation style for sticker, required for emoji. (optional)
     * @param maskTag Mask of the sticker, optional for emoji. (optional)
     * @return ApiResponse&lt;ModelFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelFile> uploadImageWithHttpInfo(File _file, String tag, Integer frames, Integer framesOverTime, String animationStyle, String maskTag) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(_file, tag, frames, framesOverTime, animationStyle, maskTag, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload gallery image, icon, emoji or sticker (asynchronously)
     * Upload an image, which can be an icon, gallery image, sticker or emoji
     * @param _file The binary blob of the png file. (required)
     * @param tag Needs to be either icon, gallery, sticker, emoji, or emojianimated (required)
     * @param frames Required for emojianimated. Total number of frames to be animated (2-64) (optional)
     * @param framesOverTime Required for emojianimated. Animation frames per second (1-64) (optional)
     * @param animationStyle Animation style for sticker, required for emoji. (optional)
     * @param maskTag Mask of the sticker, optional for emoji. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single File object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadImageAsync(File _file, String tag, Integer frames, Integer framesOverTime, String animationStyle, String maskTag, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(_file, tag, frames, framesOverTime, animationStyle, maskTag, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
