/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.2
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.AddGroupGalleryImageRequest;
import io.github.vrchatapi.model.BanGroupMemberRequest;
import io.github.vrchatapi.model.CreateGroupAnnouncementRequest;
import io.github.vrchatapi.model.CreateGroupGalleryRequest;
import io.github.vrchatapi.model.CreateGroupInviteRequest;
import io.github.vrchatapi.model.CreateGroupPostRequest;
import io.github.vrchatapi.model.CreateGroupRequest;
import io.github.vrchatapi.model.CreateGroupRoleRequest;
import io.github.vrchatapi.model.Error;
import io.github.vrchatapi.model.GetGroupPosts200Response;
import io.github.vrchatapi.model.Group;
import io.github.vrchatapi.model.GroupAnnouncement;
import io.github.vrchatapi.model.GroupGallery;
import io.github.vrchatapi.model.GroupGalleryImage;
import io.github.vrchatapi.model.GroupInstance;
import io.github.vrchatapi.model.GroupLimitedMember;
import io.github.vrchatapi.model.GroupMember;
import io.github.vrchatapi.model.GroupPermission;
import io.github.vrchatapi.model.GroupPost;
import io.github.vrchatapi.model.GroupRole;
import io.github.vrchatapi.model.GroupRoleTemplateValues;
import io.github.vrchatapi.model.GroupSearchSort;
import io.github.vrchatapi.model.LimitedGroup;
import java.time.OffsetDateTime;
import io.github.vrchatapi.model.PaginatedGroupAuditLogEntryList;
import io.github.vrchatapi.model.RespondGroupJoinRequest;
import io.github.vrchatapi.model.Success;
import io.github.vrchatapi.model.UpdateGroupGalleryRequest;
import io.github.vrchatapi.model.UpdateGroupMemberRequest;
import io.github.vrchatapi.model.UpdateGroupRepresentationRequest;
import io.github.vrchatapi.model.UpdateGroupRequest;
import io.github.vrchatapi.model.UpdateGroupRoleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addGroupGalleryImage
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param addGroupGalleryImageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGalleryImage object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupGalleryImageCall(String groupId, String groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addGroupGalleryImageRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/galleries/{groupGalleryId}/images"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "groupGalleryId" + "}", localVarApiClient.escapeString(groupGalleryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupGalleryImageValidateBeforeCall(String groupId, String groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupGalleryImage(Async)");
        }

        // verify the required parameter 'groupGalleryId' is set
        if (groupGalleryId == null) {
            throw new ApiException("Missing the required parameter 'groupGalleryId' when calling addGroupGalleryImage(Async)");
        }

        // verify the required parameter 'addGroupGalleryImageRequest' is set
        if (addGroupGalleryImageRequest == null) {
            throw new ApiException("Missing the required parameter 'addGroupGalleryImageRequest' when calling addGroupGalleryImage(Async)");
        }

        return addGroupGalleryImageCall(groupId, groupGalleryId, addGroupGalleryImageRequest, _callback);

    }

    /**
     * Add Group Gallery Image
     * Adds an image to a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param addGroupGalleryImageRequest  (required)
     * @return GroupGalleryImage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGalleryImage object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupGalleryImage addGroupGalleryImage(String groupId, String groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest) throws ApiException {
        ApiResponse<GroupGalleryImage> localVarResp = addGroupGalleryImageWithHttpInfo(groupId, groupGalleryId, addGroupGalleryImageRequest);
        return localVarResp.getData();
    }

    /**
     * Add Group Gallery Image
     * Adds an image to a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param addGroupGalleryImageRequest  (required)
     * @return ApiResponse&lt;GroupGalleryImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGalleryImage object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupGalleryImage> addGroupGalleryImageWithHttpInfo(String groupId, String groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest) throws ApiException {
        okhttp3.Call localVarCall = addGroupGalleryImageValidateBeforeCall(groupId, groupGalleryId, addGroupGalleryImageRequest, null);
        Type localVarReturnType = new TypeToken<GroupGalleryImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Group Gallery Image (asynchronously)
     * Adds an image to a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param addGroupGalleryImageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGalleryImage object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupGalleryImageAsync(String groupId, String groupGalleryId, AddGroupGalleryImageRequest addGroupGalleryImageRequest, final ApiCallback<GroupGalleryImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupGalleryImageValidateBeforeCall(groupId, groupGalleryId, addGroupGalleryImageRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupGalleryImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addGroupMemberRole
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupMemberRoleCall(String groupId, String userId, String groupRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members/{userId}/roles/{groupRoleId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "groupRoleId" + "}", localVarApiClient.escapeString(groupRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupMemberRoleValidateBeforeCall(String groupId, String userId, String groupRoleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupMemberRole(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addGroupMemberRole(Async)");
        }

        // verify the required parameter 'groupRoleId' is set
        if (groupRoleId == null) {
            throw new ApiException("Missing the required parameter 'groupRoleId' when calling addGroupMemberRole(Async)");
        }

        return addGroupMemberRoleCall(groupId, userId, groupRoleId, _callback);

    }

    /**
     * Add Role to GroupMember
     * Adds a Role to a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> addGroupMemberRole(String groupId, String userId, String groupRoleId) throws ApiException {
        ApiResponse<List<String>> localVarResp = addGroupMemberRoleWithHttpInfo(groupId, userId, groupRoleId);
        return localVarResp.getData();
    }

    /**
     * Add Role to GroupMember
     * Adds a Role to a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> addGroupMemberRoleWithHttpInfo(String groupId, String userId, String groupRoleId) throws ApiException {
        okhttp3.Call localVarCall = addGroupMemberRoleValidateBeforeCall(groupId, userId, groupRoleId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Role to GroupMember (asynchronously)
     * Adds a Role to a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupMemberRoleAsync(String groupId, String userId, String groupRoleId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupMemberRoleValidateBeforeCall(groupId, userId, groupRoleId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addGroupPost
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupPostCall(String groupId, CreateGroupPostRequest createGroupPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupPostRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/posts"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupPostValidateBeforeCall(String groupId, CreateGroupPostRequest createGroupPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupPost(Async)");
        }

        // verify the required parameter 'createGroupPostRequest' is set
        if (createGroupPostRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupPostRequest' when calling addGroupPost(Async)");
        }

        return addGroupPostCall(groupId, createGroupPostRequest, _callback);

    }

    /**
     * Create a post in a Group
     * Create a post in a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupPostRequest  (required)
     * @return GroupPost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public GroupPost addGroupPost(String groupId, CreateGroupPostRequest createGroupPostRequest) throws ApiException {
        ApiResponse<GroupPost> localVarResp = addGroupPostWithHttpInfo(groupId, createGroupPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create a post in a Group
     * Create a post in a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupPostRequest  (required)
     * @return ApiResponse&lt;GroupPost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupPost> addGroupPostWithHttpInfo(String groupId, CreateGroupPostRequest createGroupPostRequest) throws ApiException {
        okhttp3.Call localVarCall = addGroupPostValidateBeforeCall(groupId, createGroupPostRequest, null);
        Type localVarReturnType = new TypeToken<GroupPost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a post in a Group (asynchronously)
     * Create a post in a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupPostAsync(String groupId, CreateGroupPostRequest createGroupPostRequest, final ApiCallback<GroupPost> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupPostValidateBeforeCall(groupId, createGroupPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupPost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for banGroupMember
     * @param groupId Must be a valid group ID. (required)
     * @param banGroupMemberRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when banning a user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call banGroupMemberCall(String groupId, BanGroupMemberRequest banGroupMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = banGroupMemberRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/bans"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call banGroupMemberValidateBeforeCall(String groupId, BanGroupMemberRequest banGroupMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling banGroupMember(Async)");
        }

        // verify the required parameter 'banGroupMemberRequest' is set
        if (banGroupMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'banGroupMemberRequest' when calling banGroupMember(Async)");
        }

        return banGroupMemberCall(groupId, banGroupMemberRequest, _callback);

    }

    /**
     * Ban Group Member
     * Bans a user from a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param banGroupMemberRequest  (required)
     * @return GroupMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when banning a user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupMember banGroupMember(String groupId, BanGroupMemberRequest banGroupMemberRequest) throws ApiException {
        ApiResponse<GroupMember> localVarResp = banGroupMemberWithHttpInfo(groupId, banGroupMemberRequest);
        return localVarResp.getData();
    }

    /**
     * Ban Group Member
     * Bans a user from a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param banGroupMemberRequest  (required)
     * @return ApiResponse&lt;GroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when banning a user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupMember> banGroupMemberWithHttpInfo(String groupId, BanGroupMemberRequest banGroupMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = banGroupMemberValidateBeforeCall(groupId, banGroupMemberRequest, null);
        Type localVarReturnType = new TypeToken<GroupMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ban Group Member (asynchronously)
     * Bans a user from a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param banGroupMemberRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when banning a user </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call banGroupMemberAsync(String groupId, BanGroupMemberRequest banGroupMemberRequest, final ApiCallback<GroupMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = banGroupMemberValidateBeforeCall(groupId, banGroupMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelGroupRequest
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t cancel a join request if you didn&#39;t request to join․ </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelGroupRequestCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/requests"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelGroupRequestValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling cancelGroupRequest(Async)");
        }

        return cancelGroupRequestCall(groupId, _callback);

    }

    /**
     * Cancel Group Join Request
     * Cancels a request sent to join the group.
     * @param groupId Must be a valid group ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t cancel a join request if you didn&#39;t request to join․ </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public void cancelGroupRequest(String groupId) throws ApiException {
        cancelGroupRequestWithHttpInfo(groupId);
    }

    /**
     * Cancel Group Join Request
     * Cancels a request sent to join the group.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t cancel a join request if you didn&#39;t request to join․ </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelGroupRequestWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = cancelGroupRequestValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Group Join Request (asynchronously)
     * Cancels a request sent to join the group.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t cancel a join request if you didn&#39;t request to join․ </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelGroupRequestAsync(String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelGroupRequestValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroup
     * @param createGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(CreateGroupRequest createGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupRequest;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(CreateGroupRequest createGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createGroupRequest' is set
        if (createGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupRequest' when calling createGroup(Async)");
        }

        return createGroupCall(createGroupRequest, _callback);

    }

    /**
     * Create Group
     * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
     * @param createGroupRequest  (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public Group createGroup(CreateGroupRequest createGroupRequest) throws ApiException {
        ApiResponse<Group> localVarResp = createGroupWithHttpInfo(createGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create Group
     * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
     * @param createGroupRequest  (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> createGroupWithHttpInfo(CreateGroupRequest createGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroupRequest, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Group (asynchronously)
     * Creates a Group and returns a Group object. **Requires VRC+ Subscription.**
     * @param createGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(CreateGroupRequest createGroupRequest, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(createGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupAnnouncement
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupAnnouncementRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAnnouncementCall(String groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupAnnouncementRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/announcement"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupAnnouncementValidateBeforeCall(String groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createGroupAnnouncement(Async)");
        }

        // verify the required parameter 'createGroupAnnouncementRequest' is set
        if (createGroupAnnouncementRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupAnnouncementRequest' when calling createGroupAnnouncement(Async)");
        }

        return createGroupAnnouncementCall(groupId, createGroupAnnouncementRequest, _callback);

    }

    /**
     * Create Group Announcement
     * Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupAnnouncementRequest  (required)
     * @return GroupAnnouncement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupAnnouncement createGroupAnnouncement(String groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest) throws ApiException {
        ApiResponse<GroupAnnouncement> localVarResp = createGroupAnnouncementWithHttpInfo(groupId, createGroupAnnouncementRequest);
        return localVarResp.getData();
    }

    /**
     * Create Group Announcement
     * Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupAnnouncementRequest  (required)
     * @return ApiResponse&lt;GroupAnnouncement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupAnnouncement> createGroupAnnouncementWithHttpInfo(String groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupAnnouncementValidateBeforeCall(groupId, createGroupAnnouncementRequest, null);
        Type localVarReturnType = new TypeToken<GroupAnnouncement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Group Announcement (asynchronously)
     * Creates an Announcement for a Group. Warning: This will also remove all announcements. To make proper announcements, use the posts endpoint instead
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupAnnouncementRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAnnouncementAsync(String groupId, CreateGroupAnnouncementRequest createGroupAnnouncementRequest, final ApiCallback<GroupAnnouncement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupAnnouncementValidateBeforeCall(groupId, createGroupAnnouncementRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupAnnouncement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupGallery
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupGalleryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupGalleryCall(String groupId, CreateGroupGalleryRequest createGroupGalleryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupGalleryRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/galleries"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupGalleryValidateBeforeCall(String groupId, CreateGroupGalleryRequest createGroupGalleryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createGroupGallery(Async)");
        }

        // verify the required parameter 'createGroupGalleryRequest' is set
        if (createGroupGalleryRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupGalleryRequest' when calling createGroupGallery(Async)");
        }

        return createGroupGalleryCall(groupId, createGroupGalleryRequest, _callback);

    }

    /**
     * Create Group Gallery
     * Creates a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupGalleryRequest  (required)
     * @return GroupGallery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupGallery createGroupGallery(String groupId, CreateGroupGalleryRequest createGroupGalleryRequest) throws ApiException {
        ApiResponse<GroupGallery> localVarResp = createGroupGalleryWithHttpInfo(groupId, createGroupGalleryRequest);
        return localVarResp.getData();
    }

    /**
     * Create Group Gallery
     * Creates a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupGalleryRequest  (required)
     * @return ApiResponse&lt;GroupGallery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupGallery> createGroupGalleryWithHttpInfo(String groupId, CreateGroupGalleryRequest createGroupGalleryRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupGalleryValidateBeforeCall(groupId, createGroupGalleryRequest, null);
        Type localVarReturnType = new TypeToken<GroupGallery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Group Gallery (asynchronously)
     * Creates a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupGalleryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupGalleryAsync(String groupId, CreateGroupGalleryRequest createGroupGalleryRequest, final ApiCallback<GroupGallery> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupGalleryValidateBeforeCall(groupId, createGroupGalleryRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupGallery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupInvite
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupInviteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupInviteCall(String groupId, CreateGroupInviteRequest createGroupInviteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupInviteRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/invites"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupInviteValidateBeforeCall(String groupId, CreateGroupInviteRequest createGroupInviteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createGroupInvite(Async)");
        }

        // verify the required parameter 'createGroupInviteRequest' is set
        if (createGroupInviteRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupInviteRequest' when calling createGroupInvite(Async)");
        }

        return createGroupInviteCall(groupId, createGroupInviteRequest, _callback);

    }

    /**
     * Invite User to Group
     * Sends an invite to a user to join the group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupInviteRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public void createGroupInvite(String groupId, CreateGroupInviteRequest createGroupInviteRequest) throws ApiException {
        createGroupInviteWithHttpInfo(groupId, createGroupInviteRequest);
    }

    /**
     * Invite User to Group
     * Sends an invite to a user to join the group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupInviteRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createGroupInviteWithHttpInfo(String groupId, CreateGroupInviteRequest createGroupInviteRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupInviteValidateBeforeCall(groupId, createGroupInviteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Invite User to Group (asynchronously)
     * Sends an invite to a user to join the group.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupInviteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden error response when creating a group invite. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupInviteAsync(String groupId, CreateGroupInviteRequest createGroupInviteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupInviteValidateBeforeCall(groupId, createGroupInviteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupRole
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupRole object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupRoleCall(String groupId, CreateGroupRoleRequest createGroupRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupRoleRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/roles"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupRoleValidateBeforeCall(String groupId, CreateGroupRoleRequest createGroupRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling createGroupRole(Async)");
        }

        // verify the required parameter 'createGroupRoleRequest' is set
        if (createGroupRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupRoleRequest' when calling createGroupRole(Async)");
        }

        return createGroupRoleCall(groupId, createGroupRoleRequest, _callback);

    }

    /**
     * Create GroupRole
     * Create a Group role.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupRoleRequest  (required)
     * @return GroupRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupRole object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupRole createGroupRole(String groupId, CreateGroupRoleRequest createGroupRoleRequest) throws ApiException {
        ApiResponse<GroupRole> localVarResp = createGroupRoleWithHttpInfo(groupId, createGroupRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create GroupRole
     * Create a Group role.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupRoleRequest  (required)
     * @return ApiResponse&lt;GroupRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupRole object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupRole> createGroupRoleWithHttpInfo(String groupId, CreateGroupRoleRequest createGroupRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = createGroupRoleValidateBeforeCall(groupId, createGroupRoleRequest, null);
        Type localVarReturnType = new TypeToken<GroupRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GroupRole (asynchronously)
     * Create a Group role.
     * @param groupId Must be a valid group ID. (required)
     * @param createGroupRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupRole object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupRoleAsync(String groupId, CreateGroupRoleRequest createGroupRoleRequest, final ApiCallback<GroupRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupRoleValidateBeforeCall(groupId, createGroupRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a Group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroup(Async)");
        }

        return deleteGroupCall(groupId, _callback);

    }

    /**
     * Delete Group
     * Deletes a Group.
     * @param groupId Must be a valid group ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a Group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteGroup(String groupId) throws ApiException {
        ApiResponse<Success> localVarResp = deleteGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Delete Group
     * Deletes a Group.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a Group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Group (asynchronously)
     * Deletes a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a Group. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(String groupId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupAnnouncement
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting/clearing the group announcement. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAnnouncementCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/announcement"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupAnnouncementValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupAnnouncement(Async)");
        }

        return deleteGroupAnnouncementCall(groupId, _callback);

    }

    /**
     * Delete Group Announcement
     * Deletes the announcement for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting/clearing the group announcement. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteGroupAnnouncement(String groupId) throws ApiException {
        ApiResponse<Success> localVarResp = deleteGroupAnnouncementWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Delete Group Announcement
     * Deletes the announcement for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting/clearing the group announcement. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteGroupAnnouncementWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupAnnouncementValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Group Announcement (asynchronously)
     * Deletes the announcement for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting/clearing the group announcement. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAnnouncementAsync(String groupId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupAnnouncementValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupGallery
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupGalleryCall(String groupId, String groupGalleryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/galleries/{groupGalleryId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "groupGalleryId" + "}", localVarApiClient.escapeString(groupGalleryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupGalleryValidateBeforeCall(String groupId, String groupGalleryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupGallery(Async)");
        }

        // verify the required parameter 'groupGalleryId' is set
        if (groupGalleryId == null) {
            throw new ApiException("Missing the required parameter 'groupGalleryId' when calling deleteGroupGallery(Async)");
        }

        return deleteGroupGalleryCall(groupId, groupGalleryId, _callback);

    }

    /**
     * Delete Group Gallery
     * Deletes a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteGroupGallery(String groupId, String groupGalleryId) throws ApiException {
        ApiResponse<Success> localVarResp = deleteGroupGalleryWithHttpInfo(groupId, groupGalleryId);
        return localVarResp.getData();
    }

    /**
     * Delete Group Gallery
     * Deletes a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteGroupGalleryWithHttpInfo(String groupId, String groupGalleryId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupGalleryValidateBeforeCall(groupId, groupGalleryId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Group Gallery (asynchronously)
     * Deletes a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupGalleryAsync(String groupId, String groupGalleryId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupGalleryValidateBeforeCall(groupId, groupGalleryId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupGalleryImage
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param groupGalleryImageId Must be a valid group gallery image ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to delete a submission to a group&#39;s gallery when the user does not have permission to do so. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupGalleryImageCall(String groupId, String groupGalleryId, String groupGalleryImageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/galleries/{groupGalleryId}/images/{groupGalleryImageId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "groupGalleryId" + "}", localVarApiClient.escapeString(groupGalleryId.toString()))
            .replace("{" + "groupGalleryImageId" + "}", localVarApiClient.escapeString(groupGalleryImageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupGalleryImageValidateBeforeCall(String groupId, String groupGalleryId, String groupGalleryImageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupGalleryImage(Async)");
        }

        // verify the required parameter 'groupGalleryId' is set
        if (groupGalleryId == null) {
            throw new ApiException("Missing the required parameter 'groupGalleryId' when calling deleteGroupGalleryImage(Async)");
        }

        // verify the required parameter 'groupGalleryImageId' is set
        if (groupGalleryImageId == null) {
            throw new ApiException("Missing the required parameter 'groupGalleryImageId' when calling deleteGroupGalleryImage(Async)");
        }

        return deleteGroupGalleryImageCall(groupId, groupGalleryId, groupGalleryImageId, _callback);

    }

    /**
     * Delete Group Gallery Image
     * Deletes an image from a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param groupGalleryImageId Must be a valid group gallery image ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to delete a submission to a group&#39;s gallery when the user does not have permission to do so. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteGroupGalleryImage(String groupId, String groupGalleryId, String groupGalleryImageId) throws ApiException {
        ApiResponse<Success> localVarResp = deleteGroupGalleryImageWithHttpInfo(groupId, groupGalleryId, groupGalleryImageId);
        return localVarResp.getData();
    }

    /**
     * Delete Group Gallery Image
     * Deletes an image from a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param groupGalleryImageId Must be a valid group gallery image ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to delete a submission to a group&#39;s gallery when the user does not have permission to do so. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteGroupGalleryImageWithHttpInfo(String groupId, String groupGalleryId, String groupGalleryImageId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupGalleryImageValidateBeforeCall(groupId, groupGalleryId, groupGalleryImageId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Group Gallery Image (asynchronously)
     * Deletes an image from a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param groupGalleryImageId Must be a valid group gallery image ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after deleting a group gallery image. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to delete a submission to a group&#39;s gallery when the user does not have permission to do so. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupGalleryImageAsync(String groupId, String groupGalleryId, String groupGalleryImageId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupGalleryImageValidateBeforeCall(groupId, groupGalleryId, groupGalleryImageId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupInvite
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when deleting a group invite </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupInviteCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/invites/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupInviteValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupInvite(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteGroupInvite(Async)");
        }

        return deleteGroupInviteCall(groupId, userId, _callback);

    }

    /**
     * Delete User Invite
     * Deletes an Group invite sent to a User
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when deleting a group invite </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroupInvite(String groupId, String userId) throws ApiException {
        deleteGroupInviteWithHttpInfo(groupId, userId);
    }

    /**
     * Delete User Invite
     * Deletes an Group invite sent to a User
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when deleting a group invite </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupInviteWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupInviteValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User Invite (asynchronously)
     * Deletes an Group invite sent to a User
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when deleting a group invite </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupInviteAsync(String groupId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupInviteValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupPost
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupPostCall(String groupId, String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/posts/{notificationId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupPostValidateBeforeCall(String groupId, String notificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupPost(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling deleteGroupPost(Async)");
        }

        return deleteGroupPostCall(groupId, notificationId, _callback);

    }

    /**
     * Delete a Group post
     * Delete a Group post
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public Success deleteGroupPost(String groupId, String notificationId) throws ApiException {
        ApiResponse<Success> localVarResp = deleteGroupPostWithHttpInfo(groupId, notificationId);
        return localVarResp.getData();
    }

    /**
     * Delete a Group post
     * Delete a Group post
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> deleteGroupPostWithHttpInfo(String groupId, String notificationId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupPostValidateBeforeCall(groupId, notificationId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Group post (asynchronously)
     * Delete a Group post
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupPostAsync(String groupId, String notificationId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupPostValidateBeforeCall(groupId, notificationId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupRole
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupRoleCall(String groupId, String groupRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/roles/{groupRoleId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "groupRoleId" + "}", localVarApiClient.escapeString(groupRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupRoleValidateBeforeCall(String groupId, String groupRoleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupRole(Async)");
        }

        // verify the required parameter 'groupRoleId' is set
        if (groupRoleId == null) {
            throw new ApiException("Missing the required parameter 'groupRoleId' when calling deleteGroupRole(Async)");
        }

        return deleteGroupRoleCall(groupId, groupRoleId, _callback);

    }

    /**
     * Delete Group Role
     * Deletes a Group Role by ID and returns the remaining roles.
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @return List&lt;GroupRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRole> deleteGroupRole(String groupId, String groupRoleId) throws ApiException {
        ApiResponse<List<GroupRole>> localVarResp = deleteGroupRoleWithHttpInfo(groupId, groupRoleId);
        return localVarResp.getData();
    }

    /**
     * Delete Group Role
     * Deletes a Group Role by ID and returns the remaining roles.
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @return ApiResponse&lt;List&lt;GroupRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRole>> deleteGroupRoleWithHttpInfo(String groupId, String groupRoleId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupRoleValidateBeforeCall(groupId, groupRoleId, null);
        Type localVarReturnType = new TypeToken<List<GroupRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Group Role (asynchronously)
     * Deletes a Group Role by ID and returns the remaining roles.
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupRoleAsync(String groupId, String groupRoleId, final ApiCallback<List<GroupRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupRoleValidateBeforeCall(groupId, groupRoleId, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroup
     * @param groupId Must be a valid group ID. (required)
     * @param includeRoles Include roles for the Group object. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCall(String groupId, Boolean includeRoles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeRoles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRoles", includeRoles));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupValidateBeforeCall(String groupId, Boolean includeRoles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroup(Async)");
        }

        return getGroupCall(groupId, includeRoles, _callback);

    }

    /**
     * Get Group by ID
     * Returns a single Group by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param includeRoles Include roles for the Group object. Defaults to false. (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public Group getGroup(String groupId, Boolean includeRoles) throws ApiException {
        ApiResponse<Group> localVarResp = getGroupWithHttpInfo(groupId, includeRoles);
        return localVarResp.getData();
    }

    /**
     * Get Group by ID
     * Returns a single Group by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param includeRoles Include roles for the Group object. Defaults to false. (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> getGroupWithHttpInfo(String groupId, Boolean includeRoles) throws ApiException {
        okhttp3.Call localVarCall = getGroupValidateBeforeCall(groupId, includeRoles, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group by ID (asynchronously)
     * Returns a single Group by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param includeRoles Include roles for the Group object. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAsync(String groupId, Boolean includeRoles, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupValidateBeforeCall(groupId, includeRoles, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupAnnouncements
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAnnouncementsCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/announcement"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupAnnouncementsValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupAnnouncements(Async)");
        }

        return getGroupAnnouncementsCall(groupId, _callback);

    }

    /**
     * Get Group Announcement
     * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
     * @param groupId Must be a valid group ID. (required)
     * @return GroupAnnouncement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupAnnouncement getGroupAnnouncements(String groupId) throws ApiException {
        ApiResponse<GroupAnnouncement> localVarResp = getGroupAnnouncementsWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Get Group Announcement
     * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;GroupAnnouncement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupAnnouncement> getGroupAnnouncementsWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupAnnouncementsValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupAnnouncement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Announcement (asynchronously)
     * Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except &#x60;imageId&#x60; and &#x60;imageUrl&#x60; which may be null.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupAnnouncement object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAnnouncementsAsync(String groupId, final ApiCallback<GroupAnnouncement> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupAnnouncementsValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupAnnouncement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupAuditLogs
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param startDate The start date of the search range. (optional)
     * @param endDate The end date of the search range. (optional)
     * @param actorIds The comma-separated actor ids to search for. (optional)
     * @param eventTypes The comma-separated event types to search for. (optional)
     * @param targetIds The comma-separated target ids to search for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupAudit objects, wrapped in new pagination format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAuditLogsCall(String groupId, Integer n, Integer offset, OffsetDateTime startDate, OffsetDateTime endDate, String actorIds, String eventTypes, String targetIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/auditLogs"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (actorIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actorIds", actorIds));
        }

        if (eventTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventTypes", eventTypes));
        }

        if (targetIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetIds", targetIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupAuditLogsValidateBeforeCall(String groupId, Integer n, Integer offset, OffsetDateTime startDate, OffsetDateTime endDate, String actorIds, String eventTypes, String targetIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupAuditLogs(Async)");
        }

        return getGroupAuditLogsCall(groupId, n, offset, startDate, endDate, actorIds, eventTypes, targetIds, _callback);

    }

    /**
     * Get Group Audit Logs
     * Returns a list of audit logs for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param startDate The start date of the search range. (optional)
     * @param endDate The end date of the search range. (optional)
     * @param actorIds The comma-separated actor ids to search for. (optional)
     * @param eventTypes The comma-separated event types to search for. (optional)
     * @param targetIds The comma-separated target ids to search for. (optional)
     * @return PaginatedGroupAuditLogEntryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupAudit objects, wrapped in new pagination format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedGroupAuditLogEntryList getGroupAuditLogs(String groupId, Integer n, Integer offset, OffsetDateTime startDate, OffsetDateTime endDate, String actorIds, String eventTypes, String targetIds) throws ApiException {
        ApiResponse<PaginatedGroupAuditLogEntryList> localVarResp = getGroupAuditLogsWithHttpInfo(groupId, n, offset, startDate, endDate, actorIds, eventTypes, targetIds);
        return localVarResp.getData();
    }

    /**
     * Get Group Audit Logs
     * Returns a list of audit logs for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param startDate The start date of the search range. (optional)
     * @param endDate The end date of the search range. (optional)
     * @param actorIds The comma-separated actor ids to search for. (optional)
     * @param eventTypes The comma-separated event types to search for. (optional)
     * @param targetIds The comma-separated target ids to search for. (optional)
     * @return ApiResponse&lt;PaginatedGroupAuditLogEntryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupAudit objects, wrapped in new pagination format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedGroupAuditLogEntryList> getGroupAuditLogsWithHttpInfo(String groupId, Integer n, Integer offset, OffsetDateTime startDate, OffsetDateTime endDate, String actorIds, String eventTypes, String targetIds) throws ApiException {
        okhttp3.Call localVarCall = getGroupAuditLogsValidateBeforeCall(groupId, n, offset, startDate, endDate, actorIds, eventTypes, targetIds, null);
        Type localVarReturnType = new TypeToken<PaginatedGroupAuditLogEntryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Audit Logs (asynchronously)
     * Returns a list of audit logs for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param startDate The start date of the search range. (optional)
     * @param endDate The end date of the search range. (optional)
     * @param actorIds The comma-separated actor ids to search for. (optional)
     * @param eventTypes The comma-separated event types to search for. (optional)
     * @param targetIds The comma-separated target ids to search for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupAudit objects, wrapped in new pagination format. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAuditLogsAsync(String groupId, Integer n, Integer offset, OffsetDateTime startDate, OffsetDateTime endDate, String actorIds, String eventTypes, String targetIds, final ApiCallback<PaginatedGroupAuditLogEntryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupAuditLogsValidateBeforeCall(groupId, n, offset, startDate, endDate, actorIds, eventTypes, targetIds, _callback);
        Type localVarReturnType = new TypeToken<PaginatedGroupAuditLogEntryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupBans
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupBansCall(String groupId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/bans"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupBansValidateBeforeCall(String groupId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupBans(Async)");
        }

        return getGroupBansCall(groupId, n, offset, _callback);

    }

    /**
     * Get Group Bans
     * Returns a list of banned users for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return List&lt;GroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupMember> getGroupBans(String groupId, Integer n, Integer offset) throws ApiException {
        ApiResponse<List<GroupMember>> localVarResp = getGroupBansWithHttpInfo(groupId, n, offset);
        return localVarResp.getData();
    }

    /**
     * Get Group Bans
     * Returns a list of banned users for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;List&lt;GroupMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupMember>> getGroupBansWithHttpInfo(String groupId, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getGroupBansValidateBeforeCall(groupId, n, offset, null);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Bans (asynchronously)
     * Returns a list of banned users for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupBansAsync(String groupId, Integer n, Integer offset, final ApiCallback<List<GroupMember>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupBansValidateBeforeCall(groupId, n, offset, _callback);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupGalleryImages
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param approved If specified, only returns images that have been approved or not approved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupGalleryImage objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupGalleryImagesCall(String groupId, String groupGalleryId, Integer n, Integer offset, Boolean approved, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/galleries/{groupGalleryId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "groupGalleryId" + "}", localVarApiClient.escapeString(groupGalleryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (approved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approved", approved));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupGalleryImagesValidateBeforeCall(String groupId, String groupGalleryId, Integer n, Integer offset, Boolean approved, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupGalleryImages(Async)");
        }

        // verify the required parameter 'groupGalleryId' is set
        if (groupGalleryId == null) {
            throw new ApiException("Missing the required parameter 'groupGalleryId' when calling getGroupGalleryImages(Async)");
        }

        return getGroupGalleryImagesCall(groupId, groupGalleryId, n, offset, approved, _callback);

    }

    /**
     * Get Group Gallery Images
     * Returns a list of images for a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param approved If specified, only returns images that have been approved or not approved. (optional)
     * @return List&lt;GroupGalleryImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupGalleryImage objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupGalleryImage> getGroupGalleryImages(String groupId, String groupGalleryId, Integer n, Integer offset, Boolean approved) throws ApiException {
        ApiResponse<List<GroupGalleryImage>> localVarResp = getGroupGalleryImagesWithHttpInfo(groupId, groupGalleryId, n, offset, approved);
        return localVarResp.getData();
    }

    /**
     * Get Group Gallery Images
     * Returns a list of images for a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param approved If specified, only returns images that have been approved or not approved. (optional)
     * @return ApiResponse&lt;List&lt;GroupGalleryImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupGalleryImage objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupGalleryImage>> getGroupGalleryImagesWithHttpInfo(String groupId, String groupGalleryId, Integer n, Integer offset, Boolean approved) throws ApiException {
        okhttp3.Call localVarCall = getGroupGalleryImagesValidateBeforeCall(groupId, groupGalleryId, n, offset, approved, null);
        Type localVarReturnType = new TypeToken<List<GroupGalleryImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Gallery Images (asynchronously)
     * Returns a list of images for a Group gallery.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param approved If specified, only returns images that have been approved or not approved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupGalleryImage objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupGalleryImagesAsync(String groupId, String groupGalleryId, Integer n, Integer offset, Boolean approved, final ApiCallback<List<GroupGalleryImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupGalleryImagesValidateBeforeCall(groupId, groupGalleryId, n, offset, approved, _callback);
        Type localVarReturnType = new TypeToken<List<GroupGalleryImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupInstances
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupInstance objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupInstancesCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/instances"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupInstancesValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupInstances(Async)");
        }

        return getGroupInstancesCall(groupId, _callback);

    }

    /**
     * Get Group Instances
     * Returns a list of group instances
     * @param groupId Must be a valid group ID. (required)
     * @return List&lt;GroupInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupInstance objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupInstance> getGroupInstances(String groupId) throws ApiException {
        ApiResponse<List<GroupInstance>> localVarResp = getGroupInstancesWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Get Group Instances
     * Returns a list of group instances
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;List&lt;GroupInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupInstance objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupInstance>> getGroupInstancesWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupInstancesValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<GroupInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Instances (asynchronously)
     * Returns a list of group instances
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupInstance objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupInstancesAsync(String groupId, final ApiCallback<List<GroupInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupInstancesValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<GroupInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupInvites
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupInvitesCall(String groupId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/invites"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupInvitesValidateBeforeCall(String groupId, Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupInvites(Async)");
        }

        return getGroupInvitesCall(groupId, n, offset, _callback);

    }

    /**
     * Get Group Invites Sent
     * Returns a list of members that have been invited to the Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return List&lt;GroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupMember> getGroupInvites(String groupId, Integer n, Integer offset) throws ApiException {
        ApiResponse<List<GroupMember>> localVarResp = getGroupInvitesWithHttpInfo(groupId, n, offset);
        return localVarResp.getData();
    }

    /**
     * Get Group Invites Sent
     * Returns a list of members that have been invited to the Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;List&lt;GroupMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupMember>> getGroupInvitesWithHttpInfo(String groupId, Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getGroupInvitesValidateBeforeCall(groupId, n, offset, null);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Invites Sent (asynchronously)
     * Returns a list of members that have been invited to the Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupInvitesAsync(String groupId, Integer n, Integer offset, final ApiCallback<List<GroupMember>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupInvitesValidateBeforeCall(groupId, n, offset, _callback);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupMember
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupMemberCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMemberValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupMember(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getGroupMember(Async)");
        }

        return getGroupMemberCall(groupId, userId, _callback);

    }

    /**
     * Get Group Member
     * Returns a LimitedGroup Member.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @return GroupLimitedMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupLimitedMember getGroupMember(String groupId, String userId) throws ApiException {
        ApiResponse<GroupLimitedMember> localVarResp = getGroupMemberWithHttpInfo(groupId, userId);
        return localVarResp.getData();
    }

    /**
     * Get Group Member
     * Returns a LimitedGroup Member.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @return ApiResponse&lt;GroupLimitedMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupLimitedMember> getGroupMemberWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getGroupMemberValidateBeforeCall(groupId, userId, null);
        Type localVarReturnType = new TypeToken<GroupLimitedMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Member (asynchronously)
     * Returns a LimitedGroup Member.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupMemberAsync(String groupId, String userId, final ApiCallback<GroupLimitedMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupMemberValidateBeforeCall(groupId, userId, _callback);
        Type localVarReturnType = new TypeToken<GroupLimitedMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupMembers
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param sort The sort order of Group Member results (optional)
     * @param roleId Only returns members with a specific groupRoleId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupMembersCall(String groupId, Integer n, Integer offset, GroupSearchSort sort, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleId", roleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMembersValidateBeforeCall(String groupId, Integer n, Integer offset, GroupSearchSort sort, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupMembers(Async)");
        }

        return getGroupMembersCall(groupId, n, offset, sort, roleId, _callback);

    }

    /**
     * List Group Members
     * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param sort The sort order of Group Member results (optional)
     * @param roleId Only returns members with a specific groupRoleId (optional)
     * @return List&lt;GroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupMember> getGroupMembers(String groupId, Integer n, Integer offset, GroupSearchSort sort, String roleId) throws ApiException {
        ApiResponse<List<GroupMember>> localVarResp = getGroupMembersWithHttpInfo(groupId, n, offset, sort, roleId);
        return localVarResp.getData();
    }

    /**
     * List Group Members
     * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param sort The sort order of Group Member results (optional)
     * @param roleId Only returns members with a specific groupRoleId (optional)
     * @return ApiResponse&lt;List&lt;GroupMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupMember>> getGroupMembersWithHttpInfo(String groupId, Integer n, Integer offset, GroupSearchSort sort, String roleId) throws ApiException {
        okhttp3.Call localVarCall = getGroupMembersValidateBeforeCall(groupId, n, offset, sort, roleId, null);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Group Members (asynchronously)
     * Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the &#x60;myMember&#x60; field of the Group object.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param sort The sort order of Group Member results (optional)
     * @param roleId Only returns members with a specific groupRoleId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupMembersAsync(String groupId, Integer n, Integer offset, GroupSearchSort sort, String roleId, final ApiCallback<List<GroupMember>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupMembersValidateBeforeCall(groupId, n, offset, sort, roleId, _callback);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupPermissions
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupPermission objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupPermissionsCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/permissions"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupPermissionsValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupPermissions(Async)");
        }

        return getGroupPermissionsCall(groupId, _callback);

    }

    /**
     * List Group Permissions
     * Returns a List of all possible/available permissions for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @return List&lt;GroupPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupPermission objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupPermission> getGroupPermissions(String groupId) throws ApiException {
        ApiResponse<List<GroupPermission>> localVarResp = getGroupPermissionsWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * List Group Permissions
     * Returns a List of all possible/available permissions for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;List&lt;GroupPermission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupPermission objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupPermission>> getGroupPermissionsWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupPermissionsValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<GroupPermission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Group Permissions (asynchronously)
     * Returns a List of all possible/available permissions for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupPermission objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to search list of users with an invalid request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupPermissionsAsync(String groupId, final ApiCallback<List<GroupPermission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupPermissionsValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<GroupPermission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupPosts
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param publicOnly See public posts only. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost Array. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupPostsCall(String groupId, Integer n, Integer offset, Boolean publicOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/posts"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupPostsValidateBeforeCall(String groupId, Integer n, Integer offset, Boolean publicOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupPosts(Async)");
        }

        return getGroupPostsCall(groupId, n, offset, publicOnly, _callback);

    }

    /**
     * Get posts from a Group
     * Get posts from a Group
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param publicOnly See public posts only. (optional)
     * @return GetGroupPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost Array. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupPosts200Response getGroupPosts(String groupId, Integer n, Integer offset, Boolean publicOnly) throws ApiException {
        ApiResponse<GetGroupPosts200Response> localVarResp = getGroupPostsWithHttpInfo(groupId, n, offset, publicOnly);
        return localVarResp.getData();
    }

    /**
     * Get posts from a Group
     * Get posts from a Group
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param publicOnly See public posts only. (optional)
     * @return ApiResponse&lt;GetGroupPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost Array. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupPosts200Response> getGroupPostsWithHttpInfo(String groupId, Integer n, Integer offset, Boolean publicOnly) throws ApiException {
        okhttp3.Call localVarCall = getGroupPostsValidateBeforeCall(groupId, n, offset, publicOnly, null);
        Type localVarReturnType = new TypeToken<GetGroupPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get posts from a Group (asynchronously)
     * Get posts from a Group
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param publicOnly See public posts only. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost Array. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupPostsAsync(String groupId, Integer n, Integer offset, Boolean publicOnly, final ApiCallback<GetGroupPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupPostsValidateBeforeCall(groupId, n, offset, publicOnly, _callback);
        Type localVarReturnType = new TypeToken<GetGroupPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupRequests
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param blocked See blocked join requests (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when responding to a group join request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupRequestsCall(String groupId, Integer n, Integer offset, Boolean blocked, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/requests"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (blocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blocked", blocked));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupRequestsValidateBeforeCall(String groupId, Integer n, Integer offset, Boolean blocked, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupRequests(Async)");
        }

        return getGroupRequestsCall(groupId, n, offset, blocked, _callback);

    }

    /**
     * Get Group Join Requests
     * Returns a list of members that have requested to join the Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param blocked See blocked join requests (optional)
     * @return List&lt;GroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when responding to a group join request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupMember> getGroupRequests(String groupId, Integer n, Integer offset, Boolean blocked) throws ApiException {
        ApiResponse<List<GroupMember>> localVarResp = getGroupRequestsWithHttpInfo(groupId, n, offset, blocked);
        return localVarResp.getData();
    }

    /**
     * Get Group Join Requests
     * Returns a list of members that have requested to join the Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param blocked See blocked join requests (optional)
     * @return ApiResponse&lt;List&lt;GroupMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when responding to a group join request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupMember>> getGroupRequestsWithHttpInfo(String groupId, Integer n, Integer offset, Boolean blocked) throws ApiException {
        okhttp3.Call localVarCall = getGroupRequestsValidateBeforeCall(groupId, n, offset, blocked, null);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Join Requests (asynchronously)
     * Returns a list of members that have requested to join the Group.
     * @param groupId Must be a valid group ID. (required)
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param blocked See blocked join requests (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request error response when responding to a group join request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupRequestsAsync(String groupId, Integer n, Integer offset, Boolean blocked, final ApiCallback<List<GroupMember>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupRequestsValidateBeforeCall(groupId, n, offset, blocked, _callback);
        Type localVarReturnType = new TypeToken<List<GroupMember>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupRoleTemplates
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of GroupRoleTemplate objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupRoleTemplatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/roleTemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupRoleTemplatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGroupRoleTemplatesCall(_callback);

    }

    /**
     * Get Group Role Templates
     * Obtain predefined templates for group roles
     * @return Map&lt;String, GroupRoleTemplateValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of GroupRoleTemplate objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, GroupRoleTemplateValues> getGroupRoleTemplates() throws ApiException {
        ApiResponse<Map<String, GroupRoleTemplateValues>> localVarResp = getGroupRoleTemplatesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Group Role Templates
     * Obtain predefined templates for group roles
     * @return ApiResponse&lt;Map&lt;String, GroupRoleTemplateValues&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of GroupRoleTemplate objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, GroupRoleTemplateValues>> getGroupRoleTemplatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGroupRoleTemplatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, GroupRoleTemplateValues>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Role Templates (asynchronously)
     * Obtain predefined templates for group roles
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a dictionary of GroupRoleTemplate objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupRoleTemplatesAsync(final ApiCallback<Map<String, GroupRoleTemplateValues>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupRoleTemplatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, GroupRoleTemplateValues>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupRoles
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupRolesCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/roles"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupRolesValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupRoles(Async)");
        }

        return getGroupRolesCall(groupId, _callback);

    }

    /**
     * Get Group Roles
     * Returns a Group Role by ID.
     * @param groupId Must be a valid group ID. (required)
     * @return List&lt;GroupRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRole> getGroupRoles(String groupId) throws ApiException {
        ApiResponse<List<GroupRole>> localVarResp = getGroupRolesWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Get Group Roles
     * Returns a Group Role by ID.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;List&lt;GroupRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRole>> getGroupRolesWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupRolesValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<GroupRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Group Roles (asynchronously)
     * Returns a Group Role by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupRolesAsync(String groupId, final ApiCallback<List<GroupRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupRolesValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for joinGroup
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to join a group that the user is already a member of. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/join"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling joinGroup(Async)");
        }

        return joinGroupCall(groupId, _callback);

    }

    /**
     * Join Group
     * Join a Group by ID and returns the member object.
     * @param groupId Must be a valid group ID. (required)
     * @return GroupMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to join a group that the user is already a member of. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupMember joinGroup(String groupId) throws ApiException {
        ApiResponse<GroupMember> localVarResp = joinGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Join Group
     * Join a Group by ID and returns the member object.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;GroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to join a group that the user is already a member of. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupMember> joinGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = joinGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Join Group (asynchronously)
     * Join a Group by ID and returns the member object.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying to join a group that the user is already a member of. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinGroupAsync(String groupId, final ApiCallback<GroupMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for kickGroupMember
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kickGroupMemberCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call kickGroupMemberValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling kickGroupMember(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling kickGroupMember(Async)");
        }

        return kickGroupMemberCall(groupId, userId, _callback);

    }

    /**
     * Kick Group Member
     * Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public void kickGroupMember(String groupId, String userId) throws ApiException {
        kickGroupMemberWithHttpInfo(groupId, userId);
    }

    /**
     * Kick Group Member
     * Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> kickGroupMemberWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = kickGroupMemberValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Kick Group Member (asynchronously)
     * Kicks a Group Member from the Group. The current user must have the \&quot;Remove Group Members\&quot; permission.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call kickGroupMemberAsync(String groupId, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = kickGroupMemberValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveGroup
     * @param groupId Must be a valid group ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/leave"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling leaveGroup(Async)");
        }

        return leaveGroupCall(groupId, _callback);

    }

    /**
     * Leave Group
     * Leave a group by ID.
     * @param groupId Must be a valid group ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public void leaveGroup(String groupId) throws ApiException {
        leaveGroupWithHttpInfo(groupId);
    }

    /**
     * Leave Group
     * Leave a group by ID.
     * @param groupId Must be a valid group ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaveGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = leaveGroupValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Leave Group (asynchronously)
     * Leave a group by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveGroupAsync(String groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveGroupValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeGroupMemberRole
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeGroupMemberRoleCall(String groupId, String userId, String groupRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members/{userId}/roles/{groupRoleId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "groupRoleId" + "}", localVarApiClient.escapeString(groupRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGroupMemberRoleValidateBeforeCall(String groupId, String userId, String groupRoleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeGroupMemberRole(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeGroupMemberRole(Async)");
        }

        // verify the required parameter 'groupRoleId' is set
        if (groupRoleId == null) {
            throw new ApiException("Missing the required parameter 'groupRoleId' when calling removeGroupMemberRole(Async)");
        }

        return removeGroupMemberRoleCall(groupId, userId, groupRoleId, _callback);

    }

    /**
     * Remove Role from GroupMember
     * Removes a Role from a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> removeGroupMemberRole(String groupId, String userId, String groupRoleId) throws ApiException {
        ApiResponse<List<String>> localVarResp = removeGroupMemberRoleWithHttpInfo(groupId, userId, groupRoleId);
        return localVarResp.getData();
    }

    /**
     * Remove Role from GroupMember
     * Removes a Role from a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> removeGroupMemberRoleWithHttpInfo(String groupId, String userId, String groupRoleId) throws ApiException {
        okhttp3.Call localVarCall = removeGroupMemberRoleValidateBeforeCall(groupId, userId, groupRoleId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Role from GroupMember (asynchronously)
     * Removes a Role from a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRoleID objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeGroupMemberRoleAsync(String groupId, String userId, String groupRoleId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGroupMemberRoleValidateBeforeCall(groupId, userId, groupRoleId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for respondGroupJoinRequest
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param respondGroupJoinRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondGroupJoinRequestCall(String groupId, String userId, RespondGroupJoinRequest respondGroupJoinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = respondGroupJoinRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/requests/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call respondGroupJoinRequestValidateBeforeCall(String groupId, String userId, RespondGroupJoinRequest respondGroupJoinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling respondGroupJoinRequest(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling respondGroupJoinRequest(Async)");
        }

        // verify the required parameter 'respondGroupJoinRequest' is set
        if (respondGroupJoinRequest == null) {
            throw new ApiException("Missing the required parameter 'respondGroupJoinRequest' when calling respondGroupJoinRequest(Async)");
        }

        return respondGroupJoinRequestCall(groupId, userId, respondGroupJoinRequest, _callback);

    }

    /**
     * Respond Group Join request
     * Responds to a Group Join Request with Accept/Deny
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param respondGroupJoinRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public void respondGroupJoinRequest(String groupId, String userId, RespondGroupJoinRequest respondGroupJoinRequest) throws ApiException {
        respondGroupJoinRequestWithHttpInfo(groupId, userId, respondGroupJoinRequest);
    }

    /**
     * Respond Group Join request
     * Responds to a Group Join Request with Accept/Deny
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param respondGroupJoinRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> respondGroupJoinRequestWithHttpInfo(String groupId, String userId, RespondGroupJoinRequest respondGroupJoinRequest) throws ApiException {
        okhttp3.Call localVarCall = respondGroupJoinRequestValidateBeforeCall(groupId, userId, respondGroupJoinRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Respond Group Join request (asynchronously)
     * Responds to a Group Join Request with Accept/Deny
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param respondGroupJoinRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondGroupJoinRequestAsync(String groupId, String userId, RespondGroupJoinRequest respondGroupJoinRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = respondGroupJoinRequestValidateBeforeCall(groupId, userId, respondGroupJoinRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGroups
     * @param query Query to search for, can be either Group Name or Group shortCode (optional)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGroupsCall(String query, Integer offset, Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGroupsValidateBeforeCall(String query, Integer offset, Integer n, final ApiCallback _callback) throws ApiException {
        return searchGroupsCall(query, offset, n, _callback);

    }

    /**
     * Search Group
     * Searches Groups by name or shortCode
     * @param query Query to search for, can be either Group Name or Group shortCode (optional)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @return List&lt;LimitedGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<LimitedGroup> searchGroups(String query, Integer offset, Integer n) throws ApiException {
        ApiResponse<List<LimitedGroup>> localVarResp = searchGroupsWithHttpInfo(query, offset, n);
        return localVarResp.getData();
    }

    /**
     * Search Group
     * Searches Groups by name or shortCode
     * @param query Query to search for, can be either Group Name or Group shortCode (optional)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @return ApiResponse&lt;List&lt;LimitedGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LimitedGroup>> searchGroupsWithHttpInfo(String query, Integer offset, Integer n) throws ApiException {
        okhttp3.Call localVarCall = searchGroupsValidateBeforeCall(query, offset, n, null);
        Type localVarReturnType = new TypeToken<List<LimitedGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Group (asynchronously)
     * Searches Groups by name or shortCode
     * @param query Query to search for, can be either Group Name or Group shortCode (optional)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of LimitedGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchGroupsAsync(String query, Integer offset, Integer n, final ApiCallback<List<LimitedGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGroupsValidateBeforeCall(query, offset, n, _callback);
        Type localVarReturnType = new TypeToken<List<LimitedGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unbanGroupMember
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbanGroupMemberCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/bans/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unbanGroupMemberValidateBeforeCall(String groupId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling unbanGroupMember(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unbanGroupMember(Async)");
        }

        return unbanGroupMemberCall(groupId, userId, _callback);

    }

    /**
     * Unban Group Member
     * Unbans a user from a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @return GroupMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupMember unbanGroupMember(String groupId, String userId) throws ApiException {
        ApiResponse<GroupMember> localVarResp = unbanGroupMemberWithHttpInfo(groupId, userId);
        return localVarResp.getData();
    }

    /**
     * Unban Group Member
     * Unbans a user from a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @return ApiResponse&lt;GroupMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupMember> unbanGroupMemberWithHttpInfo(String groupId, String userId) throws ApiException {
        okhttp3.Call localVarCall = unbanGroupMemberValidateBeforeCall(groupId, userId, null);
        Type localVarReturnType = new TypeToken<GroupMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unban Group Member (asynchronously)
     * Unbans a user from a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unbanGroupMemberAsync(String groupId, String userId, final ApiCallback<GroupMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = unbanGroupMemberValidateBeforeCall(groupId, userId, _callback);
        Type localVarReturnType = new TypeToken<GroupMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroup
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCall(String groupId, UpdateGroupRequest updateGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(String groupId, UpdateGroupRequest updateGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroup(Async)");
        }

        return updateGroupCall(groupId, updateGroupRequest, _callback);

    }

    /**
     * Update Group
     * Updates a Group and returns it.
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRequest  (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public Group updateGroup(String groupId, UpdateGroupRequest updateGroupRequest) throws ApiException {
        ApiResponse<Group> localVarResp = updateGroupWithHttpInfo(groupId, updateGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Update Group
     * Updates a Group and returns it.
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRequest  (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> updateGroupWithHttpInfo(String groupId, UpdateGroupRequest updateGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, updateGroupRequest, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Group (asynchronously)
     * Updates a Group and returns it.
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Group object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAsync(String groupId, UpdateGroupRequest updateGroupRequest, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(groupId, updateGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupGallery
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param updateGroupGalleryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupGalleryCall(String groupId, String groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupGalleryRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/galleries/{groupGalleryId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "groupGalleryId" + "}", localVarApiClient.escapeString(groupGalleryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupGalleryValidateBeforeCall(String groupId, String groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupGallery(Async)");
        }

        // verify the required parameter 'groupGalleryId' is set
        if (groupGalleryId == null) {
            throw new ApiException("Missing the required parameter 'groupGalleryId' when calling updateGroupGallery(Async)");
        }

        return updateGroupGalleryCall(groupId, groupGalleryId, updateGroupGalleryRequest, _callback);

    }

    /**
     * Update Group Gallery
     * Updates a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param updateGroupGalleryRequest  (optional)
     * @return GroupGallery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupGallery updateGroupGallery(String groupId, String groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest) throws ApiException {
        ApiResponse<GroupGallery> localVarResp = updateGroupGalleryWithHttpInfo(groupId, groupGalleryId, updateGroupGalleryRequest);
        return localVarResp.getData();
    }

    /**
     * Update Group Gallery
     * Updates a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param updateGroupGalleryRequest  (optional)
     * @return ApiResponse&lt;GroupGallery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupGallery> updateGroupGalleryWithHttpInfo(String groupId, String groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupGalleryValidateBeforeCall(groupId, groupGalleryId, updateGroupGalleryRequest, null);
        Type localVarReturnType = new TypeToken<GroupGallery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Group Gallery (asynchronously)
     * Updates a gallery for a Group.
     * @param groupId Must be a valid group ID. (required)
     * @param groupGalleryId Must be a valid group gallery ID. (required)
     * @param updateGroupGalleryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single GroupGallery object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupGalleryAsync(String groupId, String groupGalleryId, UpdateGroupGalleryRequest updateGroupGalleryRequest, final ApiCallback<GroupGallery> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupGalleryValidateBeforeCall(groupId, groupGalleryId, updateGroupGalleryRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupGallery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupMember
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateGroupMemberRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupMemberCall(String groupId, String userId, UpdateGroupMemberRequest updateGroupMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupMemberRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/members/{userId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupMemberValidateBeforeCall(String groupId, String userId, UpdateGroupMemberRequest updateGroupMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupMember(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateGroupMember(Async)");
        }

        return updateGroupMemberCall(groupId, userId, updateGroupMemberRequest, _callback);

    }

    /**
     * Update Group Member
     * Updates a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateGroupMemberRequest  (optional)
     * @return GroupLimitedMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public GroupLimitedMember updateGroupMember(String groupId, String userId, UpdateGroupMemberRequest updateGroupMemberRequest) throws ApiException {
        ApiResponse<GroupLimitedMember> localVarResp = updateGroupMemberWithHttpInfo(groupId, userId, updateGroupMemberRequest);
        return localVarResp.getData();
    }

    /**
     * Update Group Member
     * Updates a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateGroupMemberRequest  (optional)
     * @return ApiResponse&lt;GroupLimitedMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupLimitedMember> updateGroupMemberWithHttpInfo(String groupId, String userId, UpdateGroupMemberRequest updateGroupMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupMemberValidateBeforeCall(groupId, userId, updateGroupMemberRequest, null);
        Type localVarReturnType = new TypeToken<GroupLimitedMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Group Member (asynchronously)
     * Updates a Group Member
     * @param groupId Must be a valid group ID. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateGroupMemberRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupMember objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to perform operations on a non-existing group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupMemberAsync(String groupId, String userId, UpdateGroupMemberRequest updateGroupMemberRequest, final ApiCallback<GroupLimitedMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupMemberValidateBeforeCall(groupId, userId, updateGroupMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupLimitedMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupPost
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @param createGroupPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupPostCall(String groupId, String notificationId, CreateGroupPostRequest createGroupPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupPostRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/posts/{notificationId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupPostValidateBeforeCall(String groupId, String notificationId, CreateGroupPostRequest createGroupPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupPost(Async)");
        }

        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling updateGroupPost(Async)");
        }

        // verify the required parameter 'createGroupPostRequest' is set
        if (createGroupPostRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupPostRequest' when calling updateGroupPost(Async)");
        }

        return updateGroupPostCall(groupId, notificationId, createGroupPostRequest, _callback);

    }

    /**
     * Edits a Group post
     * Edits a Group post
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @param createGroupPostRequest  (required)
     * @return GroupPost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public GroupPost updateGroupPost(String groupId, String notificationId, CreateGroupPostRequest createGroupPostRequest) throws ApiException {
        ApiResponse<GroupPost> localVarResp = updateGroupPostWithHttpInfo(groupId, notificationId, createGroupPostRequest);
        return localVarResp.getData();
    }

    /**
     * Edits a Group post
     * Edits a Group post
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @param createGroupPostRequest  (required)
     * @return ApiResponse&lt;GroupPost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupPost> updateGroupPostWithHttpInfo(String groupId, String notificationId, CreateGroupPostRequest createGroupPostRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupPostValidateBeforeCall(groupId, notificationId, createGroupPostRequest, null);
        Type localVarReturnType = new TypeToken<GroupPost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edits a Group post (asynchronously)
     * Edits a Group post
     * @param groupId Must be a valid group ID. (required)
     * @param notificationId Must be a valid notification ID. (required)
     * @param createGroupPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a GroupPost object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Response after deleting a group post. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupPostAsync(String groupId, String notificationId, CreateGroupPostRequest createGroupPostRequest, final ApiCallback<GroupPost> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupPostValidateBeforeCall(groupId, notificationId, createGroupPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupPost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupRepresentation
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRepresentationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after updating group representation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupRepresentationCall(String groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupRepresentationRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/representation"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupRepresentationValidateBeforeCall(String groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupRepresentation(Async)");
        }

        // verify the required parameter 'updateGroupRepresentationRequest' is set
        if (updateGroupRepresentationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGroupRepresentationRequest' when calling updateGroupRepresentation(Async)");
        }

        return updateGroupRepresentationCall(groupId, updateGroupRepresentationRequest, _callback);

    }

    /**
     * Update Group Representation
     * Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRepresentationRequest  (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after updating group representation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public Success updateGroupRepresentation(String groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest) throws ApiException {
        ApiResponse<Success> localVarResp = updateGroupRepresentationWithHttpInfo(groupId, updateGroupRepresentationRequest);
        return localVarResp.getData();
    }

    /**
     * Update Group Representation
     * Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRepresentationRequest  (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after updating group representation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> updateGroupRepresentationWithHttpInfo(String groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupRepresentationValidateBeforeCall(groupId, updateGroupRepresentationRequest, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Group Representation (asynchronously)
     * Updates whether the user is representing the group.  When &#x60;isRepresenting&#x60; is set to &#x60;true&#x60;, this flag will be set to &#x60;false&#x60; for all other groups
     * @param groupId Must be a valid group ID. (required)
     * @param updateGroupRepresentationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response after updating group representation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to perform operations on a group you are not member of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupRepresentationAsync(String groupId, UpdateGroupRepresentationRequest updateGroupRepresentationRequest, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupRepresentationValidateBeforeCall(groupId, updateGroupRepresentationRequest, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupRole
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param updateGroupRoleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupRoleCall(String groupId, String groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupRoleRequest;

        // create path and map variables
        String localVarPath = "/groups/{groupId}/roles/{groupRoleId}"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "groupRoleId" + "}", localVarApiClient.escapeString(groupRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupRoleValidateBeforeCall(String groupId, String groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupRole(Async)");
        }

        // verify the required parameter 'groupRoleId' is set
        if (groupRoleId == null) {
            throw new ApiException("Missing the required parameter 'groupRoleId' when calling updateGroupRole(Async)");
        }

        return updateGroupRoleCall(groupId, groupRoleId, updateGroupRoleRequest, _callback);

    }

    /**
     * Update Group Role
     * Updates a group role by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param updateGroupRoleRequest  (optional)
     * @return List&lt;GroupRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<GroupRole> updateGroupRole(String groupId, String groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest) throws ApiException {
        ApiResponse<List<GroupRole>> localVarResp = updateGroupRoleWithHttpInfo(groupId, groupRoleId, updateGroupRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Update Group Role
     * Updates a group role by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param updateGroupRoleRequest  (optional)
     * @return ApiResponse&lt;List&lt;GroupRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GroupRole>> updateGroupRoleWithHttpInfo(String groupId, String groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupRoleValidateBeforeCall(groupId, groupRoleId, updateGroupRoleRequest, null);
        Type localVarReturnType = new TypeToken<List<GroupRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Group Role (asynchronously)
     * Updates a group role by ID.
     * @param groupId Must be a valid group ID. (required)
     * @param groupRoleId Must be a valid group role ID. (required)
     * @param updateGroupRoleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of GroupRole objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupRoleAsync(String groupId, String groupRoleId, UpdateGroupRoleRequest updateGroupRoleRequest, final ApiCallback<List<GroupRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupRoleValidateBeforeCall(groupId, groupRoleId, updateGroupRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<List<GroupRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
