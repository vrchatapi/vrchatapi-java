/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.19.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.Avatar;
import io.github.vrchatapi.model.CreateAvatarRequest;
import io.github.vrchatapi.model.CurrentUser;
import io.github.vrchatapi.model.Error;
import io.github.vrchatapi.model.OrderOption;
import io.github.vrchatapi.model.ReleaseStatus;
import io.github.vrchatapi.model.ServiceQueueStats;
import io.github.vrchatapi.model.ServiceStatus;
import io.github.vrchatapi.model.SortOption;
import io.github.vrchatapi.model.UpdateAvatarRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AvatarsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AvatarsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AvatarsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAvatar
     * @param createAvatarRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response when set featured to true without being an admin. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAvatarCall(CreateAvatarRequest createAvatarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAvatarRequest;

        // create path and map variables
        String localVarPath = "/avatars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAvatarValidateBeforeCall(CreateAvatarRequest createAvatarRequest, final ApiCallback _callback) throws ApiException {
        return createAvatarCall(createAvatarRequest, _callback);

    }

    /**
     * Create Avatar
     * Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
     * @param createAvatarRequest  (optional)
     * @return Avatar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response when set featured to true without being an admin. </td><td>  -  </td></tr>
     </table>
     */
    public Avatar createAvatar(CreateAvatarRequest createAvatarRequest) throws ApiException {
        ApiResponse<Avatar> localVarResp = createAvatarWithHttpInfo(createAvatarRequest);
        return localVarResp.getData();
    }

    /**
     * Create Avatar
     * Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
     * @param createAvatarRequest  (optional)
     * @return ApiResponse&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response when set featured to true without being an admin. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Avatar> createAvatarWithHttpInfo(CreateAvatarRequest createAvatarRequest) throws ApiException {
        okhttp3.Call localVarCall = createAvatarValidateBeforeCall(createAvatarRequest, null);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Avatar (asynchronously)
     * Create an avatar. It&#39;s possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
     * @param createAvatarRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response due to missing permissions. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response when set featured to true without being an admin. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAvatarAsync(CreateAvatarRequest createAvatarRequest, final ApiCallback<Avatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAvatarValidateBeforeCall(createAvatarRequest, _callback);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAvatar
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAvatarCall(String avatarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/{avatarId}"
            .replace("{" + "avatarId" + "}", localVarApiClient.escapeString(avatarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAvatarValidateBeforeCall(String avatarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatarId' is set
        if (avatarId == null) {
            throw new ApiException("Missing the required parameter 'avatarId' when calling deleteAvatar(Async)");
        }

        return deleteAvatarCall(avatarId, _callback);

    }

    /**
     * Delete Avatar
     * Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return Avatar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public Avatar deleteAvatar(String avatarId) throws ApiException {
        ApiResponse<Avatar> localVarResp = deleteAvatarWithHttpInfo(avatarId);
        return localVarResp.getData();
    }

    /**
     * Delete Avatar
     * Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return ApiResponse&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Avatar> deleteAvatarWithHttpInfo(String avatarId) throws ApiException {
        okhttp3.Call localVarCall = deleteAvatarValidateBeforeCall(avatarId, null);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Avatar (asynchronously)
     * Delete an avatar. Notice an avatar is never fully \&quot;deleted\&quot;, only its ReleaseStatus is set to \&quot;hidden\&quot; and the linked Files are deleted. The AvatarID is permanently reserved.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAvatarAsync(String avatarId, final ApiCallback<Avatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAvatarValidateBeforeCall(avatarId, _callback);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImpostor
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Impostors generated for that avatar are deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImpostorCall(String avatarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/{avatarId}/impostor"
            .replace("{" + "avatarId" + "}", localVarApiClient.escapeString(avatarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImpostorValidateBeforeCall(String avatarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatarId' is set
        if (avatarId == null) {
            throw new ApiException("Missing the required parameter 'avatarId' when calling deleteImpostor(Async)");
        }

        return deleteImpostorCall(avatarId, _callback);

    }

    /**
     * Delete generated Impostor
     * Delete generated Impostor for that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Impostors generated for that avatar are deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImpostor(String avatarId) throws ApiException {
        deleteImpostorWithHttpInfo(avatarId);
    }

    /**
     * Delete generated Impostor
     * Delete generated Impostor for that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Impostors generated for that avatar are deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImpostorWithHttpInfo(String avatarId) throws ApiException {
        okhttp3.Call localVarCall = deleteImpostorValidateBeforeCall(avatarId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete generated Impostor (asynchronously)
     * Delete generated Impostor for that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Impostors generated for that avatar are deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImpostorAsync(String avatarId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImpostorValidateBeforeCall(avatarId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enqueueImpostor
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enqueueImpostorCall(String avatarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/{avatarId}/impostor/enqueue"
            .replace("{" + "avatarId" + "}", localVarApiClient.escapeString(avatarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enqueueImpostorValidateBeforeCall(String avatarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatarId' is set
        if (avatarId == null) {
            throw new ApiException("Missing the required parameter 'avatarId' when calling enqueueImpostor(Async)");
        }

        return enqueueImpostorCall(avatarId, _callback);

    }

    /**
     * Enqueue Impostor generation
     * Enqueue Impostor generation for that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return ServiceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceStatus enqueueImpostor(String avatarId) throws ApiException {
        ApiResponse<ServiceStatus> localVarResp = enqueueImpostorWithHttpInfo(avatarId);
        return localVarResp.getData();
    }

    /**
     * Enqueue Impostor generation
     * Enqueue Impostor generation for that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return ApiResponse&lt;ServiceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceStatus> enqueueImpostorWithHttpInfo(String avatarId) throws ApiException {
        okhttp3.Call localVarCall = enqueueImpostorValidateBeforeCall(avatarId, null);
        Type localVarReturnType = new TypeToken<ServiceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enqueue Impostor generation (asynchronously)
     * Enqueue Impostor generation for that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Status. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enqueueImpostorAsync(String avatarId, final ApiCallback<ServiceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enqueueImpostorValidateBeforeCall(avatarId, _callback);
        Type localVarReturnType = new TypeToken<ServiceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvatar
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvatarCall(String avatarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/{avatarId}"
            .replace("{" + "avatarId" + "}", localVarApiClient.escapeString(avatarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvatarValidateBeforeCall(String avatarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatarId' is set
        if (avatarId == null) {
            throw new ApiException("Missing the required parameter 'avatarId' when calling getAvatar(Async)");
        }

        return getAvatarCall(avatarId, _callback);

    }

    /**
     * Get Avatar
     * Get information about a specific Avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return Avatar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public Avatar getAvatar(String avatarId) throws ApiException {
        ApiResponse<Avatar> localVarResp = getAvatarWithHttpInfo(avatarId);
        return localVarResp.getData();
    }

    /**
     * Get Avatar
     * Get information about a specific Avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return ApiResponse&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Avatar> getAvatarWithHttpInfo(String avatarId) throws ApiException {
        okhttp3.Call localVarCall = getAvatarValidateBeforeCall(avatarId, null);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Avatar (asynchronously)
     * Get information about a specific Avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvatarAsync(String avatarId, final ApiCallback<Avatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvatarValidateBeforeCall(avatarId, _callback);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFavoritedAvatars
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited avatars of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoritedAvatarsCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/favorites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (notag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notag", notag));
        }

        if (releaseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseStatus", releaseStatus));
        }

        if (maxUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUnityVersion", maxUnityVersion));
        }

        if (minUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minUnityVersion", minUnityVersion));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoritedAvatarsValidateBeforeCall(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback _callback) throws ApiException {
        return getFavoritedAvatarsCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, _callback);

    }

    /**
     * List Favorited Avatars
     * Search and list favorited avatars by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @return List&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited avatars of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public List<Avatar> getFavoritedAvatars(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId) throws ApiException {
        ApiResponse<List<Avatar>> localVarResp = getFavoritedAvatarsWithHttpInfo(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId);
        return localVarResp.getData();
    }

    /**
     * List Favorited Avatars
     * Search and list favorited avatars by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @return ApiResponse&lt;List&lt;Avatar&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited avatars of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Avatar>> getFavoritedAvatarsWithHttpInfo(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId) throws ApiException {
        okhttp3.Call localVarCall = getFavoritedAvatarsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, null);
        Type localVarReturnType = new TypeToken<List<Avatar>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Favorited Avatars (asynchronously)
     * Search and list favorited avatars by query filters.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param search Filters by world name. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see favourited avatars of another user without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoritedAvatarsAsync(Boolean featured, SortOption sort, Integer n, OrderOption order, Integer offset, String search, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, String userId, final ApiCallback<List<Avatar>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoritedAvatarsValidateBeforeCall(featured, sort, n, order, offset, search, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, userId, _callback);
        Type localVarReturnType = new TypeToken<List<Avatar>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImpostorQueueStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Queue Stats. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImpostorQueueStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/impostor/queue/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImpostorQueueStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getImpostorQueueStatsCall(_callback);

    }

    /**
     * Get Impostor Queue Stats
     * Gets service stats for queued impostor.
     * @return ServiceQueueStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Queue Stats. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceQueueStats getImpostorQueueStats() throws ApiException {
        ApiResponse<ServiceQueueStats> localVarResp = getImpostorQueueStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Impostor Queue Stats
     * Gets service stats for queued impostor.
     * @return ApiResponse&lt;ServiceQueueStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Queue Stats. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceQueueStats> getImpostorQueueStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getImpostorQueueStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ServiceQueueStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Impostor Queue Stats (asynchronously)
     * Gets service stats for queued impostor.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Service Queue Stats. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImpostorQueueStatsAsync(final ApiCallback<ServiceQueueStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImpostorQueueStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ServiceQueueStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicensedAvatars
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensedAvatarsCall(Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/licensed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicensedAvatarsValidateBeforeCall(Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        return getLicensedAvatarsCall(n, offset, _callback);

    }

    /**
     * List Licensed Avatars
     * List licensed avatars.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return List&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<Avatar> getLicensedAvatars(Integer n, Integer offset) throws ApiException {
        ApiResponse<List<Avatar>> localVarResp = getLicensedAvatarsWithHttpInfo(n, offset);
        return localVarResp.getData();
    }

    /**
     * List Licensed Avatars
     * List licensed avatars.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @return ApiResponse&lt;List&lt;Avatar&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Avatar>> getLicensedAvatarsWithHttpInfo(Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getLicensedAvatarsValidateBeforeCall(n, offset, null);
        Type localVarReturnType = new TypeToken<List<Avatar>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Licensed Avatars (asynchronously)
     * List licensed avatars.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicensedAvatarsAsync(Integer n, Integer offset, final ApiCallback<List<Avatar>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicensedAvatarsValidateBeforeCall(n, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Avatar>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOwnAvatar
     * @param userId Must be a valid user ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see another users current avatar without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnAvatarCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/avatar"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnAvatarValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getOwnAvatar(Async)");
        }

        return getOwnAvatarCall(userId, _callback);

    }

    /**
     * Get Own Avatar
     * Get the current avatar for the user. This will return an error for any other user than the one logged in.
     * @param userId Must be a valid user ID. (required)
     * @return Avatar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see another users current avatar without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public Avatar getOwnAvatar(String userId) throws ApiException {
        ApiResponse<Avatar> localVarResp = getOwnAvatarWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get Own Avatar
     * Get the current avatar for the user. This will return an error for any other user than the one logged in.
     * @param userId Must be a valid user ID. (required)
     * @return ApiResponse&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see another users current avatar without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Avatar> getOwnAvatarWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getOwnAvatarValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Own Avatar (asynchronously)
     * Get the current avatar for the user. This will return an error for any other user than the one logged in.
     * @param userId Must be a valid user ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to see another users current avatar without sufficient admin permissions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnAvatarAsync(String userId, final ApiCallback<Avatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOwnAvatarValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAvatars
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own avatars. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAvatarsCall(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (notag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notag", notag));
        }

        if (releaseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseStatus", releaseStatus));
        }

        if (maxUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxUnityVersion", maxUnityVersion));
        }

        if (minUnityVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minUnityVersion", minUnityVersion));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAvatarsValidateBeforeCall(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, final ApiCallback _callback) throws ApiException {
        return searchAvatarsCall(featured, sort, user, userId, n, order, offset, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, _callback);

    }

    /**
     * Search Avatars
     * Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own avatars. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @return List&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<Avatar> searchAvatars(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform) throws ApiException {
        ApiResponse<List<Avatar>> localVarResp = searchAvatarsWithHttpInfo(featured, sort, user, userId, n, order, offset, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform);
        return localVarResp.getData();
    }

    /**
     * Search Avatars
     * Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own avatars. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @return ApiResponse&lt;List&lt;Avatar&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Avatar>> searchAvatarsWithHttpInfo(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform) throws ApiException {
        okhttp3.Call localVarCall = searchAvatarsValidateBeforeCall(featured, sort, user, userId, n, order, offset, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, null);
        Type localVarReturnType = new TypeToken<List<Avatar>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Avatars (asynchronously)
     * Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
     * @param featured Filters on featured results. (optional)
     * @param sort The sort order of the results. (optional, default to popularity)
     * @param user Set to &#x60;me&#x60; for searching own avatars. (optional)
     * @param userId Filter by UserID. (optional)
     * @param n The number of objects to return. (optional, default to 60)
     * @param order Result ordering (optional, default to descending)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param notag Tags to exclude (comma-separated). (optional)
     * @param releaseStatus Filter by ReleaseStatus. (optional, default to public)
     * @param maxUnityVersion The maximum Unity version supported by the asset. (optional)
     * @param minUnityVersion The minimum Unity version supported by the asset. (optional)
     * @param platform The platform the asset supports. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Avatar objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAvatarsAsync(Boolean featured, SortOption sort, String user, String userId, Integer n, OrderOption order, Integer offset, String tag, String notag, ReleaseStatus releaseStatus, String maxUnityVersion, String minUnityVersion, String platform, final ApiCallback<List<Avatar>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAvatarsValidateBeforeCall(featured, sort, user, userId, n, order, offset, tag, notag, releaseStatus, maxUnityVersion, minUnityVersion, platform, _callback);
        Type localVarReturnType = new TypeToken<List<Avatar>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selectAvatar
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectAvatarCall(String avatarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/{avatarId}/select"
            .replace("{" + "avatarId" + "}", localVarApiClient.escapeString(avatarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectAvatarValidateBeforeCall(String avatarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatarId' is set
        if (avatarId == null) {
            throw new ApiException("Missing the required parameter 'avatarId' when calling selectAvatar(Async)");
        }

        return selectAvatarCall(avatarId, _callback);

    }

    /**
     * Select Avatar
     * Switches into that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return CurrentUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public CurrentUser selectAvatar(String avatarId) throws ApiException {
        ApiResponse<CurrentUser> localVarResp = selectAvatarWithHttpInfo(avatarId);
        return localVarResp.getData();
    }

    /**
     * Select Avatar
     * Switches into that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return ApiResponse&lt;CurrentUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrentUser> selectAvatarWithHttpInfo(String avatarId) throws ApiException {
        okhttp3.Call localVarCall = selectAvatarValidateBeforeCall(avatarId, null);
        Type localVarReturnType = new TypeToken<CurrentUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Select Avatar (asynchronously)
     * Switches into that avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectAvatarAsync(String avatarId, final ApiCallback<CurrentUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectAvatarValidateBeforeCall(avatarId, _callback);
        Type localVarReturnType = new TypeToken<CurrentUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selectFallbackAvatar
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to select a fallback avatar that is missing the fallback tag. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectFallbackAvatarCall(String avatarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/{avatarId}/selectFallback"
            .replace("{" + "avatarId" + "}", localVarApiClient.escapeString(avatarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectFallbackAvatarValidateBeforeCall(String avatarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatarId' is set
        if (avatarId == null) {
            throw new ApiException("Missing the required parameter 'avatarId' when calling selectFallbackAvatar(Async)");
        }

        return selectFallbackAvatarCall(avatarId, _callback);

    }

    /**
     * Select Fallback Avatar
     * Switches into that avatar as your fallback avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return CurrentUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to select a fallback avatar that is missing the fallback tag. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public CurrentUser selectFallbackAvatar(String avatarId) throws ApiException {
        ApiResponse<CurrentUser> localVarResp = selectFallbackAvatarWithHttpInfo(avatarId);
        return localVarResp.getData();
    }

    /**
     * Select Fallback Avatar
     * Switches into that avatar as your fallback avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @return ApiResponse&lt;CurrentUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to select a fallback avatar that is missing the fallback tag. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrentUser> selectFallbackAvatarWithHttpInfo(String avatarId) throws ApiException {
        okhttp3.Call localVarCall = selectFallbackAvatarValidateBeforeCall(avatarId, null);
        Type localVarReturnType = new TypeToken<CurrentUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Select Fallback Avatar (asynchronously)
     * Switches into that avatar as your fallback avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single CurrentUser object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying to select a fallback avatar that is missing the fallback tag. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectFallbackAvatarAsync(String avatarId, final ApiCallback<CurrentUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectFallbackAvatarValidateBeforeCall(avatarId, _callback);
        Type localVarReturnType = new TypeToken<CurrentUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAvatar
     * @param avatarId Must be a valid avatar ID. (required)
     * @param updateAvatarRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAvatarCall(String avatarId, UpdateAvatarRequest updateAvatarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAvatarRequest;

        // create path and map variables
        String localVarPath = "/avatars/{avatarId}"
            .replace("{" + "avatarId" + "}", localVarApiClient.escapeString(avatarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAvatarValidateBeforeCall(String avatarId, UpdateAvatarRequest updateAvatarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatarId' is set
        if (avatarId == null) {
            throw new ApiException("Missing the required parameter 'avatarId' when calling updateAvatar(Async)");
        }

        return updateAvatarCall(avatarId, updateAvatarRequest, _callback);

    }

    /**
     * Update Avatar
     * Update information about a specific avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param updateAvatarRequest  (optional)
     * @return Avatar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public Avatar updateAvatar(String avatarId, UpdateAvatarRequest updateAvatarRequest) throws ApiException {
        ApiResponse<Avatar> localVarResp = updateAvatarWithHttpInfo(avatarId, updateAvatarRequest);
        return localVarResp.getData();
    }

    /**
     * Update Avatar
     * Update information about a specific avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param updateAvatarRequest  (optional)
     * @return ApiResponse&lt;Avatar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Avatar> updateAvatarWithHttpInfo(String avatarId, UpdateAvatarRequest updateAvatarRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAvatarValidateBeforeCall(avatarId, updateAvatarRequest, null);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Avatar (asynchronously)
     * Update information about a specific avatar.
     * @param avatarId Must be a valid avatar ID. (required)
     * @param updateAvatarRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Avatar object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent avatar. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAvatarAsync(String avatarId, UpdateAvatarRequest updateAvatarRequest, final ApiCallback<Avatar> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAvatarValidateBeforeCall(avatarId, updateAvatarRequest, _callback);
        Type localVarReturnType = new TypeToken<Avatar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
