/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.Error;
import io.github.vrchatapi.model.Inventory;
import io.github.vrchatapi.model.InventoryDrop;
import io.github.vrchatapi.model.InventoryFlag;
import io.github.vrchatapi.model.InventoryItem;
import io.github.vrchatapi.model.InventoryItemType;
import io.github.vrchatapi.model.InventorySpawn;
import io.github.vrchatapi.model.InventoryTemplate;
import io.github.vrchatapi.model.OkStatus;
import io.github.vrchatapi.model.ShareInventoryItemDirectRequest;
import io.github.vrchatapi.model.UpdateInventoryItemRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InventoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getInventory
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param order Sort order for inventory retrieval. (optional)
     * @param tags Filter tags for inventory retrieval (comma-separated). (optional)
     * @param types Filter for inventory retrieval. (optional, default to bundle)
     * @param flags Filter flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param notTypes Filter out types for inventory retrieval (comma-separated). (optional, default to bundle)
     * @param notFlags Filter out flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param archived Filter archived status for inventory retrieval. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Inventory object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryCall(Integer n, Integer offset, String order, String tags, InventoryItemType types, InventoryFlag flags, InventoryItemType notTypes, InventoryFlag notFlags, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (flags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flags", flags));
        }

        if (notTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notTypes", notTypes));
        }

        if (notFlags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notFlags", notFlags));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInventoryValidateBeforeCall(Integer n, Integer offset, String order, String tags, InventoryItemType types, InventoryFlag flags, InventoryItemType notTypes, InventoryFlag notFlags, Boolean archived, final ApiCallback _callback) throws ApiException {
        return getInventoryCall(n, offset, order, tags, types, flags, notTypes, notFlags, archived, _callback);

    }

    /**
     * Get Inventory
     * Returns an Inventory object.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param order Sort order for inventory retrieval. (optional)
     * @param tags Filter tags for inventory retrieval (comma-separated). (optional)
     * @param types Filter for inventory retrieval. (optional, default to bundle)
     * @param flags Filter flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param notTypes Filter out types for inventory retrieval (comma-separated). (optional, default to bundle)
     * @param notFlags Filter out flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param archived Filter archived status for inventory retrieval. (optional)
     * @return Inventory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Inventory object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public Inventory getInventory(Integer n, Integer offset, String order, String tags, InventoryItemType types, InventoryFlag flags, InventoryItemType notTypes, InventoryFlag notFlags, Boolean archived) throws ApiException {
        ApiResponse<Inventory> localVarResp = getInventoryWithHttpInfo(n, offset, order, tags, types, flags, notTypes, notFlags, archived);
        return localVarResp.getData();
    }

    /**
     * Get Inventory
     * Returns an Inventory object.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param order Sort order for inventory retrieval. (optional)
     * @param tags Filter tags for inventory retrieval (comma-separated). (optional)
     * @param types Filter for inventory retrieval. (optional, default to bundle)
     * @param flags Filter flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param notTypes Filter out types for inventory retrieval (comma-separated). (optional, default to bundle)
     * @param notFlags Filter out flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param archived Filter archived status for inventory retrieval. (optional)
     * @return ApiResponse&lt;Inventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Inventory object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Inventory> getInventoryWithHttpInfo(Integer n, Integer offset, String order, String tags, InventoryItemType types, InventoryFlag flags, InventoryItemType notTypes, InventoryFlag notFlags, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getInventoryValidateBeforeCall(n, offset, order, tags, types, flags, notTypes, notFlags, archived, null);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Inventory (asynchronously)
     * Returns an Inventory object.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param order Sort order for inventory retrieval. (optional)
     * @param tags Filter tags for inventory retrieval (comma-separated). (optional)
     * @param types Filter for inventory retrieval. (optional, default to bundle)
     * @param flags Filter flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param notTypes Filter out types for inventory retrieval (comma-separated). (optional, default to bundle)
     * @param notFlags Filter out flags for inventory retrieval (comma-separated). (optional, default to instantiatable)
     * @param archived Filter archived status for inventory retrieval. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Inventory object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryAsync(Integer n, Integer offset, String order, String tags, InventoryItemType types, InventoryFlag flags, InventoryItemType notTypes, InventoryFlag notFlags, Boolean archived, final ApiCallback<Inventory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInventoryValidateBeforeCall(n, offset, order, tags, types, flags, notTypes, notFlags, archived, _callback);
        Type localVarReturnType = new TypeToken<Inventory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInventoryDrops
     * @param active Filter for users&#39; listings and inventory bundles. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InventoryDrop objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryDropsCall(Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inventory/drops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInventoryDropsValidateBeforeCall(Boolean active, final ApiCallback _callback) throws ApiException {
        return getInventoryDropsCall(active, _callback);

    }

    /**
     * List Inventory Drops
     * Returns a list of InventoryDrop objects.
     * @param active Filter for users&#39; listings and inventory bundles. (optional)
     * @return List&lt;InventoryDrop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InventoryDrop objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<InventoryDrop> getInventoryDrops(Boolean active) throws ApiException {
        ApiResponse<List<InventoryDrop>> localVarResp = getInventoryDropsWithHttpInfo(active);
        return localVarResp.getData();
    }

    /**
     * List Inventory Drops
     * Returns a list of InventoryDrop objects.
     * @param active Filter for users&#39; listings and inventory bundles. (optional)
     * @return ApiResponse&lt;List&lt;InventoryDrop&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InventoryDrop objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InventoryDrop>> getInventoryDropsWithHttpInfo(Boolean active) throws ApiException {
        okhttp3.Call localVarCall = getInventoryDropsValidateBeforeCall(active, null);
        Type localVarReturnType = new TypeToken<List<InventoryDrop>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Inventory Drops (asynchronously)
     * Returns a list of InventoryDrop objects.
     * @param active Filter for users&#39; listings and inventory bundles. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of InventoryDrop objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryDropsAsync(Boolean active, final ApiCallback<List<InventoryDrop>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInventoryDropsValidateBeforeCall(active, _callback);
        Type localVarReturnType = new TypeToken<List<InventoryDrop>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInventoryTemplate
     * @param inventoryTemplateId Must be a valid inventory template ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryTemplate object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryTemplateCall(String inventoryTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inventory/template/{inventoryTemplateId}"
            .replace("{" + "inventoryTemplateId" + "}", localVarApiClient.escapeString(inventoryTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInventoryTemplateValidateBeforeCall(String inventoryTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryTemplateId' is set
        if (inventoryTemplateId == null) {
            throw new ApiException("Missing the required parameter 'inventoryTemplateId' when calling getInventoryTemplate(Async)");
        }

        return getInventoryTemplateCall(inventoryTemplateId, _callback);

    }

    /**
     * Get Inventory Template
     * Returns an InventoryTemplate object.
     * @param inventoryTemplateId Must be a valid inventory template ID. (required)
     * @return InventoryTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryTemplate object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public InventoryTemplate getInventoryTemplate(String inventoryTemplateId) throws ApiException {
        ApiResponse<InventoryTemplate> localVarResp = getInventoryTemplateWithHttpInfo(inventoryTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get Inventory Template
     * Returns an InventoryTemplate object.
     * @param inventoryTemplateId Must be a valid inventory template ID. (required)
     * @return ApiResponse&lt;InventoryTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryTemplate object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryTemplate> getInventoryTemplateWithHttpInfo(String inventoryTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getInventoryTemplateValidateBeforeCall(inventoryTemplateId, null);
        Type localVarReturnType = new TypeToken<InventoryTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Inventory Template (asynchronously)
     * Returns an InventoryTemplate object.
     * @param inventoryTemplateId Must be a valid inventory template ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryTemplate object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryTemplateAsync(String inventoryTemplateId, final ApiCallback<InventoryTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInventoryTemplateValidateBeforeCall(inventoryTemplateId, _callback);
        Type localVarReturnType = new TypeToken<InventoryTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOwnInventoryItem
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnInventoryItemCall(String inventoryItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inventory/{inventoryItemId}"
            .replace("{" + "inventoryItemId" + "}", localVarApiClient.escapeString(inventoryItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnInventoryItemValidateBeforeCall(String inventoryItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryItemId' is set
        if (inventoryItemId == null) {
            throw new ApiException("Missing the required parameter 'inventoryItemId' when calling getOwnInventoryItem(Async)");
        }

        return getOwnInventoryItemCall(inventoryItemId, _callback);

    }

    /**
     * Get Own Inventory Item
     * Returns an InventoryItem object held by the currently logged in user.
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem getOwnInventoryItem(String inventoryItemId) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = getOwnInventoryItemWithHttpInfo(inventoryItemId);
        return localVarResp.getData();
    }

    /**
     * Get Own Inventory Item
     * Returns an InventoryItem object held by the currently logged in user.
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> getOwnInventoryItemWithHttpInfo(String inventoryItemId) throws ApiException {
        okhttp3.Call localVarCall = getOwnInventoryItemValidateBeforeCall(inventoryItemId, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Own Inventory Item (asynchronously)
     * Returns an InventoryItem object held by the currently logged in user.
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnInventoryItemAsync(String inventoryItemId, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOwnInventoryItemValidateBeforeCall(inventoryItemId, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareInventoryItemDirect
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @param shareInventoryItemDirectRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an OkStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareInventoryItemDirectCall(String itemId, Integer duration, ShareInventoryItemDirectRequest shareInventoryItemDirectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareInventoryItemDirectRequest;

        // create path and map variables
        String localVarPath = "/inventory/cloning/direct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareInventoryItemDirectValidateBeforeCall(String itemId, Integer duration, ShareInventoryItemDirectRequest shareInventoryItemDirectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling shareInventoryItemDirect(Async)");
        }

        // verify the required parameter 'duration' is set
        if (duration == null) {
            throw new ApiException("Missing the required parameter 'duration' when calling shareInventoryItemDirect(Async)");
        }

        // verify the required parameter 'shareInventoryItemDirectRequest' is set
        if (shareInventoryItemDirectRequest == null) {
            throw new ApiException("Missing the required parameter 'shareInventoryItemDirectRequest' when calling shareInventoryItemDirect(Async)");
        }

        return shareInventoryItemDirectCall(itemId, duration, shareInventoryItemDirectRequest, _callback);

    }

    /**
     * Share Inventory Item Direct
     * Share content directly with other users.
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @param shareInventoryItemDirectRequest  (required)
     * @return OkStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an OkStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public OkStatus shareInventoryItemDirect(String itemId, Integer duration, ShareInventoryItemDirectRequest shareInventoryItemDirectRequest) throws ApiException {
        ApiResponse<OkStatus> localVarResp = shareInventoryItemDirectWithHttpInfo(itemId, duration, shareInventoryItemDirectRequest);
        return localVarResp.getData();
    }

    /**
     * Share Inventory Item Direct
     * Share content directly with other users.
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @param shareInventoryItemDirectRequest  (required)
     * @return ApiResponse&lt;OkStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an OkStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OkStatus> shareInventoryItemDirectWithHttpInfo(String itemId, Integer duration, ShareInventoryItemDirectRequest shareInventoryItemDirectRequest) throws ApiException {
        okhttp3.Call localVarCall = shareInventoryItemDirectValidateBeforeCall(itemId, duration, shareInventoryItemDirectRequest, null);
        Type localVarReturnType = new TypeToken<OkStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Share Inventory Item Direct (asynchronously)
     * Share content directly with other users.
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @param shareInventoryItemDirectRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an OkStatus object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareInventoryItemDirectAsync(String itemId, Integer duration, ShareInventoryItemDirectRequest shareInventoryItemDirectRequest, final ApiCallback<OkStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareInventoryItemDirectValidateBeforeCall(itemId, duration, shareInventoryItemDirectRequest, _callback);
        Type localVarReturnType = new TypeToken<OkStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareInventoryItemPedestal
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareInventoryItemPedestalCall(String itemId, Integer duration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inventory/cloning/pedestal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareInventoryItemPedestalValidateBeforeCall(String itemId, Integer duration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling shareInventoryItemPedestal(Async)");
        }

        // verify the required parameter 'duration' is set
        if (duration == null) {
            throw new ApiException("Missing the required parameter 'duration' when calling shareInventoryItemPedestal(Async)");
        }

        return shareInventoryItemPedestalCall(itemId, duration, _callback);

    }

    /**
     * Share Inventory Item by Pedestal
     * Returns an InventorySpawn object.
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @return InventorySpawn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public InventorySpawn shareInventoryItemPedestal(String itemId, Integer duration) throws ApiException {
        ApiResponse<InventorySpawn> localVarResp = shareInventoryItemPedestalWithHttpInfo(itemId, duration);
        return localVarResp.getData();
    }

    /**
     * Share Inventory Item by Pedestal
     * Returns an InventorySpawn object.
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @return ApiResponse&lt;InventorySpawn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventorySpawn> shareInventoryItemPedestalWithHttpInfo(String itemId, Integer duration) throws ApiException {
        okhttp3.Call localVarCall = shareInventoryItemPedestalValidateBeforeCall(itemId, duration, null);
        Type localVarReturnType = new TypeToken<InventorySpawn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Share Inventory Item by Pedestal (asynchronously)
     * Returns an InventorySpawn object.
     * @param itemId Id for inventory item sharing. (required)
     * @param duration The duration before the sharing pedestal despawns. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareInventoryItemPedestalAsync(String itemId, Integer duration, final ApiCallback<InventorySpawn> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareInventoryItemPedestalValidateBeforeCall(itemId, duration, _callback);
        Type localVarReturnType = new TypeToken<InventorySpawn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for spawnInventoryItem
     * @param id Id for inventory item spawning. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spawnInventoryItemCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inventory/spawn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spawnInventoryItemValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling spawnInventoryItem(Async)");
        }

        return spawnInventoryItemCall(id, _callback);

    }

    /**
     * Spawn Inventory Item
     * Returns an InventorySpawn object.
     * @param id Id for inventory item spawning. (required)
     * @return InventorySpawn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public InventorySpawn spawnInventoryItem(String id) throws ApiException {
        ApiResponse<InventorySpawn> localVarResp = spawnInventoryItemWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Spawn Inventory Item
     * Returns an InventorySpawn object.
     * @param id Id for inventory item spawning. (required)
     * @return ApiResponse&lt;InventorySpawn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventorySpawn> spawnInventoryItemWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = spawnInventoryItemValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventorySpawn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Spawn Inventory Item (asynchronously)
     * Returns an InventorySpawn object.
     * @param id Id for inventory item spawning. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventorySpawn object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spawnInventoryItemAsync(String id, final ApiCallback<InventorySpawn> _callback) throws ApiException {

        okhttp3.Call localVarCall = spawnInventoryItemValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventorySpawn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOwnInventoryItem
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @param updateInventoryItemRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOwnInventoryItemCall(String inventoryItemId, UpdateInventoryItemRequest updateInventoryItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInventoryItemRequest;

        // create path and map variables
        String localVarPath = "/inventory/{inventoryItemId}"
            .replace("{" + "inventoryItemId" + "}", localVarApiClient.escapeString(inventoryItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOwnInventoryItemValidateBeforeCall(String inventoryItemId, UpdateInventoryItemRequest updateInventoryItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryItemId' is set
        if (inventoryItemId == null) {
            throw new ApiException("Missing the required parameter 'inventoryItemId' when calling updateOwnInventoryItem(Async)");
        }

        return updateOwnInventoryItemCall(inventoryItemId, updateInventoryItemRequest, _callback);

    }

    /**
     * Update Own Inventory Item
     * Returns the modified InventoryItem object as held by the currently logged in user.
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @param updateInventoryItemRequest  (optional)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem updateOwnInventoryItem(String inventoryItemId, UpdateInventoryItemRequest updateInventoryItemRequest) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = updateOwnInventoryItemWithHttpInfo(inventoryItemId, updateInventoryItemRequest);
        return localVarResp.getData();
    }

    /**
     * Update Own Inventory Item
     * Returns the modified InventoryItem object as held by the currently logged in user.
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @param updateInventoryItemRequest  (optional)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> updateOwnInventoryItemWithHttpInfo(String inventoryItemId, UpdateInventoryItemRequest updateInventoryItemRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOwnInventoryItemValidateBeforeCall(inventoryItemId, updateInventoryItemRequest, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Own Inventory Item (asynchronously)
     * Returns the modified InventoryItem object as held by the currently logged in user.
     * @param inventoryItemId Must be a valid inventory item ID. (required)
     * @param updateInventoryItemRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an InventoryItem object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOwnInventoryItemAsync(String inventoryItemId, UpdateInventoryItemRequest updateInventoryItemRequest, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOwnInventoryItemValidateBeforeCall(inventoryItemId, updateInventoryItemRequest, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
