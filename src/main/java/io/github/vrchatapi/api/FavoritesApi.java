/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.19.4
 * Contact: vrchatapi.lpv0t@aries.fyi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.vrchatapi.api;

import io.github.vrchatapi.ApiCallback;
import io.github.vrchatapi.ApiClient;
import io.github.vrchatapi.ApiException;
import io.github.vrchatapi.ApiResponse;
import io.github.vrchatapi.Configuration;
import io.github.vrchatapi.Pair;
import io.github.vrchatapi.ProgressRequestBody;
import io.github.vrchatapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.vrchatapi.model.AddFavoriteRequest;
import io.github.vrchatapi.model.Error;
import io.github.vrchatapi.model.Favorite;
import io.github.vrchatapi.model.FavoriteGroup;
import io.github.vrchatapi.model.FavoriteLimits;
import io.github.vrchatapi.model.Success;
import io.github.vrchatapi.model.UpdateFavoriteGroupRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FavoritesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FavoritesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FavoritesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFavorite
     * @param addFavoriteRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Favorite object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying favorite someone or something when already having it/them favorited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying favorite someone whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoriteCall(AddFavoriteRequest addFavoriteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFavoriteRequest;

        // create path and map variables
        String localVarPath = "/favorites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFavoriteValidateBeforeCall(AddFavoriteRequest addFavoriteRequest, final ApiCallback _callback) throws ApiException {
        return addFavoriteCall(addFavoriteRequest, _callback);

    }

    /**
     * Add Favorite
     * Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
     * @param addFavoriteRequest  (optional)
     * @return Favorite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Favorite object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying favorite someone or something when already having it/them favorited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying favorite someone whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public Favorite addFavorite(AddFavoriteRequest addFavoriteRequest) throws ApiException {
        ApiResponse<Favorite> localVarResp = addFavoriteWithHttpInfo(addFavoriteRequest);
        return localVarResp.getData();
    }

    /**
     * Add Favorite
     * Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
     * @param addFavoriteRequest  (optional)
     * @return ApiResponse&lt;Favorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Favorite object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying favorite someone or something when already having it/them favorited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying favorite someone whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Favorite> addFavoriteWithHttpInfo(AddFavoriteRequest addFavoriteRequest) throws ApiException {
        okhttp3.Call localVarCall = addFavoriteValidateBeforeCall(addFavoriteRequest, null);
        Type localVarReturnType = new TypeToken<Favorite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Favorite (asynchronously)
     * Add a new favorite.  Friend groups are named &#x60;group_0&#x60; through &#x60;group_3&#x60;. Avatar and World groups are named &#x60;avatars1&#x60; to &#x60;avatars4&#x60; and &#x60;worlds1&#x60; to &#x60;worlds4&#x60;.  You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
     * @param addFavoriteRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single Favorite object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when trying favorite someone or something when already having it/them favorited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response when trying favorite someone whom you are not friends with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoriteAsync(AddFavoriteRequest addFavoriteRequest, final ApiCallback<Favorite> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFavoriteValidateBeforeCall(addFavoriteRequest, _callback);
        Type localVarReturnType = new TypeToken<Favorite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearFavoriteGroup
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after clearing a favorite group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearFavoriteGroupCall(String favoriteGroupType, String favoriteGroupName, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}"
            .replace("{" + "favoriteGroupType" + "}", localVarApiClient.escapeString(favoriteGroupType.toString()))
            .replace("{" + "favoriteGroupName" + "}", localVarApiClient.escapeString(favoriteGroupName.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearFavoriteGroupValidateBeforeCall(String favoriteGroupType, String favoriteGroupName, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'favoriteGroupType' is set
        if (favoriteGroupType == null) {
            throw new ApiException("Missing the required parameter 'favoriteGroupType' when calling clearFavoriteGroup(Async)");
        }

        // verify the required parameter 'favoriteGroupName' is set
        if (favoriteGroupName == null) {
            throw new ApiException("Missing the required parameter 'favoriteGroupName' when calling clearFavoriteGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling clearFavoriteGroup(Async)");
        }

        return clearFavoriteGroupCall(favoriteGroupType, favoriteGroupName, userId, _callback);

    }

    /**
     * Clear Favorite Group
     * Clear ALL contents of a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after clearing a favorite group. </td><td>  -  </td></tr>
     </table>
     */
    public Success clearFavoriteGroup(String favoriteGroupType, String favoriteGroupName, String userId) throws ApiException {
        ApiResponse<Success> localVarResp = clearFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId);
        return localVarResp.getData();
    }

    /**
     * Clear Favorite Group
     * Clear ALL contents of a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after clearing a favorite group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> clearFavoriteGroupWithHttpInfo(String favoriteGroupType, String favoriteGroupName, String userId) throws ApiException {
        okhttp3.Call localVarCall = clearFavoriteGroupValidateBeforeCall(favoriteGroupType, favoriteGroupName, userId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear Favorite Group (asynchronously)
     * Clear ALL contents of a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after clearing a favorite group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearFavoriteGroupAsync(String favoriteGroupType, String favoriteGroupName, String userId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearFavoriteGroupValidateBeforeCall(favoriteGroupType, favoriteGroupName, userId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFavoriteGroup
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteGroup object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteGroupCall(String favoriteGroupType, String favoriteGroupName, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}"
            .replace("{" + "favoriteGroupType" + "}", localVarApiClient.escapeString(favoriteGroupType.toString()))
            .replace("{" + "favoriteGroupName" + "}", localVarApiClient.escapeString(favoriteGroupName.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoriteGroupValidateBeforeCall(String favoriteGroupType, String favoriteGroupName, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'favoriteGroupType' is set
        if (favoriteGroupType == null) {
            throw new ApiException("Missing the required parameter 'favoriteGroupType' when calling getFavoriteGroup(Async)");
        }

        // verify the required parameter 'favoriteGroupName' is set
        if (favoriteGroupName == null) {
            throw new ApiException("Missing the required parameter 'favoriteGroupName' when calling getFavoriteGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFavoriteGroup(Async)");
        }

        return getFavoriteGroupCall(favoriteGroupType, favoriteGroupName, userId, _callback);

    }

    /**
     * Show Favorite Group
     * Fetch information about a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @return FavoriteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteGroup object. </td><td>  -  </td></tr>
     </table>
     */
    public FavoriteGroup getFavoriteGroup(String favoriteGroupType, String favoriteGroupName, String userId) throws ApiException {
        ApiResponse<FavoriteGroup> localVarResp = getFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId);
        return localVarResp.getData();
    }

    /**
     * Show Favorite Group
     * Fetch information about a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @return ApiResponse&lt;FavoriteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteGroup object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FavoriteGroup> getFavoriteGroupWithHttpInfo(String favoriteGroupType, String favoriteGroupName, String userId) throws ApiException {
        okhttp3.Call localVarCall = getFavoriteGroupValidateBeforeCall(favoriteGroupType, favoriteGroupName, userId, null);
        Type localVarReturnType = new TypeToken<FavoriteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show Favorite Group (asynchronously)
     * Fetch information about a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteGroup object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteGroupAsync(String favoriteGroupType, String favoriteGroupName, String userId, final ApiCallback<FavoriteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoriteGroupValidateBeforeCall(favoriteGroupType, favoriteGroupName, userId, _callback);
        Type localVarReturnType = new TypeToken<FavoriteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFavoriteGroups
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param ownerId The owner of whoms favorite groups to return. Must be a UserID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoriteGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteGroupsCall(Integer n, Integer offset, String userId, String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorite/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (ownerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ownerId", ownerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoriteGroupsValidateBeforeCall(Integer n, Integer offset, String userId, String ownerId, final ApiCallback _callback) throws ApiException {
        return getFavoriteGroupsCall(n, offset, userId, ownerId, _callback);

    }

    /**
     * List Favorite Groups
     * Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param ownerId The owner of whoms favorite groups to return. Must be a UserID. (optional)
     * @return List&lt;FavoriteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoriteGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<FavoriteGroup> getFavoriteGroups(Integer n, Integer offset, String userId, String ownerId) throws ApiException {
        ApiResponse<List<FavoriteGroup>> localVarResp = getFavoriteGroupsWithHttpInfo(n, offset, userId, ownerId);
        return localVarResp.getData();
    }

    /**
     * List Favorite Groups
     * Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param ownerId The owner of whoms favorite groups to return. Must be a UserID. (optional)
     * @return ApiResponse&lt;List&lt;FavoriteGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoriteGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FavoriteGroup>> getFavoriteGroupsWithHttpInfo(Integer n, Integer offset, String userId, String ownerId) throws ApiException {
        okhttp3.Call localVarCall = getFavoriteGroupsValidateBeforeCall(n, offset, userId, ownerId, null);
        Type localVarReturnType = new TypeToken<List<FavoriteGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Favorite Groups (asynchronously)
     * Return a list of favorite groups owned by a user. Returns the same information as &#x60;getFavoriteGroups&#x60;.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param userId Target user to see information on, admin-only. (optional)
     * @param ownerId The owner of whoms favorite groups to return. Must be a UserID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of FavoriteGroup objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteGroupsAsync(Integer n, Integer offset, String userId, String ownerId, final ApiCallback<List<FavoriteGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoriteGroupsValidateBeforeCall(n, offset, userId, ownerId, _callback);
        Type localVarReturnType = new TypeToken<List<FavoriteGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFavoriteLimits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteLimits object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteLimitsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/user/favoritelimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoriteLimitsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFavoriteLimitsCall(_callback);

    }

    /**
     * Get Favorite Limits
     * Return information about a specific Favorite.
     * @return FavoriteLimits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteLimits object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public FavoriteLimits getFavoriteLimits() throws ApiException {
        ApiResponse<FavoriteLimits> localVarResp = getFavoriteLimitsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Favorite Limits
     * Return information about a specific Favorite.
     * @return ApiResponse&lt;FavoriteLimits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteLimits object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FavoriteLimits> getFavoriteLimitsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFavoriteLimitsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<FavoriteLimits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Favorite Limits (asynchronously)
     * Return information about a specific Favorite.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single FavoriteLimits object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteLimitsAsync(final ApiCallback<FavoriteLimits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoriteLimitsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<FavoriteLimits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFavorites
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param type The type of favorites to return, FavoriteType. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Favorite objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoritesCall(Integer n, Integer offset, String type, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (n != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("n", n));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoritesValidateBeforeCall(Integer n, Integer offset, String type, String tag, final ApiCallback _callback) throws ApiException {
        return getFavoritesCall(n, offset, type, tag, _callback);

    }

    /**
     * List Favorites
     * Returns a list of favorites.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param type The type of favorites to return, FavoriteType. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @return List&lt;Favorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Favorite objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public List<Favorite> getFavorites(Integer n, Integer offset, String type, String tag) throws ApiException {
        ApiResponse<List<Favorite>> localVarResp = getFavoritesWithHttpInfo(n, offset, type, tag);
        return localVarResp.getData();
    }

    /**
     * List Favorites
     * Returns a list of favorites.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param type The type of favorites to return, FavoriteType. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @return ApiResponse&lt;List&lt;Favorite&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Favorite objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Favorite>> getFavoritesWithHttpInfo(Integer n, Integer offset, String type, String tag) throws ApiException {
        okhttp3.Call localVarCall = getFavoritesValidateBeforeCall(n, offset, type, tag, null);
        Type localVarReturnType = new TypeToken<List<Favorite>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Favorites (asynchronously)
     * Returns a list of favorites.
     * @param n The number of objects to return. (optional, default to 60)
     * @param offset A zero-based offset from the default object sorting from where search results start. (optional)
     * @param type The type of favorites to return, FavoriteType. (optional)
     * @param tag Tags to include (comma-separated). Any of the tags needs to be present. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Favorite objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoritesAsync(Integer n, Integer offset, String type, String tag, final ApiCallback<List<Favorite>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoritesValidateBeforeCall(n, offset, type, tag, _callback);
        Type localVarReturnType = new TypeToken<List<Favorite>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFavorite
     * @param favoriteId Must be a valid favorite ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after removing a favorite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent favorite. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFavoriteCall(String favoriteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/favorites/{favoriteId}"
            .replace("{" + "favoriteId" + "}", localVarApiClient.escapeString(favoriteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFavoriteValidateBeforeCall(String favoriteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'favoriteId' is set
        if (favoriteId == null) {
            throw new ApiException("Missing the required parameter 'favoriteId' when calling removeFavorite(Async)");
        }

        return removeFavoriteCall(favoriteId, _callback);

    }

    /**
     * Remove Favorite
     * Remove a favorite from your favorites list.
     * @param favoriteId Must be a valid favorite ID. (required)
     * @return Success
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after removing a favorite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent favorite. </td><td>  -  </td></tr>
     </table>
     */
    public Success removeFavorite(String favoriteId) throws ApiException {
        ApiResponse<Success> localVarResp = removeFavoriteWithHttpInfo(favoriteId);
        return localVarResp.getData();
    }

    /**
     * Remove Favorite
     * Remove a favorite from your favorites list.
     * @param favoriteId Must be a valid favorite ID. (required)
     * @return ApiResponse&lt;Success&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after removing a favorite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent favorite. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Success> removeFavoriteWithHttpInfo(String favoriteId) throws ApiException {
        okhttp3.Call localVarCall = removeFavoriteValidateBeforeCall(favoriteId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Favorite (asynchronously)
     * Remove a favorite from your favorites list.
     * @param favoriteId Must be a valid favorite ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after removing a favorite. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response due to missing auth cookie. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response when trying to show information about a non-existent favorite. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFavoriteAsync(String favoriteId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFavoriteValidateBeforeCall(favoriteId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFavoriteGroup
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateFavoriteGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFavoriteGroupCall(String favoriteGroupType, String favoriteGroupName, String userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFavoriteGroupRequest;

        // create path and map variables
        String localVarPath = "/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}"
            .replace("{" + "favoriteGroupType" + "}", localVarApiClient.escapeString(favoriteGroupType.toString()))
            .replace("{" + "favoriteGroupName" + "}", localVarApiClient.escapeString(favoriteGroupName.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authCookie" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFavoriteGroupValidateBeforeCall(String favoriteGroupType, String favoriteGroupName, String userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'favoriteGroupType' is set
        if (favoriteGroupType == null) {
            throw new ApiException("Missing the required parameter 'favoriteGroupType' when calling updateFavoriteGroup(Async)");
        }

        // verify the required parameter 'favoriteGroupName' is set
        if (favoriteGroupName == null) {
            throw new ApiException("Missing the required parameter 'favoriteGroupName' when calling updateFavoriteGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateFavoriteGroup(Async)");
        }

        return updateFavoriteGroupCall(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest, _callback);

    }

    /**
     * Update Favorite Group
     * Update information about a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateFavoriteGroupRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateFavoriteGroup(String favoriteGroupType, String favoriteGroupName, String userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest) throws ApiException {
        updateFavoriteGroupWithHttpInfo(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest);
    }

    /**
     * Update Favorite Group
     * Update information about a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateFavoriteGroupRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateFavoriteGroupWithHttpInfo(String favoriteGroupType, String favoriteGroupName, String userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFavoriteGroupValidateBeforeCall(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Favorite Group (asynchronously)
     * Update information about a specific favorite group.
     * @param favoriteGroupType The type of group to fetch, must be a valid FavoriteType. (required)
     * @param favoriteGroupName The name of the group to fetch, must be a name of a FavoriteGroup. (required)
     * @param userId Must be a valid user ID. (required)
     * @param updateFavoriteGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFavoriteGroupAsync(String favoriteGroupType, String favoriteGroupName, String userId, UpdateFavoriteGroupRequest updateFavoriteGroupRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFavoriteGroupValidateBeforeCall(favoriteGroupType, favoriteGroupName, userId, updateFavoriteGroupRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
